ARM GAS  /tmp/cc89pEOF.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"servomotor.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.servo_set_limit,"ax",%progbits
  16              		.align	1
  17              		.global	servo_set_limit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	servo_set_limit:
  24              	.LFB66:
  25              		.file 1 "stm32-servomotor/servomotor.c"
   1:stm32-servomotor/servomotor.c **** /*
   2:stm32-servomotor/servomotor.c ****  * MIT License
   3:stm32-servomotor/servomotor.c ****  * 
   4:stm32-servomotor/servomotor.c ****  * Copyright (c) 2020 Filipe Chagas
   5:stm32-servomotor/servomotor.c ****  * 
   6:stm32-servomotor/servomotor.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   7:stm32-servomotor/servomotor.c ****  * of this software and associated documentation files (the "Software"), to deal
   8:stm32-servomotor/servomotor.c ****  * in the Software without restriction, including without limitation the rights
   9:stm32-servomotor/servomotor.c ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  10:stm32-servomotor/servomotor.c ****  * copies of the Software, and to permit persons to whom the Software is
  11:stm32-servomotor/servomotor.c ****  * furnished to do so, subject to the following conditions:
  12:stm32-servomotor/servomotor.c ****  * 
  13:stm32-servomotor/servomotor.c ****  * The above copyright notice and this permission notice shall be included in all
  14:stm32-servomotor/servomotor.c ****  * copies or substantial portions of the Software.
  15:stm32-servomotor/servomotor.c ****  * 
  16:stm32-servomotor/servomotor.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:stm32-servomotor/servomotor.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  18:stm32-servomotor/servomotor.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  19:stm32-servomotor/servomotor.c ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  20:stm32-servomotor/servomotor.c ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  21:stm32-servomotor/servomotor.c ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  22:stm32-servomotor/servomotor.c ****  * SOFTWARE.
  23:stm32-servomotor/servomotor.c ****  */
  24:stm32-servomotor/servomotor.c **** 
  25:stm32-servomotor/servomotor.c **** /**
  26:stm32-servomotor/servomotor.c ****  * @file servomotor.c
  27:stm32-servomotor/servomotor.c ****  * @author Filipe Chagas
  28:stm32-servomotor/servomotor.c ****  * @date 27 / 02 / 2020
  29:stm32-servomotor/servomotor.c ****  * @brief Servomotor library for STM32 with CubeMX generated HAL
  30:stm32-servomotor/servomotor.c ****  *
  31:stm32-servomotor/servomotor.c ****  * @see https://github.com/FilipeChagasDev/stm32-servomotor
  32:stm32-servomotor/servomotor.c ****  */
  33:stm32-servomotor/servomotor.c **** 
ARM GAS  /tmp/cc89pEOF.s 			page 2


  34:stm32-servomotor/servomotor.c **** #include "servomotor.h"
  35:stm32-servomotor/servomotor.c **** 
  36:stm32-servomotor/servomotor.c **** servo_status_t servo_init(servo_t *handler, TIM_HandleTypeDef *htim, uint32_t channel)
  37:stm32-servomotor/servomotor.c **** {
  38:stm32-servomotor/servomotor.c ****     if(handler == NULL) return SERVO_STATUS_ERROR;
  39:stm32-servomotor/servomotor.c **** 
  40:stm32-servomotor/servomotor.c ****     handler->htim = htim;
  41:stm32-servomotor/servomotor.c ****     handler->channel = channel;
  42:stm32-servomotor/servomotor.c ****     handler->offset = 0;
  43:stm32-servomotor/servomotor.c ****     handler->min = 0;
  44:stm32-servomotor/servomotor.c ****     handler->max = 170;
  45:stm32-servomotor/servomotor.c **** 
  46:stm32-servomotor/servomotor.c ****     if(HAL_TIM_PWM_Start(htim, channel) != HAL_OK) return SERVO_STATUS_ERROR;
  47:stm32-servomotor/servomotor.c ****     servo_set_position(handler, 0);
  48:stm32-servomotor/servomotor.c **** 
  49:stm32-servomotor/servomotor.c ****     return SERVO_STATUS_OK;
  50:stm32-servomotor/servomotor.c **** }
  51:stm32-servomotor/servomotor.c **** 
  52:stm32-servomotor/servomotor.c **** void servo_set_limit(servo_t *handler, float min, float max)
  53:stm32-servomotor/servomotor.c **** {
  26              		.loc 1 53 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  54:stm32-servomotor/servomotor.c ****     if(handler == NULL) return;
  32              		.loc 1 54 0
  33 0000 08B1     		cbz	r0, .L1
  55:stm32-servomotor/servomotor.c **** 
  56:stm32-servomotor/servomotor.c ****     handler->min = min;
  34              		.loc 1 56 0
  35 0002 C160     		str	r1, [r0, #12]	@ float
  57:stm32-servomotor/servomotor.c ****     handler->max = max;
  36              		.loc 1 57 0
  37 0004 0261     		str	r2, [r0, #16]	@ float
  38              	.L1:
  39 0006 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE66:
  43              		.section	.text.servo_set_offset,"ax",%progbits
  44              		.align	1
  45              		.global	servo_set_offset
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu softvfp
  51              	servo_set_offset:
  52              	.LFB67:
  58:stm32-servomotor/servomotor.c **** }
  59:stm32-servomotor/servomotor.c **** 
  60:stm32-servomotor/servomotor.c **** void servo_set_offset(servo_t *handler, float angle_deg)
  61:stm32-servomotor/servomotor.c **** {
  53              		.loc 1 61 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc89pEOF.s 			page 3


  57              		@ link register save eliminated.
  58              	.LVL1:
  62:stm32-servomotor/servomotor.c ****     if(handler == NULL) return;
  59              		.loc 1 62 0
  60 0000 00B1     		cbz	r0, .L3
  63:stm32-servomotor/servomotor.c **** 
  64:stm32-servomotor/servomotor.c ****     handler->offset = angle_deg;
  61              		.loc 1 64 0
  62 0002 8160     		str	r1, [r0, #8]	@ float
  63              	.L3:
  64 0004 7047     		bx	lr
  65              		.cfi_endproc
  66              	.LFE67:
  68              		.global	__aeabi_f2d
  69              		.global	__aeabi_ddiv
  70              		.global	__aeabi_dadd
  71              		.global	__aeabi_d2f
  72              		.section	.text.servo_duty_ms,"ax",%progbits
  73              		.align	1
  74              		.global	servo_duty_ms
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu softvfp
  80              	servo_duty_ms:
  81              	.LFB68:
  65:stm32-servomotor/servomotor.c **** }
  66:stm32-servomotor/servomotor.c **** 
  67:stm32-servomotor/servomotor.c **** float servo_duty_ms(float angle_deg)
  68:stm32-servomotor/servomotor.c **** {
  82              		.loc 1 68 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              	.LVL2:
  87 0000 08B5     		push	{r3, lr}
  88              	.LCFI0:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 3, -8
  91              		.cfi_offset 14, -4
  69:stm32-servomotor/servomotor.c ****     /*  
  70:stm32-servomotor/servomotor.c ****        180            2ms
  71:stm32-servomotor/servomotor.c ****     --------   =   ----------
  72:stm32-servomotor/servomotor.c ****     angle_deg       duty_ms
  73:stm32-servomotor/servomotor.c **** 
  74:stm32-servomotor/servomotor.c ****                 angle_deg
  75:stm32-servomotor/servomotor.c ****     duty_ms =   --------- 
  76:stm32-servomotor/servomotor.c ****                    90
  77:stm32-servomotor/servomotor.c **** 
  78:stm32-servomotor/servomotor.c ****     0.5ms -> 0deg
  79:stm32-servomotor/servomotor.c ****     2.5ms -> 180deg
  80:stm32-servomotor/servomotor.c ****     */
  81:stm32-servomotor/servomotor.c **** 
  82:stm32-servomotor/servomotor.c ****     return 0.5 + angle_deg / 90.0;
  92              		.loc 1 82 0
  93 0002 FFF7FEFF 		bl	__aeabi_f2d
  94              	.LVL3:
ARM GAS  /tmp/cc89pEOF.s 			page 4


  95 0006 0022     		movs	r2, #0
  96 0008 044B     		ldr	r3, .L7
  97 000a FFF7FEFF 		bl	__aeabi_ddiv
  98              	.LVL4:
  99 000e 0022     		movs	r2, #0
 100 0010 034B     		ldr	r3, .L7+4
 101 0012 FFF7FEFF 		bl	__aeabi_dadd
 102              	.LVL5:
 103 0016 FFF7FEFF 		bl	__aeabi_d2f
 104              	.LVL6:
  83:stm32-servomotor/servomotor.c **** }
 105              		.loc 1 83 0
 106 001a 08BD     		pop	{r3, pc}
 107              	.L8:
 108              		.align	2
 109              	.L7:
 110 001c 00805640 		.word	1079410688
 111 0020 0000E03F 		.word	1071644672
 112              		.cfi_endproc
 113              	.LFE68:
 115              		.global	__aeabi_fadd
 116              		.global	__aeabi_fcmpgt
 117              		.global	__aeabi_fcmplt
 118              		.global	__aeabi_ui2f
 119              		.global	__aeabi_fmul
 120              		.global	__aeabi_fdiv
 121              		.global	__aeabi_f2iz
 122              		.global	__aeabi_f2uiz
 123              		.section	.text.servo_set_position,"ax",%progbits
 124              		.align	1
 125              		.global	servo_set_position
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 129              		.fpu softvfp
 131              	servo_set_position:
 132              	.LFB69:
  84:stm32-servomotor/servomotor.c **** 
  85:stm32-servomotor/servomotor.c **** void servo_set_position(servo_t *handler, float angle_deg)
  86:stm32-servomotor/servomotor.c **** {
 133              		.loc 1 86 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              	.LVL7:
  87:stm32-servomotor/servomotor.c ****     /*
  88:stm32-servomotor/servomotor.c ****     duty_ms      duty_16
  89:stm32-servomotor/servomotor.c ****     ------- =  ----------- 
  90:stm32-servomotor/servomotor.c ****       20ms     max_duty_16
  91:stm32-servomotor/servomotor.c **** 
  92:stm32-servomotor/servomotor.c ****                              duty_ms
  93:stm32-servomotor/servomotor.c ****     duty_16 = max_duty_16 * ----------
  94:stm32-servomotor/servomotor.c ****                               20ms 
  95:stm32-servomotor/servomotor.c ****     */
  96:stm32-servomotor/servomotor.c **** 
  97:stm32-servomotor/servomotor.c ****     if(handler == NULL) return;
 138              		.loc 1 97 0
ARM GAS  /tmp/cc89pEOF.s 			page 5


 139 0000 0028     		cmp	r0, #0
 140 0002 51D0     		beq	.L22
  86:stm32-servomotor/servomotor.c ****     /*
 141              		.loc 1 86 0
 142 0004 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 143              	.LCFI1:
 144              		.cfi_def_cfa_offset 24
 145              		.cfi_offset 3, -24
 146              		.cfi_offset 4, -20
 147              		.cfi_offset 5, -16
 148              		.cfi_offset 6, -12
 149              		.cfi_offset 7, -8
 150              		.cfi_offset 14, -4
 151 0006 0446     		mov	r4, r0
  98:stm32-servomotor/servomotor.c **** 
  99:stm32-servomotor/servomotor.c ****     angle_deg += handler->offset;
 152              		.loc 1 99 0
 153 0008 8068     		ldr	r0, [r0, #8]	@ float
 154              	.LVL8:
 155 000a FFF7FEFF 		bl	__aeabi_fadd
 156              	.LVL9:
 157 000e 0646     		mov	r6, r0
 158              	.LVL10:
 100:stm32-servomotor/servomotor.c ****     angle_deg = ( angle_deg > handler->max ? handler->max : 
 159              		.loc 1 100 0
 160 0010 2569     		ldr	r5, [r4, #16]	@ float
 161 0012 2946     		mov	r1, r5
 162 0014 FFF7FEFF 		bl	__aeabi_fcmpgt
 163              	.LVL11:
 164 0018 30B9     		cbnz	r0, .L11
 101:stm32-servomotor/servomotor.c ****                     ( angle_deg < handler->min ? handler->min : angle_deg )
 165              		.loc 1 101 0
 166 001a E568     		ldr	r5, [r4, #12]	@ float
 167 001c 2946     		mov	r1, r5
 168 001e 3046     		mov	r0, r6
 169 0020 FFF7FEFF 		bl	__aeabi_fcmplt
 170              	.LVL12:
 171 0024 00B9     		cbnz	r0, .L11
 172 0026 3546     		mov	r5, r6
 173              	.L11:
 174              	.LVL13:
 102:stm32-servomotor/servomotor.c ****                 );
 103:stm32-servomotor/servomotor.c **** 
 104:stm32-servomotor/servomotor.c ****     float max_duty_16 = handler->htim->Instance->ARR;
 175              		.loc 1 104 0 discriminator 2
 176 0028 2368     		ldr	r3, [r4]
 177 002a 1E68     		ldr	r6, [r3]
 178 002c F06A     		ldr	r0, [r6, #44]
 179 002e FFF7FEFF 		bl	__aeabi_ui2f
 180              	.LVL14:
 181 0032 0746     		mov	r7, r0
 182              	.LVL15:
 105:stm32-servomotor/servomotor.c ****     float duty_ms = servo_duty_ms(angle_deg);
 183              		.loc 1 105 0 discriminator 2
 184 0034 2846     		mov	r0, r5
 185              	.LVL16:
 186 0036 FFF7FEFF 		bl	servo_duty_ms
ARM GAS  /tmp/cc89pEOF.s 			page 6


 187              	.LVL17:
 106:stm32-servomotor/servomotor.c ****     float duty_16 = (duty_ms * max_duty_16)/ 20.0;
 188              		.loc 1 106 0 discriminator 2
 189 003a 0146     		mov	r1, r0
 190 003c 3846     		mov	r0, r7
 191              	.LVL18:
 192 003e FFF7FEFF 		bl	__aeabi_fmul
 193              	.LVL19:
 194 0042 1A49     		ldr	r1, .L25
 195 0044 FFF7FEFF 		bl	__aeabi_fdiv
 196              	.LVL20:
 197 0048 0546     		mov	r5, r0
 198              	.LVL21:
 107:stm32-servomotor/servomotor.c **** 
 108:stm32-servomotor/servomotor.c ****     uint16_t ccr = ( (int32_t)duty_16 > 0xFFFF ? 0xFFFF :  
 199              		.loc 1 108 0 discriminator 2
 200 004a FFF7FEFF 		bl	__aeabi_f2iz
 201              	.LVL22:
 202 004e B0F5803F 		cmp	r0, #65536
 203 0052 06DA     		bge	.L19
 204              		.loc 1 108 0 is_stmt 0 discriminator 1
 205 0054 0028     		cmp	r0, #0
 206 0056 12DB     		blt	.L20
 207              		.loc 1 108 0 discriminator 3
 208 0058 2846     		mov	r0, r5
 209 005a FFF7FEFF 		bl	__aeabi_f2uiz
 210              	.LVL23:
 211 005e 80B2     		uxth	r0, r0
 212 0060 01E0     		b	.L12
 213              	.L19:
 214              		.loc 1 108 0
 215 0062 4FF6FF70 		movw	r0, #65535
 216              	.L12:
 217              	.LVL24:
 109:stm32-servomotor/servomotor.c ****                      ( (int32_t)duty_16 < 0 ? 0 : (uint16_t)duty_16 ) 
 110:stm32-servomotor/servomotor.c ****                    );
 111:stm32-servomotor/servomotor.c **** 
 112:stm32-servomotor/servomotor.c ****     switch (handler->channel)
 218              		.loc 1 112 0 is_stmt 1 discriminator 8
 219 0066 6368     		ldr	r3, [r4, #4]
 220 0068 0C2B     		cmp	r3, #12
 221 006a 12D8     		bhi	.L13
 222 006c DFE803F0 		tbb	[pc, r3]
 223              	.L15:
 224 0070 09       		.byte	(.L14-.L15)/2
 225 0071 11       		.byte	(.L13-.L15)/2
 226 0072 11       		.byte	(.L13-.L15)/2
 227 0073 11       		.byte	(.L13-.L15)/2
 228 0074 0B       		.byte	(.L16-.L15)/2
 229 0075 11       		.byte	(.L13-.L15)/2
 230 0076 11       		.byte	(.L13-.L15)/2
 231 0077 11       		.byte	(.L13-.L15)/2
 232 0078 0D       		.byte	(.L17-.L15)/2
 233 0079 11       		.byte	(.L13-.L15)/2
 234 007a 11       		.byte	(.L13-.L15)/2
 235 007b 11       		.byte	(.L13-.L15)/2
 236 007c 0F       		.byte	(.L18-.L15)/2
ARM GAS  /tmp/cc89pEOF.s 			page 7


 237              	.LVL25:
 238 007d 00       		.p2align 1
 239              	.L20:
 108:stm32-servomotor/servomotor.c ****                      ( (int32_t)duty_16 < 0 ? 0 : (uint16_t)duty_16 ) 
 240              		.loc 1 108 0
 241 007e 0020     		movs	r0, #0
 242 0080 F1E7     		b	.L12
 243              	.LVL26:
 244              	.L14:
 113:stm32-servomotor/servomotor.c ****     {
 114:stm32-servomotor/servomotor.c ****     case TIM_CHANNEL_1:
 115:stm32-servomotor/servomotor.c ****         handler->htim->Instance->CCR1 = ccr;
 245              		.loc 1 115 0
 246 0082 7063     		str	r0, [r6, #52]
 116:stm32-servomotor/servomotor.c ****         break;
 247              		.loc 1 116 0
 248 0084 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 249              	.LVL27:
 250              	.L16:
 117:stm32-servomotor/servomotor.c ****     case TIM_CHANNEL_2:
 118:stm32-servomotor/servomotor.c ****         handler->htim->Instance->CCR2 = ccr;
 251              		.loc 1 118 0
 252 0086 B063     		str	r0, [r6, #56]
 119:stm32-servomotor/servomotor.c ****         break;
 253              		.loc 1 119 0
 254 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 255              	.LVL28:
 256              	.L17:
 120:stm32-servomotor/servomotor.c ****     case TIM_CHANNEL_3:
 121:stm32-servomotor/servomotor.c ****         handler->htim->Instance->CCR3 = ccr;
 257              		.loc 1 121 0
 258 008a F063     		str	r0, [r6, #60]
 122:stm32-servomotor/servomotor.c ****         break;
 259              		.loc 1 122 0
 260 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 261              	.LVL29:
 262              	.L18:
 123:stm32-servomotor/servomotor.c ****     case TIM_CHANNEL_4:
 124:stm32-servomotor/servomotor.c ****         handler->htim->Instance->CCR4 = ccr;
 263              		.loc 1 124 0
 264 008e 3064     		str	r0, [r6, #64]
 125:stm32-servomotor/servomotor.c ****         break;
 265              		.loc 1 125 0
 266 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 267              	.LVL30:
 268              	.L13:
 126:stm32-servomotor/servomotor.c ****     default:
 127:stm32-servomotor/servomotor.c ****         handler->htim->Instance->CCR1 = ccr;
 269              		.loc 1 127 0
 270 0092 7063     		str	r0, [r6, #52]
 128:stm32-servomotor/servomotor.c ****         handler->htim->Instance->CCR2 = ccr;
 271              		.loc 1 128 0
 272 0094 2368     		ldr	r3, [r4]
 273 0096 1B68     		ldr	r3, [r3]
 274 0098 9863     		str	r0, [r3, #56]
 129:stm32-servomotor/servomotor.c ****         handler->htim->Instance->CCR3 = ccr;
 275              		.loc 1 129 0
ARM GAS  /tmp/cc89pEOF.s 			page 8


 276 009a 2368     		ldr	r3, [r4]
 277 009c 1B68     		ldr	r3, [r3]
 278 009e D863     		str	r0, [r3, #60]
 130:stm32-servomotor/servomotor.c ****         handler->htim->Instance->CCR4 = ccr;
 279              		.loc 1 130 0
 280 00a0 2368     		ldr	r3, [r4]
 281 00a2 1B68     		ldr	r3, [r3]
 282 00a4 1864     		str	r0, [r3, #64]
 283 00a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 284              	.LVL31:
 285              	.L22:
 286              	.LCFI2:
 287              		.cfi_def_cfa_offset 0
 288              		.cfi_restore 3
 289              		.cfi_restore 4
 290              		.cfi_restore 5
 291              		.cfi_restore 6
 292              		.cfi_restore 7
 293              		.cfi_restore 14
 294 00a8 7047     		bx	lr
 295              	.L26:
 296 00aa 00BF     		.align	2
 297              	.L25:
 298 00ac 0000A041 		.word	1101004800
 299              		.cfi_endproc
 300              	.LFE69:
 302              		.section	.text.servo_init,"ax",%progbits
 303              		.align	1
 304              		.global	servo_init
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 308              		.fpu softvfp
 310              	servo_init:
 311              	.LFB65:
  37:stm32-servomotor/servomotor.c ****     if(handler == NULL) return SERVO_STATUS_ERROR;
 312              		.loc 1 37 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              	.LVL32:
  38:stm32-servomotor/servomotor.c **** 
 317              		.loc 1 38 0
 318 0000 A8B1     		cbz	r0, .L29
  37:stm32-servomotor/servomotor.c ****     if(handler == NULL) return SERVO_STATUS_ERROR;
 319              		.loc 1 37 0
 320 0002 10B5     		push	{r4, lr}
 321              	.LCFI3:
 322              		.cfi_def_cfa_offset 8
 323              		.cfi_offset 4, -8
 324              		.cfi_offset 14, -4
 325 0004 0446     		mov	r4, r0
 326 0006 0846     		mov	r0, r1
 327              	.LVL33:
  40:stm32-servomotor/servomotor.c ****     handler->channel = channel;
 328              		.loc 1 40 0
 329 0008 2160     		str	r1, [r4]
ARM GAS  /tmp/cc89pEOF.s 			page 9


  41:stm32-servomotor/servomotor.c ****     handler->offset = 0;
 330              		.loc 1 41 0
 331 000a 6260     		str	r2, [r4, #4]
  42:stm32-servomotor/servomotor.c ****     handler->min = 0;
 332              		.loc 1 42 0
 333 000c 0023     		movs	r3, #0
 334 000e A360     		str	r3, [r4, #8]	@ float
  43:stm32-servomotor/servomotor.c ****     handler->max = 170;
 335              		.loc 1 43 0
 336 0010 E360     		str	r3, [r4, #12]	@ float
  44:stm32-servomotor/servomotor.c **** 
 337              		.loc 1 44 0
 338 0012 084B     		ldr	r3, .L36
 339 0014 2361     		str	r3, [r4, #16]	@ float
  46:stm32-servomotor/servomotor.c ****     servo_set_position(handler, 0);
 340              		.loc 1 46 0
 341 0016 1146     		mov	r1, r2
 342              	.LVL34:
 343 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 344              	.LVL35:
 345 001c 08B1     		cbz	r0, .L35
 346 001e 0120     		movs	r0, #1
  50:stm32-servomotor/servomotor.c **** 
 347              		.loc 1 50 0
 348 0020 10BD     		pop	{r4, pc}
 349              	.LVL36:
 350              	.L35:
  47:stm32-servomotor/servomotor.c **** 
 351              		.loc 1 47 0
 352 0022 0021     		movs	r1, #0
 353 0024 2046     		mov	r0, r4
 354 0026 FFF7FEFF 		bl	servo_set_position
 355              	.LVL37:
  49:stm32-servomotor/servomotor.c **** }
 356              		.loc 1 49 0
 357 002a 0020     		movs	r0, #0
 358 002c 10BD     		pop	{r4, pc}
 359              	.LVL38:
 360              	.L29:
 361              	.LCFI4:
 362              		.cfi_def_cfa_offset 0
 363              		.cfi_restore 4
 364              		.cfi_restore 14
  38:stm32-servomotor/servomotor.c **** 
 365              		.loc 1 38 0
 366 002e 0120     		movs	r0, #1
 367              	.LVL39:
 368 0030 7047     		bx	lr
 369              	.L37:
 370 0032 00BF     		.align	2
 371              	.L36:
 372 0034 00002A43 		.word	1126825984
 373              		.cfi_endproc
 374              	.LFE65:
 376              		.global	__aeabi_fcmpge
 377              		.global	__aeabi_fsub
 378              		.section	.text.servo_sweep,"ax",%progbits
ARM GAS  /tmp/cc89pEOF.s 			page 10


 379              		.align	1
 380              		.global	servo_sweep
 381              		.syntax unified
 382              		.thumb
 383              		.thumb_func
 384              		.fpu softvfp
 386              	servo_sweep:
 387              	.LFB70:
 131:stm32-servomotor/servomotor.c ****     }
 132:stm32-servomotor/servomotor.c **** }
 133:stm32-servomotor/servomotor.c **** 
 134:stm32-servomotor/servomotor.c **** void servo_sweep(servo_t *handler, float start_angle_deg, float end_angle_deg, float step, uint32_t
 135:stm32-servomotor/servomotor.c **** {
 388              		.loc 1 135 0
 389              		.cfi_startproc
 390              		@ args = 4, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              	.LVL40:
 393 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 394              	.LCFI5:
 395              		.cfi_def_cfa_offset 32
 396              		.cfi_offset 3, -32
 397              		.cfi_offset 4, -28
 398              		.cfi_offset 5, -24
 399              		.cfi_offset 6, -20
 400              		.cfi_offset 7, -16
 401              		.cfi_offset 8, -12
 402              		.cfi_offset 9, -8
 403              		.cfi_offset 14, -4
 404 0004 089F     		ldr	r7, [sp, #32]
 136:stm32-servomotor/servomotor.c ****     if(handler == NULL || start_angle_deg >= end_angle_deg || step < 1) return;
 405              		.loc 1 136 0
 406 0006 0028     		cmp	r0, #0
 407 0008 48D0     		beq	.L38
 408 000a 8146     		mov	r9, r0
 409 000c 9846     		mov	r8, r3
 410 000e 1646     		mov	r6, r2
 411 0010 0D46     		mov	r5, r1
 412              		.loc 1 136 0 is_stmt 0 discriminator 1
 413 0012 1146     		mov	r1, r2
 414              	.LVL41:
 415 0014 2846     		mov	r0, r5
 416              	.LVL42:
 417 0016 FFF7FEFF 		bl	__aeabi_fcmpge
 418              	.LVL43:
 419 001a 0028     		cmp	r0, #0
 420 001c 3ED1     		bne	.L38
 421              		.loc 1 136 0 discriminator 2
 422 001e 4FF07E51 		mov	r1, #1065353216
 423 0022 4046     		mov	r0, r8
 424 0024 FFF7FEFF 		bl	__aeabi_fcmplt
 425              	.LVL44:
 426 0028 0028     		cmp	r0, #0
 427 002a 37D1     		bne	.L38
 428 002c 2C46     		mov	r4, r5
 429 002e 00E0     		b	.L40
 430              	.LVL45:
ARM GAS  /tmp/cc89pEOF.s 			page 11


 431              	.L41:
 137:stm32-servomotor/servomotor.c **** 
 138:stm32-servomotor/servomotor.c ****     float i = start_angle_deg;
 139:stm32-servomotor/servomotor.c **** 
 140:stm32-servomotor/servomotor.c ****     while (i < end_angle_deg)
 141:stm32-servomotor/servomotor.c ****     {
 142:stm32-servomotor/servomotor.c ****         servo_set_position(handler, i);
 143:stm32-servomotor/servomotor.c ****         i += step;
 144:stm32-servomotor/servomotor.c ****         i = (i > end_angle_deg ? end_angle_deg : i);
 145:stm32-servomotor/servomotor.c ****         if(step_delay_ms > 0) HAL_Delay(step_delay_ms);
 432              		.loc 1 145 0 is_stmt 1 discriminator 4
 433 0030 AFB9     		cbnz	r7, .L53
 434              	.LVL46:
 435              	.L40:
 140:stm32-servomotor/servomotor.c ****     {
 436              		.loc 1 140 0
 437 0032 3146     		mov	r1, r6
 438 0034 2046     		mov	r0, r4
 439 0036 FFF7FEFF 		bl	__aeabi_fcmplt
 440              	.LVL47:
 441 003a A8B1     		cbz	r0, .L45
 142:stm32-servomotor/servomotor.c ****         i += step;
 442              		.loc 1 142 0
 443 003c 2146     		mov	r1, r4
 444 003e 4846     		mov	r0, r9
 445 0040 FFF7FEFF 		bl	servo_set_position
 446              	.LVL48:
 143:stm32-servomotor/servomotor.c ****         i = (i > end_angle_deg ? end_angle_deg : i);
 447              		.loc 1 143 0
 448 0044 4146     		mov	r1, r8
 449 0046 2046     		mov	r0, r4
 450 0048 FFF7FEFF 		bl	__aeabi_fadd
 451              	.LVL49:
 452 004c 0446     		mov	r4, r0
 453              	.LVL50:
 144:stm32-servomotor/servomotor.c ****         if(step_delay_ms > 0) HAL_Delay(step_delay_ms);
 454              		.loc 1 144 0
 455 004e 0146     		mov	r1, r0
 456 0050 3046     		mov	r0, r6
 457              	.LVL51:
 458 0052 FFF7FEFF 		bl	__aeabi_fcmplt
 459              	.LVL52:
 460 0056 0028     		cmp	r0, #0
 461 0058 EAD0     		beq	.L41
 462 005a 3446     		mov	r4, r6
 463              	.LVL53:
 464 005c E8E7     		b	.L41
 465              	.LVL54:
 466              	.L53:
 467              		.loc 1 145 0 discriminator 1
 468 005e 3846     		mov	r0, r7
 469 0060 FFF7FEFF 		bl	HAL_Delay
 470              	.LVL55:
 471 0064 E5E7     		b	.L40
 472              	.LVL56:
 473              	.L46:
 146:stm32-servomotor/servomotor.c ****     }
ARM GAS  /tmp/cc89pEOF.s 			page 12


 147:stm32-servomotor/servomotor.c **** 
 148:stm32-servomotor/servomotor.c ****     while (i > start_angle_deg)
 149:stm32-servomotor/servomotor.c ****     {
 150:stm32-servomotor/servomotor.c ****         servo_set_position(handler, i);
 151:stm32-servomotor/servomotor.c ****         i -= step;
 152:stm32-servomotor/servomotor.c ****         i = (i < start_angle_deg ? start_angle_deg : i);
 153:stm32-servomotor/servomotor.c ****         if(step_delay_ms > 0) HAL_Delay(step_delay_ms);
 474              		.loc 1 153 0 discriminator 4
 475 0066 AFB9     		cbnz	r7, .L54
 476              	.L45:
 148:stm32-servomotor/servomotor.c ****     {
 477              		.loc 1 148 0
 478 0068 2946     		mov	r1, r5
 479 006a 2046     		mov	r0, r4
 480 006c FFF7FEFF 		bl	__aeabi_fcmpgt
 481              	.LVL57:
 482 0070 A0B1     		cbz	r0, .L38
 150:stm32-servomotor/servomotor.c ****         i -= step;
 483              		.loc 1 150 0
 484 0072 2146     		mov	r1, r4
 485 0074 4846     		mov	r0, r9
 486 0076 FFF7FEFF 		bl	servo_set_position
 487              	.LVL58:
 151:stm32-servomotor/servomotor.c ****         i = (i < start_angle_deg ? start_angle_deg : i);
 488              		.loc 1 151 0
 489 007a 4146     		mov	r1, r8
 490 007c 2046     		mov	r0, r4
 491 007e FFF7FEFF 		bl	__aeabi_fsub
 492              	.LVL59:
 493 0082 0446     		mov	r4, r0
 494              	.LVL60:
 152:stm32-servomotor/servomotor.c ****         if(step_delay_ms > 0) HAL_Delay(step_delay_ms);
 495              		.loc 1 152 0
 496 0084 0146     		mov	r1, r0
 497 0086 2846     		mov	r0, r5
 498              	.LVL61:
 499 0088 FFF7FEFF 		bl	__aeabi_fcmpgt
 500              	.LVL62:
 501 008c 0028     		cmp	r0, #0
 502 008e EAD0     		beq	.L46
 503 0090 2C46     		mov	r4, r5
 504              	.LVL63:
 505 0092 E8E7     		b	.L46
 506              	.LVL64:
 507              	.L54:
 508              		.loc 1 153 0 discriminator 1
 509 0094 3846     		mov	r0, r7
 510 0096 FFF7FEFF 		bl	HAL_Delay
 511              	.LVL65:
 512 009a E5E7     		b	.L45
 513              	.LVL66:
 514              	.L38:
 515 009c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 516              		.cfi_endproc
 517              	.LFE70:
 519              		.text
 520              	.Letext0:
ARM GAS  /tmp/cc89pEOF.s 			page 13


 521              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 522              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 523              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 524              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 525              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 526              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 527              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 528              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 529              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 530              		.file 11 "stm32-servomotor/servomotor.h"
ARM GAS  /tmp/cc89pEOF.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 servomotor.c
     /tmp/cc89pEOF.s:16     .text.servo_set_limit:0000000000000000 $t
     /tmp/cc89pEOF.s:23     .text.servo_set_limit:0000000000000000 servo_set_limit
     /tmp/cc89pEOF.s:44     .text.servo_set_offset:0000000000000000 $t
     /tmp/cc89pEOF.s:51     .text.servo_set_offset:0000000000000000 servo_set_offset
     /tmp/cc89pEOF.s:73     .text.servo_duty_ms:0000000000000000 $t
     /tmp/cc89pEOF.s:80     .text.servo_duty_ms:0000000000000000 servo_duty_ms
     /tmp/cc89pEOF.s:110    .text.servo_duty_ms:000000000000001c $d
     /tmp/cc89pEOF.s:124    .text.servo_set_position:0000000000000000 $t
     /tmp/cc89pEOF.s:131    .text.servo_set_position:0000000000000000 servo_set_position
     /tmp/cc89pEOF.s:224    .text.servo_set_position:0000000000000070 $d
     /tmp/cc89pEOF.s:298    .text.servo_set_position:00000000000000ac $d
     /tmp/cc89pEOF.s:303    .text.servo_init:0000000000000000 $t
     /tmp/cc89pEOF.s:310    .text.servo_init:0000000000000000 servo_init
     /tmp/cc89pEOF.s:372    .text.servo_init:0000000000000034 $d
     /tmp/cc89pEOF.s:379    .text.servo_sweep:0000000000000000 $t
     /tmp/cc89pEOF.s:386    .text.servo_sweep:0000000000000000 servo_sweep
                     .debug_frame:0000000000000010 $d
     /tmp/cc89pEOF.s:238    .text.servo_set_position:000000000000007d $d
     /tmp/cc89pEOF.s:238    .text.servo_set_position:000000000000007e $t

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_ddiv
__aeabi_dadd
__aeabi_d2f
__aeabi_fadd
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_ui2f
__aeabi_fmul
__aeabi_fdiv
__aeabi_f2iz
__aeabi_f2uiz
HAL_TIM_PWM_Start
__aeabi_fcmpge
__aeabi_fsub
HAL_Delay

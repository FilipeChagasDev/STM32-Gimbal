ARM GAS  /tmp/ccTzhkRm.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB266:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdio.h>
  27:Src/main.c    **** #include <string.h>
  28:Src/main.c    **** #include <math.h>
  29:Src/main.c    **** #include <float.h>
  30:Src/main.c    **** #include <servomotor.h>
  31:Src/main.c    **** #include <mpu6050.h>
  32:Src/main.c    **** #include <moving_average.h>
  33:Src/main.c    **** #include <float_to_string.h>
  34:Src/main.c    **** //#include <stm32f103x6.h>
ARM GAS  /tmp/ccTzhkRm.s 			page 2


  35:Src/main.c    **** /* USER CODE END Includes */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* USER CODE END PTD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** #define DEFAULT_SMOOTHING 20
  46:Src/main.c    **** #define DEFAULT_FACTOR 1.4
  47:Src/main.c    **** #define ROUND_ANGLE_PACK
  48:Src/main.c    **** 
  49:Src/main.c    **** #define ROLL_COMPENSATION_FACTOR 1
  50:Src/main.c    **** #define PITCH_COMPENSATION_FACTOR -1
  51:Src/main.c    **** #define ROLL_SERVO_OFFSET 90
  52:Src/main.c    **** #define PITCH_SERVO_OFFSET 60
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE END PD */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  57:Src/main.c    **** /* USER CODE BEGIN PM */
  58:Src/main.c    **** /* USER CODE END PM */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** I2C_HandleTypeDef hi2c2;
  62:Src/main.c    **** 
  63:Src/main.c    **** RTC_HandleTypeDef hrtc;
  64:Src/main.c    **** 
  65:Src/main.c    **** TIM_HandleTypeDef htim2;
  66:Src/main.c    **** TIM_HandleTypeDef htim3;
  67:Src/main.c    **** TIM_HandleTypeDef htim4;
  68:Src/main.c    **** 
  69:Src/main.c    **** UART_HandleTypeDef huart1;
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN PV */
  72:Src/main.c    **** SD_MPU6050 position_sensor;
  73:Src/main.c    **** 
  74:Src/main.c    **** float sensor_roll, sensor_pitch, sensor_factor;
  75:Src/main.c    **** float roll_compensation, pitch_compensation;
  76:Src/main.c    **** size_t smoothing;
  77:Src/main.c    **** 
  78:Src/main.c    **** servo_t servo_roll;
  79:Src/main.c    **** servo_t servo_pitch;
  80:Src/main.c    **** 
  81:Src/main.c    **** #define SERVO_ROLL_CHANNEL TIM_CHANNEL_1
  82:Src/main.c    **** #define SERVO_PITCH_CHANNEL TIM_CHANNEL_2
  83:Src/main.c    **** 
  84:Src/main.c    **** maf_t roll_filter;
  85:Src/main.c    **** maf_t pitch_filter;
  86:Src/main.c    **** 
  87:Src/main.c    **** /* USER CODE END PV */
  88:Src/main.c    **** 
  89:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  90:Src/main.c    **** void SystemClock_Config(void);
  91:Src/main.c    **** static void MX_GPIO_Init(void);
ARM GAS  /tmp/ccTzhkRm.s 			page 3


  92:Src/main.c    **** static void MX_I2C2_Init(void);
  93:Src/main.c    **** static void MX_TIM2_Init(void);
  94:Src/main.c    **** static void MX_TIM3_Init(void);
  95:Src/main.c    **** static void MX_USART1_UART_Init(void);
  96:Src/main.c    **** static void MX_RTC_Init(void);
  97:Src/main.c    **** static void MX_TIM4_Init(void);
  98:Src/main.c    **** /* USER CODE BEGIN PFP */
  99:Src/main.c    **** 
 100:Src/main.c    **** /* USER CODE END PFP */
 101:Src/main.c    **** 
 102:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 103:Src/main.c    **** /* USER CODE BEGIN 0 */
 104:Src/main.c    **** 
 105:Src/main.c    **** /* -- System -- */
 106:Src/main.c    **** void init_system()
 107:Src/main.c    **** {
 108:Src/main.c    ****     smoothing = DEFAULT_SMOOTHING;
 109:Src/main.c    ****     if(init_maf(&roll_filter, smoothing) == 0) error_alert("Cannot init MAF");
 110:Src/main.c    ****     if(init_maf(&pitch_filter, smoothing) == 0) error_alert("Cannot init MAF");
 111:Src/main.c    **** 
 112:Src/main.c    ****     init_position_sensor();
 113:Src/main.c    ****     init_servomotors();
 114:Src/main.c    ****     init_uart_messaging();
 115:Src/main.c    ****     init_servomotors_motion();
 116:Src/main.c    **** }
 117:Src/main.c    **** 
 118:Src/main.c    **** void error_alert(char *msg)
 119:Src/main.c    **** {
 120:Src/main.c    ****     char str[100];
 121:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM2_IRQn);
 122:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM3_IRQn);
 123:Src/main.c    **** 
 124:Src/main.c    ****     HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET); //blink error led
 125:Src/main.c    ****     
 126:Src/main.c    ****     sprintf(str, "{\"type\":\"error\",\"text\":\"%s\"}\n\r", msg);
 127:Src/main.c    ****     HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 128:Src/main.c    ****     
 129:Src/main.c    ****     HAL_Delay(500);
 130:Src/main.c    **** 
 131:Src/main.c    ****     HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 132:Src/main.c    ****     
 133:Src/main.c    ****     HAL_NVIC_SystemReset(); //reset microcontroller
 134:Src/main.c    **** }
 135:Src/main.c    **** 
 136:Src/main.c    **** /* -- Servomotors -- */
 137:Src/main.c    **** void init_servomotors()
 138:Src/main.c    **** {
 139:Src/main.c    ****     servo_status_t r;
 140:Src/main.c    ****     
 141:Src/main.c    ****     r = servo_init(&servo_roll, &htim3, TIM_CHANNEL_1);
 142:Src/main.c    ****     if(r != SERVO_STATUS_OK) error_alert("Cannot init servo_roll");
 143:Src/main.c    **** 
 144:Src/main.c    ****     r = servo_init(&servo_pitch, &htim3, TIM_CHANNEL_2);
 145:Src/main.c    ****     if(r != SERVO_STATUS_OK) error_alert("Cannot init servo_pitch");
 146:Src/main.c    **** 
 147:Src/main.c    ****     servo_set_offset(&servo_roll, ROLL_SERVO_OFFSET);
 148:Src/main.c    ****     servo_set_offset(&servo_pitch, PITCH_SERVO_OFFSET);
ARM GAS  /tmp/ccTzhkRm.s 			page 4


 149:Src/main.c    **** }
 150:Src/main.c    **** 
 151:Src/main.c    **** void init_servomotors_motion()
 152:Src/main.c    **** {
 153:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 154:Src/main.c    **** }
 155:Src/main.c    **** 
 156:Src/main.c    **** void servo_update()
 157:Src/main.c    **** {
 158:Src/main.c    ****     servo_set_position(&servo_roll, roll_compensation);
 159:Src/main.c    ****     servo_set_position(&servo_pitch, pitch_compensation);
 160:Src/main.c    **** }
 161:Src/main.c    **** 
 162:Src/main.c    **** /* -- Sensors -- */
 163:Src/main.c    **** void init_position_sensor()
 164:Src/main.c    **** {
 165:Src/main.c    ****     sensor_roll = 0;
 166:Src/main.c    ****     sensor_pitch = 0;
 167:Src/main.c    ****     sensor_factor = DEFAULT_FACTOR;
 168:Src/main.c    **** 
 169:Src/main.c    ****     HAL_Delay(500);
 170:Src/main.c    ****     
 171:Src/main.c    ****     SD_MPU6050_Result r;
 172:Src/main.c    ****     r = SD_MPU6050_Init(&hi2c2, &position_sensor, SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_2G,
 173:Src/main.c    ****     
 174:Src/main.c    ****     if(r != SD_MPU6050_Result_Ok)
 175:Src/main.c    ****     {
 176:Src/main.c    ****         error_alert("Cannot init MPU6050");
 177:Src/main.c    ****     }
 178:Src/main.c    ****     
 179:Src/main.c    ****     sensor_calc_position(&sensor_pitch, &sensor_roll);
 180:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim4);
 181:Src/main.c    **** }
 182:Src/main.c    **** 
 183:Src/main.c    **** #define MPU6050_I2C_ADDR	0xD0
 184:Src/main.c    **** #define MPU6050_I_AM	0x68
 185:Src/main.c    **** #define MPU6050_WHO_AM_I 0x75
 186:Src/main.c    **** 
 187:Src/main.c    **** /**
 188:Src/main.c    ****  * @brief Test the connection with the MPU6050 sensor. For bad connection, reset the MCU.
 189:Src/main.c    ****  */
 190:Src/main.c    **** void test_sensor()
 191:Src/main.c    **** {
 192:Src/main.c    ****     uint8_t temp;
 193:Src/main.c    ****     uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 194:Src/main.c    ****     SD_MPU6050_Result r;
 195:Src/main.c    **** 
 196:Src/main.c    ****     /* Check who am I */
 197:Src/main.c    **** 	  //------------------
 198:Src/main.c    **** 		/* Send address */
 199:Src/main.c    **** 		if(HAL_I2C_Master_Transmit(&hi2c2, MPU6050_I2C_ADDR, &WHO_AM_I, 1, 1000) != HAL_OK)
 200:Src/main.c    **** 		{
 201:Src/main.c    ****         error_alert("MPU6050 connection fail");
 202:Src/main.c    **** 		}
 203:Src/main.c    **** 
 204:Src/main.c    **** 		/* Receive multiple byte */
 205:Src/main.c    **** 		if(HAL_I2C_Master_Receive(&hi2c2, MPU6050_I2C_ADDR, &temp, 1, 1000) != HAL_OK)
ARM GAS  /tmp/ccTzhkRm.s 			page 5


 206:Src/main.c    **** 		{
 207:Src/main.c    ****         error_alert("MPU6050 connection fail");
 208:Src/main.c    **** 		}
 209:Src/main.c    **** 
 210:Src/main.c    **** 		/* Checking */
 211:Src/main.c    **** 		if(temp != MPU6050_I_AM)
 212:Src/main.c    **** 		{
 213:Src/main.c    **** 				error_alert("MPU6050 connection fail");
 214:Src/main.c    **** 		}
 215:Src/main.c    **** 	  //------------------
 216:Src/main.c    **** }
 217:Src/main.c    **** 
 218:Src/main.c    **** 
 219:Src/main.c    **** /**
 220:Src/main.c    ****  * @brief Update position and compensation informations
 221:Src/main.c    ****  */
 222:Src/main.c    **** void update_position_sensor()
 223:Src/main.c    **** {
 224:Src/main.c    ****     HAL_GPIO_WritePin(UPDATE_LED_GPIO_Port, UPDATE_LED_Pin, GPIO_PIN_SET);
 225:Src/main.c    ****     
 226:Src/main.c    ****     test_sensor();
 227:Src/main.c    ****     SD_MPU6050_Result r;
 228:Src/main.c    ****     r = SD_MPU6050_ReadAccelerometer(&hi2c2, &position_sensor);
 229:Src/main.c    ****     if(r != SD_MPU6050_Result_Ok)
 230:Src/main.c    ****     {
 231:Src/main.c    ****         error_alert("Cannot read MPU6050 Read Acce");
 232:Src/main.c    ****     }
 233:Src/main.c    **** 
 234:Src/main.c    ****     sensor_calc_position(&sensor_pitch, &sensor_roll);
 235:Src/main.c    ****     roll_compensation = ROLL_COMPENSATION_FACTOR * maf_filter(&roll_filter, sensor_roll);
 236:Src/main.c    ****     pitch_compensation = PITCH_COMPENSATION_FACTOR * maf_filter(&pitch_filter, sensor_pitch);
 237:Src/main.c    **** 
 238:Src/main.c    ****     HAL_GPIO_WritePin(UPDATE_LED_GPIO_Port, UPDATE_LED_Pin, GPIO_PIN_RESET);
 239:Src/main.c    **** }
 240:Src/main.c    **** 
 241:Src/main.c    **** 
 242:Src/main.c    **** #define SQUARE(v) ((v)*(v))
 243:Src/main.c    **** void sensor_calc_position(float *pitch, float *roll)
 244:Src/main.c    **** {
 245:Src/main.c    ****     *pitch = 180 * atan (position_sensor.Accelerometer_X/sqrt(SQUARE(position_sensor.Accelerometer_
 246:Src/main.c    ****     *roll = 180 * atan (position_sensor.Accelerometer_Y/sqrt(SQUARE(position_sensor.Accelerometer_X
 247:Src/main.c    ****     *pitch *= sensor_factor;
 248:Src/main.c    ****     *roll *= sensor_factor;
 249:Src/main.c    **** }
 250:Src/main.c    **** 
 251:Src/main.c    **** /* --- Smoothing -- */
 252:Src/main.c    **** 
 253:Src/main.c    **** /**
 254:Src/main.c    ****  * @brief Reset MAF with a new buffer length
 255:Src/main.c    ****  */
 256:Src/main.c    **** void change_smoothing(size_t value)
 257:Src/main.c    **** {
 258:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM3_IRQn);
 259:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM4_IRQn);
 260:Src/main.c    ****     
 261:Src/main.c    ****     servo_set_position(&servo_roll, 0);
 262:Src/main.c    ****     servo_set_position(&servo_pitch, 0);
ARM GAS  /tmp/ccTzhkRm.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****     smoothing = value;
 265:Src/main.c    ****     
 266:Src/main.c    ****     delete_maf(&roll_filter);
 267:Src/main.c    ****     delete_maf(&pitch_filter);
 268:Src/main.c    **** 
 269:Src/main.c    ****     init_maf(&roll_filter, smoothing);
 270:Src/main.c    ****     init_maf(&pitch_filter, smoothing);
 271:Src/main.c    ****     
 272:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 273:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 274:Src/main.c    **** }
 275:Src/main.c    **** 
 276:Src/main.c    **** /* -- UART messaging -- */
 277:Src/main.c    **** 
 278:Src/main.c    **** /**
 279:Src/main.c    ****  * @brief Send position & compensation infos to TTL
 280:Src/main.c    ****  */
 281:Src/main.c    **** void uart_message_update()
 282:Src/main.c    **** {
 283:Src/main.c    ****     send_angle_pack(SENSOR_ANGLE_PACK, sensor_pitch, sensor_roll);
 284:Src/main.c    ****     send_angle_pack(SERVO_ANGLE_PACK, pitch_compensation, roll_compensation);
 285:Src/main.c    **** }
 286:Src/main.c    **** 
 287:Src/main.c    **** /**
 288:Src/main.c    ****  * @brief Initialize messaging timer interruptions
 289:Src/main.c    ****  */
 290:Src/main.c    **** void init_uart_messaging()
 291:Src/main.c    **** {
 292:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 293:Src/main.c    **** }
 294:Src/main.c    **** 
 295:Src/main.c    **** void send_value_pack(value_pack_target_t target, float value)
 296:Src/main.c    **** {
 297:Src/main.c    ****     char value_pack_str[100];
 298:Src/main.c    ****     char value_str[10];
 299:Src/main.c    ****     float_to_string(value, value_str);
 300:Src/main.c    **** 
 301:Src/main.c    ****     if(target == SMOOTHING_VALUE_PACK)
 302:Src/main.c    ****     {
 303:Src/main.c    ****         sprintf(value_pack_str, "{\"type\":\"value\", \"target\",\"smoothing\", \"value\":%s}\n", v
 304:Src/main.c    ****     }
 305:Src/main.c    ****     else //FACTOR_VALUE_PACK
 306:Src/main.c    ****     {
 307:Src/main.c    ****         sprintf(value_pack_str, "{\"type\":\"value\", \"target\",\"factor\", \"value\":%s}\n", valu
 308:Src/main.c    ****     }
 309:Src/main.c    **** }
 310:Src/main.c    **** 
 311:Src/main.c    **** void send_angle_pack(angle_pack_target_t target, float pitch, float roll)
 312:Src/main.c    **** {
 313:Src/main.c    ****     char angle_pack_str[100];
 314:Src/main.c    **** 
 315:Src/main.c    **** #ifdef ROUND_ANGLE_PACK
 316:Src/main.c    ****     if(target == SENSOR_ANGLE_PACK)
 317:Src/main.c    ****     {
 318:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d, \"target\":\"sensor\
 319:Src/main.c    ****     }
ARM GAS  /tmp/ccTzhkRm.s 			page 7


 320:Src/main.c    ****     else //SERVO_ANGLE_PACK
 321:Src/main.c    ****     {
 322:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d, \"target\":\"servo\"
 323:Src/main.c    ****     }
 324:Src/main.c    ****     
 325:Src/main.c    **** #else
 326:Src/main.c    ****     char roll_str[20], pitch_str[20];
 327:Src/main.c    **** 
 328:Src/main.c    ****     float_to_string(roll, roll_str);
 329:Src/main.c    ****     float_to_string(pitch, pitch_str);
 330:Src/main.c    ****     
 331:Src/main.c    ****     if(target == SENSOR_ANGLE_PACK)
 332:Src/main.c    ****     {
 333:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%s,\"roll\":%s, \"target\":\"sensor\
 334:Src/main.c    ****     }
 335:Src/main.c    ****     else if(target == OFFSET_ANGLE_PACK)
 336:Src/main.c    ****     {
 337:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%s,\"roll\":%s, \"target\":\"offset\
 338:Src/main.c    ****     }
 339:Src/main.c    ****     else //SERVO_ANGLE_PACK
 340:Src/main.c    ****     {
 341:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%s,\"roll\":%s, \"target\":\"servo\"
 342:Src/main.c    ****     }
 343:Src/main.c    **** #endif
 344:Src/main.c    **** 
 345:Src/main.c    ****     HAL_UART_Transmit(&huart1, angle_pack_str, strlen(angle_pack_str), 100);
 346:Src/main.c    **** }
 347:Src/main.c    **** 
 348:Src/main.c    **** void send_echo_pack(char *msg)
 349:Src/main.c    **** {
 350:Src/main.c    ****     char echo_pack_str[100];
 351:Src/main.c    ****     sprintf(echo_pack_str, "{\"type\":\"echo\",\"text\":\"%s\"}\n", msg);
 352:Src/main.c    ****     HAL_UART_Transmit(&huart1, echo_pack_str, strlen(echo_pack_str), 100);
 353:Src/main.c    **** }
 354:Src/main.c    **** 
 355:Src/main.c    **** void send_message_pack(char *msg)
 356:Src/main.c    **** {
 357:Src/main.c    ****     char message_pack_str[100];
 358:Src/main.c    ****     sprintf(message_pack_str, "{\"type\":\"message\",\"text\":\"%s\"}\n", msg);
 359:Src/main.c    ****     HAL_UART_Transmit(&huart1, message_pack_str, strlen(message_pack_str), 100);
 360:Src/main.c    **** }
 361:Src/main.c    **** 
 362:Src/main.c    **** /* USER CODE END 0 */
 363:Src/main.c    **** 
 364:Src/main.c    **** /**
 365:Src/main.c    ****   * @brief  The application entry point.
 366:Src/main.c    ****   * @retval int
 367:Src/main.c    ****   */
 368:Src/main.c    **** int main(void)
 369:Src/main.c    **** {
 370:Src/main.c    ****   /* USER CODE BEGIN 1 */
 371:Src/main.c    **** 
 372:Src/main.c    ****   /* USER CODE END 1 */
 373:Src/main.c    ****   
 374:Src/main.c    **** 
 375:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 376:Src/main.c    **** 
ARM GAS  /tmp/ccTzhkRm.s 			page 8


 377:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 378:Src/main.c    ****   HAL_Init();
 379:Src/main.c    **** 
 380:Src/main.c    ****   /* USER CODE BEGIN Init */
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* USER CODE END Init */
 383:Src/main.c    **** 
 384:Src/main.c    ****   /* Configure the system clock */
 385:Src/main.c    ****   SystemClock_Config();
 386:Src/main.c    **** 
 387:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 388:Src/main.c    **** 
 389:Src/main.c    ****   /* USER CODE END SysInit */
 390:Src/main.c    **** 
 391:Src/main.c    ****   /* Initialize all configured peripherals */
 392:Src/main.c    ****   MX_GPIO_Init();
 393:Src/main.c    ****   MX_I2C2_Init();
 394:Src/main.c    ****   MX_TIM2_Init();
 395:Src/main.c    ****   MX_TIM3_Init();
 396:Src/main.c    ****   MX_USART1_UART_Init();
 397:Src/main.c    ****   MX_RTC_Init();
 398:Src/main.c    ****   MX_TIM4_Init();
 399:Src/main.c    ****   /* USER CODE BEGIN 2 */
 400:Src/main.c    **** 
 401:Src/main.c    ****   init_system();
 402:Src/main.c    **** 
 403:Src/main.c    ****   /* USER CODE END 2 */
 404:Src/main.c    **** 
 405:Src/main.c    ****   /* Infinite loop */
 406:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 407:Src/main.c    ****   while (1)
 408:Src/main.c    ****   {
 409:Src/main.c    ****     /* USER CODE END WHILE */
 410:Src/main.c    ****     asm volatile ("WFI");
 411:Src/main.c    ****     /* USER CODE BEGIN 3 */
 412:Src/main.c    ****   }
 413:Src/main.c    ****   /* USER CODE END 3 */
 414:Src/main.c    **** }
 415:Src/main.c    **** 
 416:Src/main.c    **** /**
 417:Src/main.c    ****   * @brief System Clock Configuration
 418:Src/main.c    ****   * @retval None
 419:Src/main.c    ****   */
 420:Src/main.c    **** void SystemClock_Config(void)
 421:Src/main.c    **** {
 422:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 423:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 424:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 425:Src/main.c    **** 
 426:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 427:Src/main.c    ****   */
 428:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 429:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 430:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 431:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 432:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 433:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
ARM GAS  /tmp/ccTzhkRm.s 			page 9


 434:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 435:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 436:Src/main.c    ****   {
 437:Src/main.c    ****     Error_Handler();
 438:Src/main.c    ****   }
 439:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 440:Src/main.c    ****   */
 441:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 442:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 443:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 444:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 445:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 446:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 447:Src/main.c    **** 
 448:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 449:Src/main.c    ****   {
 450:Src/main.c    ****     Error_Handler();
 451:Src/main.c    ****   }
 452:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 453:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 454:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 455:Src/main.c    ****   {
 456:Src/main.c    ****     Error_Handler();
 457:Src/main.c    ****   }
 458:Src/main.c    **** }
 459:Src/main.c    **** 
 460:Src/main.c    **** /**
 461:Src/main.c    ****   * @brief I2C2 Initialization Function
 462:Src/main.c    ****   * @param None
 463:Src/main.c    ****   * @retval None
 464:Src/main.c    ****   */
 465:Src/main.c    **** static void MX_I2C2_Init(void)
 466:Src/main.c    **** {
 467:Src/main.c    **** 
 468:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 0 */
 469:Src/main.c    **** 
 470:Src/main.c    ****   /* USER CODE END I2C2_Init 0 */
 471:Src/main.c    **** 
 472:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 1 */
 473:Src/main.c    **** 
 474:Src/main.c    ****   /* USER CODE END I2C2_Init 1 */
 475:Src/main.c    ****   hi2c2.Instance = I2C2;
 476:Src/main.c    ****   hi2c2.Init.ClockSpeed = 400000;
 477:Src/main.c    ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 478:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 479:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 480:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 481:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 482:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 483:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 484:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 485:Src/main.c    ****   {
 486:Src/main.c    ****     Error_Handler();
 487:Src/main.c    ****   }
 488:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 2 */
 489:Src/main.c    **** 
 490:Src/main.c    ****   /* USER CODE END I2C2_Init 2 */
ARM GAS  /tmp/ccTzhkRm.s 			page 10


 491:Src/main.c    **** 
 492:Src/main.c    **** }
 493:Src/main.c    **** 
 494:Src/main.c    **** /**
 495:Src/main.c    ****   * @brief RTC Initialization Function
 496:Src/main.c    ****   * @param None
 497:Src/main.c    ****   * @retval None
 498:Src/main.c    ****   */
 499:Src/main.c    **** static void MX_RTC_Init(void)
 500:Src/main.c    **** {
 501:Src/main.c    **** 
 502:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 0 */
 503:Src/main.c    **** 
 504:Src/main.c    ****   /* USER CODE END RTC_Init 0 */
 505:Src/main.c    **** 
 506:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 1 */
 507:Src/main.c    **** 
 508:Src/main.c    ****   /* USER CODE END RTC_Init 1 */
 509:Src/main.c    ****   /** Initialize RTC Only 
 510:Src/main.c    ****   */
 511:Src/main.c    ****   hrtc.Instance = RTC;
 512:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 513:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 514:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 515:Src/main.c    ****   {
 516:Src/main.c    ****     Error_Handler();
 517:Src/main.c    ****   }
 518:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 2 */
 519:Src/main.c    **** 
 520:Src/main.c    ****   /* USER CODE END RTC_Init 2 */
 521:Src/main.c    **** 
 522:Src/main.c    **** }
 523:Src/main.c    **** 
 524:Src/main.c    **** /**
 525:Src/main.c    ****   * @brief TIM2 Initialization Function
 526:Src/main.c    ****   * @param None
 527:Src/main.c    ****   * @retval None
 528:Src/main.c    ****   */
 529:Src/main.c    **** static void MX_TIM2_Init(void)
 530:Src/main.c    **** {
 531:Src/main.c    **** 
 532:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 533:Src/main.c    **** 
 534:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 535:Src/main.c    **** 
 536:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 537:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 538:Src/main.c    **** 
 539:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 540:Src/main.c    **** 
 541:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 542:Src/main.c    ****   htim2.Instance = TIM2;
 543:Src/main.c    ****   htim2.Init.Prescaler = 9000;
 544:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 545:Src/main.c    ****   htim2.Init.Period = 60;
 546:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 547:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/ccTzhkRm.s 			page 11


 548:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 549:Src/main.c    ****   {
 550:Src/main.c    ****     Error_Handler();
 551:Src/main.c    ****   }
 552:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 553:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 554:Src/main.c    ****   {
 555:Src/main.c    ****     Error_Handler();
 556:Src/main.c    ****   }
 557:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 558:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 559:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 560:Src/main.c    ****   {
 561:Src/main.c    ****     Error_Handler();
 562:Src/main.c    ****   }
 563:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 564:Src/main.c    **** 
 565:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 566:Src/main.c    **** 
 567:Src/main.c    **** }
 568:Src/main.c    **** 
 569:Src/main.c    **** /**
 570:Src/main.c    ****   * @brief TIM3 Initialization Function
 571:Src/main.c    ****   * @param None
 572:Src/main.c    ****   * @retval None
 573:Src/main.c    ****   */
 574:Src/main.c    **** static void MX_TIM3_Init(void)
 575:Src/main.c    **** {
 576:Src/main.c    **** 
 577:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 578:Src/main.c    **** 
 579:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 580:Src/main.c    **** 
 581:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 582:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 583:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 584:Src/main.c    **** 
 585:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 586:Src/main.c    **** 
 587:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 588:Src/main.c    ****   htim3.Instance = TIM3;
 589:Src/main.c    ****   htim3.Init.Prescaler = 16;
 590:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 591:Src/main.c    ****   htim3.Init.Period = 10000;
 592:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 593:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 594:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 595:Src/main.c    ****   {
 596:Src/main.c    ****     Error_Handler();
 597:Src/main.c    ****   }
 598:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 599:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 600:Src/main.c    ****   {
 601:Src/main.c    ****     Error_Handler();
 602:Src/main.c    ****   }
 603:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 604:Src/main.c    ****   {
ARM GAS  /tmp/ccTzhkRm.s 			page 12


 605:Src/main.c    ****     Error_Handler();
 606:Src/main.c    ****   }
 607:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 608:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 609:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 610:Src/main.c    ****   {
 611:Src/main.c    ****     Error_Handler();
 612:Src/main.c    ****   }
 613:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 614:Src/main.c    ****   sConfigOC.Pulse = 0;
 615:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 616:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 617:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 618:Src/main.c    ****   {
 619:Src/main.c    ****     Error_Handler();
 620:Src/main.c    ****   }
 621:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 622:Src/main.c    ****   {
 623:Src/main.c    ****     Error_Handler();
 624:Src/main.c    ****   }
 625:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 626:Src/main.c    ****   
 627:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 628:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 629:Src/main.c    **** 
 630:Src/main.c    **** }
 631:Src/main.c    **** 
 632:Src/main.c    **** /**
 633:Src/main.c    ****   * @brief TIM4 Initialization Function
 634:Src/main.c    ****   * @param None
 635:Src/main.c    ****   * @retval None
 636:Src/main.c    ****   */
 637:Src/main.c    **** static void MX_TIM4_Init(void)
 638:Src/main.c    **** {
 639:Src/main.c    **** 
 640:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 641:Src/main.c    **** 
 642:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 643:Src/main.c    **** 
 644:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 645:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 646:Src/main.c    **** 
 647:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 648:Src/main.c    **** 
 649:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 650:Src/main.c    ****   htim4.Instance = TIM4;
 651:Src/main.c    ****   htim4.Init.Prescaler = 8;
 652:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 653:Src/main.c    ****   htim4.Init.Period = 5000;
 654:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 655:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 656:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 657:Src/main.c    ****   {
 658:Src/main.c    ****     Error_Handler();
 659:Src/main.c    ****   }
 660:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 661:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
ARM GAS  /tmp/ccTzhkRm.s 			page 13


 662:Src/main.c    ****   {
 663:Src/main.c    ****     Error_Handler();
 664:Src/main.c    ****   }
 665:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 666:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 667:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 668:Src/main.c    ****   {
 669:Src/main.c    ****     Error_Handler();
 670:Src/main.c    ****   }
 671:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 672:Src/main.c    **** 
 673:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 674:Src/main.c    **** 
 675:Src/main.c    **** }
 676:Src/main.c    **** 
 677:Src/main.c    **** /**
 678:Src/main.c    ****   * @brief USART1 Initialization Function
 679:Src/main.c    ****   * @param None
 680:Src/main.c    ****   * @retval None
 681:Src/main.c    ****   */
 682:Src/main.c    **** static void MX_USART1_UART_Init(void)
 683:Src/main.c    **** {
 684:Src/main.c    **** 
 685:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 686:Src/main.c    **** 
 687:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 688:Src/main.c    **** 
 689:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 690:Src/main.c    **** 
 691:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 692:Src/main.c    ****   huart1.Instance = USART1;
 693:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 694:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 695:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 696:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 697:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 698:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 699:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 700:Src/main.c    ****   if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 701:Src/main.c    ****   {
 702:Src/main.c    ****     Error_Handler();
 703:Src/main.c    ****   }
 704:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 705:Src/main.c    **** 
 706:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 707:Src/main.c    **** 
 708:Src/main.c    **** }
 709:Src/main.c    **** 
 710:Src/main.c    **** /**
 711:Src/main.c    ****   * @brief GPIO Initialization Function
 712:Src/main.c    ****   * @param None
 713:Src/main.c    ****   * @retval None
 714:Src/main.c    ****   */
 715:Src/main.c    **** static void MX_GPIO_Init(void)
 716:Src/main.c    **** {
  25              		.loc 1 716 0
  26              		.cfi_startproc
ARM GAS  /tmp/ccTzhkRm.s 			page 14


  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 87B0     		sub	sp, sp, #28
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 40
 717:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 717 0
  39 0004 0024     		movs	r4, #0
  40 0006 0294     		str	r4, [sp, #8]
  41 0008 0394     		str	r4, [sp, #12]
  42 000a 0494     		str	r4, [sp, #16]
  43 000c 0594     		str	r4, [sp, #20]
  44              	.LBB2:
 718:Src/main.c    **** 
 719:Src/main.c    ****   /* GPIO Ports Clock Enable */
 720:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  45              		.loc 1 720 0
  46 000e 134B     		ldr	r3, .L3
  47 0010 9A69     		ldr	r2, [r3, #24]
  48 0012 42F00402 		orr	r2, r2, #4
  49 0016 9A61     		str	r2, [r3, #24]
  50 0018 9A69     		ldr	r2, [r3, #24]
  51 001a 02F00402 		and	r2, r2, #4
  52 001e 0092     		str	r2, [sp]
  53 0020 009A     		ldr	r2, [sp]
  54              	.LBE2:
  55              	.LBB3:
 721:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  56              		.loc 1 721 0
  57 0022 9A69     		ldr	r2, [r3, #24]
  58 0024 42F00802 		orr	r2, r2, #8
  59 0028 9A61     		str	r2, [r3, #24]
  60 002a 9B69     		ldr	r3, [r3, #24]
  61 002c 03F00803 		and	r3, r3, #8
  62 0030 0193     		str	r3, [sp, #4]
  63 0032 019B     		ldr	r3, [sp, #4]
  64              	.LBE3:
 722:Src/main.c    **** 
 723:Src/main.c    ****   /*Configure GPIO pin Output Level */
 724:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, UPDATE_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
  65              		.loc 1 724 0
  66 0034 0A4D     		ldr	r5, .L3+4
  67 0036 2246     		mov	r2, r4
  68 0038 0321     		movs	r1, #3
  69 003a 2846     		mov	r0, r5
  70 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
  71              	.LVL0:
 725:Src/main.c    **** 
 726:Src/main.c    ****   /*Configure GPIO pins : UPDATE_LED_Pin ERROR_LED_Pin */
 727:Src/main.c    ****   GPIO_InitStruct.Pin = UPDATE_LED_Pin|ERROR_LED_Pin;
  72              		.loc 1 727 0
ARM GAS  /tmp/ccTzhkRm.s 			page 15


  73 0040 0323     		movs	r3, #3
  74 0042 0293     		str	r3, [sp, #8]
 728:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 728 0
  76 0044 0123     		movs	r3, #1
  77 0046 0393     		str	r3, [sp, #12]
 729:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 729 0
  79 0048 0494     		str	r4, [sp, #16]
 730:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  80              		.loc 1 730 0
  81 004a 0223     		movs	r3, #2
  82 004c 0593     		str	r3, [sp, #20]
 731:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  83              		.loc 1 731 0
  84 004e 02A9     		add	r1, sp, #8
  85 0050 2846     		mov	r0, r5
  86 0052 FFF7FEFF 		bl	HAL_GPIO_Init
  87              	.LVL1:
 732:Src/main.c    **** 
 733:Src/main.c    **** }
  88              		.loc 1 733 0
  89 0056 07B0     		add	sp, sp, #28
  90              	.LCFI2:
  91              		.cfi_def_cfa_offset 12
  92              		@ sp needed
  93 0058 30BD     		pop	{r4, r5, pc}
  94              	.L4:
  95 005a 00BF     		.align	2
  96              	.L3:
  97 005c 00100240 		.word	1073876992
  98 0060 00080140 		.word	1073809408
  99              		.cfi_endproc
 100              	.LFE266:
 102              		.section	.text.error_alert,"ax",%progbits
 103              		.align	1
 104              		.global	error_alert
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu softvfp
 110              	error_alert:
 111              	.LFB243:
 119:Src/main.c    ****     char str[100];
 112              		.loc 1 119 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 104
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              	.LVL2:
 117 0000 30B5     		push	{r4, r5, lr}
 118              	.LCFI3:
 119              		.cfi_def_cfa_offset 12
 120              		.cfi_offset 4, -12
 121              		.cfi_offset 5, -8
 122              		.cfi_offset 14, -4
 123 0002 9BB0     		sub	sp, sp, #108
 124              	.LCFI4:
ARM GAS  /tmp/ccTzhkRm.s 			page 16


 125              		.cfi_def_cfa_offset 120
 126 0004 0546     		mov	r5, r0
 121:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM3_IRQn);
 127              		.loc 1 121 0
 128 0006 1C20     		movs	r0, #28
 129              	.LVL3:
 130 0008 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 131              	.LVL4:
 122:Src/main.c    **** 
 132              		.loc 1 122 0
 133 000c 1D20     		movs	r0, #29
 134 000e FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 135              	.LVL5:
 124:Src/main.c    ****     
 136              		.loc 1 124 0
 137 0012 104C     		ldr	r4, .L7
 138 0014 0122     		movs	r2, #1
 139 0016 0221     		movs	r1, #2
 140 0018 2046     		mov	r0, r4
 141 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 142              	.LVL6:
 126:Src/main.c    ****     HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 143              		.loc 1 126 0
 144 001e 2A46     		mov	r2, r5
 145 0020 0D49     		ldr	r1, .L7+4
 146 0022 01A8     		add	r0, sp, #4
 147 0024 FFF7FEFF 		bl	sprintf
 148              	.LVL7:
 127:Src/main.c    ****     
 149              		.loc 1 127 0
 150 0028 01A8     		add	r0, sp, #4
 151 002a FFF7FEFF 		bl	strlen
 152              	.LVL8:
 153 002e 6423     		movs	r3, #100
 154 0030 82B2     		uxth	r2, r0
 155 0032 01A9     		add	r1, sp, #4
 156 0034 0948     		ldr	r0, .L7+8
 157 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 158              	.LVL9:
 129:Src/main.c    **** 
 159              		.loc 1 129 0
 160 003a 4FF4FA70 		mov	r0, #500
 161 003e FFF7FEFF 		bl	HAL_Delay
 162              	.LVL10:
 131:Src/main.c    ****     
 163              		.loc 1 131 0
 164 0042 0022     		movs	r2, #0
 165 0044 0221     		movs	r1, #2
 166 0046 2046     		mov	r0, r4
 167 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 168              	.LVL11:
 133:Src/main.c    **** }
 169              		.loc 1 133 0
 170 004c FFF7FEFF 		bl	HAL_NVIC_SystemReset
 171              	.LVL12:
 134:Src/main.c    **** 
 172              		.loc 1 134 0
ARM GAS  /tmp/ccTzhkRm.s 			page 17


 173 0050 1BB0     		add	sp, sp, #108
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 12
 176              		@ sp needed
 177 0052 30BD     		pop	{r4, r5, pc}
 178              	.LVL13:
 179              	.L8:
 180              		.align	2
 181              	.L7:
 182 0054 00080140 		.word	1073809408
 183 0058 00000000 		.word	.LC0
 184 005c 00000000 		.word	huart1
 185              		.cfi_endproc
 186              	.LFE243:
 188              		.section	.text.init_servomotors,"ax",%progbits
 189              		.align	1
 190              		.global	init_servomotors
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 194              		.fpu softvfp
 196              	init_servomotors:
 197              	.LFB244:
 138:Src/main.c    ****     servo_status_t r;
 198              		.loc 1 138 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202 0000 08B5     		push	{r3, lr}
 203              	.LCFI6:
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 3, -8
 206              		.cfi_offset 14, -4
 141:Src/main.c    ****     if(r != SERVO_STATUS_OK) error_alert("Cannot init servo_roll");
 207              		.loc 1 141 0
 208 0002 0022     		movs	r2, #0
 209 0004 0D49     		ldr	r1, .L15
 210 0006 0E48     		ldr	r0, .L15+4
 211 0008 FFF7FEFF 		bl	servo_init
 212              	.LVL14:
 142:Src/main.c    **** 
 213              		.loc 1 142 0
 214 000c 70B9     		cbnz	r0, .L13
 215              	.LVL15:
 216              	.L10:
 144:Src/main.c    ****     if(r != SERVO_STATUS_OK) error_alert("Cannot init servo_pitch");
 217              		.loc 1 144 0
 218 000e 0422     		movs	r2, #4
 219 0010 0A49     		ldr	r1, .L15
 220 0012 0C48     		ldr	r0, .L15+8
 221 0014 FFF7FEFF 		bl	servo_init
 222              	.LVL16:
 145:Src/main.c    **** 
 223              		.loc 1 145 0
 224 0018 60B9     		cbnz	r0, .L14
 225              	.LVL17:
 226              	.L11:
ARM GAS  /tmp/ccTzhkRm.s 			page 18


 147:Src/main.c    ****     servo_set_offset(&servo_pitch, PITCH_SERVO_OFFSET);
 227              		.loc 1 147 0
 228 001a 0B49     		ldr	r1, .L15+12
 229 001c 0848     		ldr	r0, .L15+4
 230 001e FFF7FEFF 		bl	servo_set_offset
 231              	.LVL18:
 148:Src/main.c    **** }
 232              		.loc 1 148 0
 233 0022 0A49     		ldr	r1, .L15+16
 234 0024 0748     		ldr	r0, .L15+8
 235 0026 FFF7FEFF 		bl	servo_set_offset
 236              	.LVL19:
 237 002a 08BD     		pop	{r3, pc}
 238              	.LVL20:
 239              	.L13:
 142:Src/main.c    **** 
 240              		.loc 1 142 0 discriminator 1
 241 002c 0848     		ldr	r0, .L15+20
 242              	.LVL21:
 243 002e FFF7FEFF 		bl	error_alert
 244              	.LVL22:
 245 0032 ECE7     		b	.L10
 246              	.LVL23:
 247              	.L14:
 145:Src/main.c    **** 
 248              		.loc 1 145 0 discriminator 1
 249 0034 0748     		ldr	r0, .L15+24
 250              	.LVL24:
 251 0036 FFF7FEFF 		bl	error_alert
 252              	.LVL25:
 253 003a EEE7     		b	.L11
 254              	.L16:
 255              		.align	2
 256              	.L15:
 257 003c 00000000 		.word	htim3
 258 0040 00000000 		.word	servo_roll
 259 0044 00000000 		.word	servo_pitch
 260 0048 0000B442 		.word	1119092736
 261 004c 00007042 		.word	1114636288
 262 0050 00000000 		.word	.LC1
 263 0054 18000000 		.word	.LC2
 264              		.cfi_endproc
 265              	.LFE244:
 267              		.section	.text.init_servomotors_motion,"ax",%progbits
 268              		.align	1
 269              		.global	init_servomotors_motion
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu softvfp
 275              	init_servomotors_motion:
 276              	.LFB245:
 152:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 277              		.loc 1 152 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccTzhkRm.s 			page 19


 281 0000 08B5     		push	{r3, lr}
 282              	.LCFI7:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 3, -8
 285              		.cfi_offset 14, -4
 153:Src/main.c    **** }
 286              		.loc 1 153 0
 287 0002 0248     		ldr	r0, .L19
 288 0004 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 289              	.LVL26:
 290 0008 08BD     		pop	{r3, pc}
 291              	.L20:
 292 000a 00BF     		.align	2
 293              	.L19:
 294 000c 00000000 		.word	htim3
 295              		.cfi_endproc
 296              	.LFE245:
 298              		.section	.text.servo_update,"ax",%progbits
 299              		.align	1
 300              		.global	servo_update
 301              		.syntax unified
 302              		.thumb
 303              		.thumb_func
 304              		.fpu softvfp
 306              	servo_update:
 307              	.LFB246:
 157:Src/main.c    ****     servo_set_position(&servo_roll, roll_compensation);
 308              		.loc 1 157 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312 0000 08B5     		push	{r3, lr}
 313              	.LCFI8:
 314              		.cfi_def_cfa_offset 8
 315              		.cfi_offset 3, -8
 316              		.cfi_offset 14, -4
 158:Src/main.c    ****     servo_set_position(&servo_pitch, pitch_compensation);
 317              		.loc 1 158 0
 318 0002 054B     		ldr	r3, .L23
 319 0004 1968     		ldr	r1, [r3]	@ float
 320 0006 0548     		ldr	r0, .L23+4
 321 0008 FFF7FEFF 		bl	servo_set_position
 322              	.LVL27:
 159:Src/main.c    **** }
 323              		.loc 1 159 0
 324 000c 044B     		ldr	r3, .L23+8
 325 000e 1968     		ldr	r1, [r3]	@ float
 326 0010 0448     		ldr	r0, .L23+12
 327 0012 FFF7FEFF 		bl	servo_set_position
 328              	.LVL28:
 329 0016 08BD     		pop	{r3, pc}
 330              	.L24:
 331              		.align	2
 332              	.L23:
 333 0018 00000000 		.word	roll_compensation
 334 001c 00000000 		.word	servo_roll
 335 0020 00000000 		.word	pitch_compensation
ARM GAS  /tmp/ccTzhkRm.s 			page 20


 336 0024 00000000 		.word	servo_pitch
 337              		.cfi_endproc
 338              	.LFE246:
 340              		.section	.text.test_sensor,"ax",%progbits
 341              		.align	1
 342              		.global	test_sensor
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 346              		.fpu softvfp
 348              	test_sensor:
 349              	.LFB248:
 191:Src/main.c    ****     uint8_t temp;
 350              		.loc 1 191 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 00B5     		push	{lr}
 355              	.LCFI9:
 356              		.cfi_def_cfa_offset 4
 357              		.cfi_offset 14, -4
 358 0002 85B0     		sub	sp, sp, #20
 359              	.LCFI10:
 360              		.cfi_def_cfa_offset 24
 193:Src/main.c    ****     SD_MPU6050_Result r;
 361              		.loc 1 193 0
 362 0004 04AA     		add	r2, sp, #16
 363 0006 7523     		movs	r3, #117
 364 0008 02F8023D 		strb	r3, [r2, #-2]!
 199:Src/main.c    **** 		{
 365              		.loc 1 199 0
 366 000c 4FF47A73 		mov	r3, #1000
 367 0010 0093     		str	r3, [sp]
 368 0012 0123     		movs	r3, #1
 369 0014 D021     		movs	r1, #208
 370 0016 1048     		ldr	r0, .L32
 371 0018 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 372              	.LVL29:
 373 001c A0B9     		cbnz	r0, .L30
 374              	.L26:
 205:Src/main.c    **** 		{
 375              		.loc 1 205 0
 376 001e 4FF47A73 		mov	r3, #1000
 377 0022 0093     		str	r3, [sp]
 378 0024 0123     		movs	r3, #1
 379 0026 0DF10F02 		add	r2, sp, #15
 380 002a D021     		movs	r1, #208
 381 002c 0A48     		ldr	r0, .L32
 382 002e FFF7FEFF 		bl	HAL_I2C_Master_Receive
 383              	.LVL30:
 384 0032 68B9     		cbnz	r0, .L31
 385              	.L27:
 211:Src/main.c    **** 		{
 386              		.loc 1 211 0
 387 0034 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 388 0038 682B     		cmp	r3, #104
 389 003a 02D0     		beq	.L25
ARM GAS  /tmp/ccTzhkRm.s 			page 21


 213:Src/main.c    **** 		}
 390              		.loc 1 213 0
 391 003c 0748     		ldr	r0, .L32+4
 392 003e FFF7FEFF 		bl	error_alert
 393              	.LVL31:
 394              	.L25:
 216:Src/main.c    **** 
 395              		.loc 1 216 0
 396 0042 05B0     		add	sp, sp, #20
 397              	.LCFI11:
 398              		.cfi_remember_state
 399              		.cfi_def_cfa_offset 4
 400              		@ sp needed
 401 0044 5DF804FB 		ldr	pc, [sp], #4
 402              	.L30:
 403              	.LCFI12:
 404              		.cfi_restore_state
 201:Src/main.c    **** 		}
 405              		.loc 1 201 0
 406 0048 0448     		ldr	r0, .L32+4
 407 004a FFF7FEFF 		bl	error_alert
 408              	.LVL32:
 409 004e E6E7     		b	.L26
 410              	.L31:
 207:Src/main.c    **** 		}
 411              		.loc 1 207 0
 412 0050 0248     		ldr	r0, .L32+4
 413 0052 FFF7FEFF 		bl	error_alert
 414              	.LVL33:
 415 0056 EDE7     		b	.L27
 416              	.L33:
 417              		.align	2
 418              	.L32:
 419 0058 00000000 		.word	hi2c2
 420 005c 00000000 		.word	.LC3
 421              		.cfi_endproc
 422              	.LFE248:
 424              		.global	__aeabi_i2d
 425              		.global	__aeabi_ddiv
 426              		.global	__aeabi_dmul
 427              		.global	__aeabi_d2f
 428              		.global	__aeabi_fmul
 429              		.section	.text.sensor_calc_position,"ax",%progbits
 430              		.align	1
 431              		.global	sensor_calc_position
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu softvfp
 437              	sensor_calc_position:
 438              	.LFB250:
 244:Src/main.c    ****     *pitch = 180 * atan (position_sensor.Accelerometer_X/sqrt(SQUARE(position_sensor.Accelerometer_
 439              		.loc 1 244 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              	.LVL34:
ARM GAS  /tmp/ccTzhkRm.s 			page 22


 444 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 445              	.LCFI13:
 446              		.cfi_def_cfa_offset 32
 447              		.cfi_offset 3, -32
 448              		.cfi_offset 4, -28
 449              		.cfi_offset 5, -24
 450              		.cfi_offset 6, -20
 451              		.cfi_offset 7, -16
 452              		.cfi_offset 8, -12
 453              		.cfi_offset 9, -8
 454              		.cfi_offset 14, -4
 455 0004 0646     		mov	r6, r0
 456 0006 0D46     		mov	r5, r1
 245:Src/main.c    ****     *roll = 180 * atan (position_sensor.Accelerometer_Y/sqrt(SQUARE(position_sensor.Accelerometer_X
 457              		.loc 1 245 0
 458 0008 2D4C     		ldr	r4, .L36+8
 459 000a B4F90C70 		ldrsh	r7, [r4, #12]
 460 000e B4F90E00 		ldrsh	r0, [r4, #14]
 461              	.LVL35:
 462 0012 B4F91030 		ldrsh	r3, [r4, #16]
 463 0016 03FB03F3 		mul	r3, r3, r3
 464 001a 00FB0030 		mla	r0, r0, r0, r3
 465 001e FFF7FEFF 		bl	__aeabi_i2d
 466              	.LVL36:
 467 0022 FFF7FEFF 		bl	sqrt
 468              	.LVL37:
 469 0026 8046     		mov	r8, r0
 470 0028 8946     		mov	r9, r1
 471 002a 3846     		mov	r0, r7
 472 002c FFF7FEFF 		bl	__aeabi_i2d
 473              	.LVL38:
 474 0030 4246     		mov	r2, r8
 475 0032 4B46     		mov	r3, r9
 476 0034 FFF7FEFF 		bl	__aeabi_ddiv
 477              	.LVL39:
 478 0038 FFF7FEFF 		bl	atan
 479              	.LVL40:
 480 003c 0022     		movs	r2, #0
 481 003e 214B     		ldr	r3, .L36+12
 482 0040 FFF7FEFF 		bl	__aeabi_dmul
 483              	.LVL41:
 484 0044 1CA3     		adr	r3, .L36
 485 0046 D3E90023 		ldrd	r2, [r3]
 486 004a FFF7FEFF 		bl	__aeabi_ddiv
 487              	.LVL42:
 488 004e FFF7FEFF 		bl	__aeabi_d2f
 489              	.LVL43:
 490 0052 3060     		str	r0, [r6]	@ float
 246:Src/main.c    ****     *pitch *= sensor_factor;
 491              		.loc 1 246 0
 492 0054 B4F90E70 		ldrsh	r7, [r4, #14]
 493 0058 B4F90C00 		ldrsh	r0, [r4, #12]
 494 005c B4F91030 		ldrsh	r3, [r4, #16]
 495 0060 03FB03F3 		mul	r3, r3, r3
 496 0064 00FB0030 		mla	r0, r0, r0, r3
 497 0068 FFF7FEFF 		bl	__aeabi_i2d
 498              	.LVL44:
ARM GAS  /tmp/ccTzhkRm.s 			page 23


 499 006c FFF7FEFF 		bl	sqrt
 500              	.LVL45:
 501 0070 8046     		mov	r8, r0
 502 0072 8946     		mov	r9, r1
 503 0074 3846     		mov	r0, r7
 504 0076 FFF7FEFF 		bl	__aeabi_i2d
 505              	.LVL46:
 506 007a 4246     		mov	r2, r8
 507 007c 4B46     		mov	r3, r9
 508 007e FFF7FEFF 		bl	__aeabi_ddiv
 509              	.LVL47:
 510 0082 FFF7FEFF 		bl	atan
 511              	.LVL48:
 512 0086 0022     		movs	r2, #0
 513 0088 0E4B     		ldr	r3, .L36+12
 514 008a FFF7FEFF 		bl	__aeabi_dmul
 515              	.LVL49:
 516 008e 0AA3     		adr	r3, .L36
 517 0090 D3E90023 		ldrd	r2, [r3]
 518 0094 FFF7FEFF 		bl	__aeabi_ddiv
 519              	.LVL50:
 520 0098 FFF7FEFF 		bl	__aeabi_d2f
 521              	.LVL51:
 522 009c 2860     		str	r0, [r5]	@ float
 247:Src/main.c    ****     *roll *= sensor_factor;
 523              		.loc 1 247 0
 524 009e 0A4C     		ldr	r4, .L36+16
 525 00a0 2168     		ldr	r1, [r4]	@ float
 526 00a2 3068     		ldr	r0, [r6]	@ float
 527 00a4 FFF7FEFF 		bl	__aeabi_fmul
 528              	.LVL52:
 529 00a8 3060     		str	r0, [r6]	@ float
 248:Src/main.c    **** }
 530              		.loc 1 248 0
 531 00aa 2168     		ldr	r1, [r4]	@ float
 532 00ac 2868     		ldr	r0, [r5]	@ float
 533 00ae FFF7FEFF 		bl	__aeabi_fmul
 534              	.LVL53:
 535 00b2 2860     		str	r0, [r5]	@ float
 536 00b4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 537              	.LVL54:
 538              	.L37:
 539              		.align	3
 540              	.L36:
 541 00b8 182D4454 		.word	1413754136
 542 00bc FB210940 		.word	1074340347
 543 00c0 00000000 		.word	position_sensor
 544 00c4 00806640 		.word	1080459264
 545 00c8 00000000 		.word	sensor_factor
 546              		.cfi_endproc
 547              	.LFE250:
 549              		.section	.text.init_position_sensor,"ax",%progbits
 550              		.align	1
 551              		.global	init_position_sensor
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
ARM GAS  /tmp/ccTzhkRm.s 			page 24


 555              		.fpu softvfp
 557              	init_position_sensor:
 558              	.LFB247:
 164:Src/main.c    ****     sensor_roll = 0;
 559              		.loc 1 164 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563 0000 00B5     		push	{lr}
 564              	.LCFI14:
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 14, -4
 567 0002 83B0     		sub	sp, sp, #12
 568              	.LCFI15:
 569              		.cfi_def_cfa_offset 16
 165:Src/main.c    ****     sensor_pitch = 0;
 570              		.loc 1 165 0
 571 0004 0023     		movs	r3, #0
 572 0006 104A     		ldr	r2, .L42
 573 0008 1360     		str	r3, [r2]	@ float
 166:Src/main.c    ****     sensor_factor = DEFAULT_FACTOR;
 574              		.loc 1 166 0
 575 000a 104A     		ldr	r2, .L42+4
 576 000c 1360     		str	r3, [r2]	@ float
 167:Src/main.c    **** 
 577              		.loc 1 167 0
 578 000e 104A     		ldr	r2, .L42+8
 579 0010 104B     		ldr	r3, .L42+12
 580 0012 1A60     		str	r2, [r3]	@ float
 169:Src/main.c    ****     
 581              		.loc 1 169 0
 582 0014 4FF4FA70 		mov	r0, #500
 583 0018 FFF7FEFF 		bl	HAL_Delay
 584              	.LVL55:
 172:Src/main.c    ****     
 585              		.loc 1 172 0
 586 001c 0022     		movs	r2, #0
 587 001e 0092     		str	r2, [sp]
 588 0020 1346     		mov	r3, r2
 589 0022 0D49     		ldr	r1, .L42+16
 590 0024 0D48     		ldr	r0, .L42+20
 591 0026 FFF7FEFF 		bl	SD_MPU6050_Init
 592              	.LVL56:
 174:Src/main.c    ****     {
 593              		.loc 1 174 0
 594 002a 48B9     		cbnz	r0, .L41
 595              	.LVL57:
 596              	.L39:
 179:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim4);
 597              		.loc 1 179 0
 598 002c 0649     		ldr	r1, .L42
 599 002e 0748     		ldr	r0, .L42+4
 600 0030 FFF7FEFF 		bl	sensor_calc_position
 601              	.LVL58:
 180:Src/main.c    **** }
 602              		.loc 1 180 0
 603 0034 0A48     		ldr	r0, .L42+24
ARM GAS  /tmp/ccTzhkRm.s 			page 25


 604 0036 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 605              	.LVL59:
 181:Src/main.c    **** 
 606              		.loc 1 181 0
 607 003a 03B0     		add	sp, sp, #12
 608              	.LCFI16:
 609              		.cfi_remember_state
 610              		.cfi_def_cfa_offset 4
 611              		@ sp needed
 612 003c 5DF804FB 		ldr	pc, [sp], #4
 613              	.LVL60:
 614              	.L41:
 615              	.LCFI17:
 616              		.cfi_restore_state
 176:Src/main.c    ****     }
 617              		.loc 1 176 0
 618 0040 0848     		ldr	r0, .L42+28
 619              	.LVL61:
 620 0042 FFF7FEFF 		bl	error_alert
 621              	.LVL62:
 622 0046 F1E7     		b	.L39
 623              	.L43:
 624              		.align	2
 625              	.L42:
 626 0048 00000000 		.word	sensor_roll
 627 004c 00000000 		.word	sensor_pitch
 628 0050 3333B33F 		.word	1068708659
 629 0054 00000000 		.word	sensor_factor
 630 0058 00000000 		.word	position_sensor
 631 005c 00000000 		.word	hi2c2
 632 0060 00000000 		.word	htim4
 633 0064 00000000 		.word	.LC4
 634              		.cfi_endproc
 635              	.LFE247:
 637              		.section	.text.update_position_sensor,"ax",%progbits
 638              		.align	1
 639              		.global	update_position_sensor
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 643              		.fpu softvfp
 645              	update_position_sensor:
 646              	.LFB249:
 223:Src/main.c    ****     HAL_GPIO_WritePin(UPDATE_LED_GPIO_Port, UPDATE_LED_Pin, GPIO_PIN_SET);
 647              		.loc 1 223 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651 0000 38B5     		push	{r3, r4, r5, lr}
 652              	.LCFI18:
 653              		.cfi_def_cfa_offset 16
 654              		.cfi_offset 3, -16
 655              		.cfi_offset 4, -12
 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 224:Src/main.c    ****     
 658              		.loc 1 224 0
ARM GAS  /tmp/ccTzhkRm.s 			page 26


 659 0002 0122     		movs	r2, #1
 660 0004 1146     		mov	r1, r2
 661 0006 1448     		ldr	r0, .L48
 662 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 663              	.LVL63:
 226:Src/main.c    ****     SD_MPU6050_Result r;
 664              		.loc 1 226 0
 665 000c FFF7FEFF 		bl	test_sensor
 666              	.LVL64:
 228:Src/main.c    ****     if(r != SD_MPU6050_Result_Ok)
 667              		.loc 1 228 0
 668 0010 1249     		ldr	r1, .L48+4
 669 0012 1348     		ldr	r0, .L48+8
 670 0014 FFF7FEFF 		bl	SD_MPU6050_ReadAccelerometer
 671              	.LVL65:
 229:Src/main.c    ****     {
 672              		.loc 1 229 0
 673 0018 C8B9     		cbnz	r0, .L47
 674              	.LVL66:
 675              	.L45:
 234:Src/main.c    ****     roll_compensation = ROLL_COMPENSATION_FACTOR * maf_filter(&roll_filter, sensor_roll);
 676              		.loc 1 234 0
 677 001a 124D     		ldr	r5, .L48+12
 678 001c 124C     		ldr	r4, .L48+16
 679 001e 2946     		mov	r1, r5
 680 0020 2046     		mov	r0, r4
 681 0022 FFF7FEFF 		bl	sensor_calc_position
 682              	.LVL67:
 235:Src/main.c    ****     pitch_compensation = PITCH_COMPENSATION_FACTOR * maf_filter(&pitch_filter, sensor_pitch);
 683              		.loc 1 235 0
 684 0026 2968     		ldr	r1, [r5]	@ float
 685 0028 1048     		ldr	r0, .L48+20
 686 002a FFF7FEFF 		bl	maf_filter
 687              	.LVL68:
 688 002e 104B     		ldr	r3, .L48+24
 689 0030 1860     		str	r0, [r3]	@ float
 236:Src/main.c    **** 
 690              		.loc 1 236 0
 691 0032 2168     		ldr	r1, [r4]	@ float
 692 0034 0F48     		ldr	r0, .L48+28
 693 0036 FFF7FEFF 		bl	maf_filter
 694              	.LVL69:
 695 003a 00F10040 		add	r0, r0, #-2147483648
 696 003e 0E4B     		ldr	r3, .L48+32
 697 0040 1860     		str	r0, [r3]	@ float
 238:Src/main.c    **** }
 698              		.loc 1 238 0
 699 0042 0022     		movs	r2, #0
 700 0044 0121     		movs	r1, #1
 701 0046 0448     		ldr	r0, .L48
 702 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 703              	.LVL70:
 704 004c 38BD     		pop	{r3, r4, r5, pc}
 705              	.LVL71:
 706              	.L47:
 231:Src/main.c    ****     }
 707              		.loc 1 231 0
ARM GAS  /tmp/ccTzhkRm.s 			page 27


 708 004e 0B48     		ldr	r0, .L48+36
 709              	.LVL72:
 710 0050 FFF7FEFF 		bl	error_alert
 711              	.LVL73:
 712 0054 E1E7     		b	.L45
 713              	.L49:
 714 0056 00BF     		.align	2
 715              	.L48:
 716 0058 00080140 		.word	1073809408
 717 005c 00000000 		.word	position_sensor
 718 0060 00000000 		.word	hi2c2
 719 0064 00000000 		.word	sensor_roll
 720 0068 00000000 		.word	sensor_pitch
 721 006c 00000000 		.word	roll_filter
 722 0070 00000000 		.word	roll_compensation
 723 0074 00000000 		.word	pitch_filter
 724 0078 00000000 		.word	pitch_compensation
 725 007c 00000000 		.word	.LC5
 726              		.cfi_endproc
 727              	.LFE249:
 729              		.section	.text.change_smoothing,"ax",%progbits
 730              		.align	1
 731              		.global	change_smoothing
 732              		.syntax unified
 733              		.thumb
 734              		.thumb_func
 735              		.fpu softvfp
 737              	change_smoothing:
 738              	.LFB251:
 257:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM3_IRQn);
 739              		.loc 1 257 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              	.LVL74:
 744 0000 70B5     		push	{r4, r5, r6, lr}
 745              	.LCFI19:
 746              		.cfi_def_cfa_offset 16
 747              		.cfi_offset 4, -16
 748              		.cfi_offset 5, -12
 749              		.cfi_offset 6, -8
 750              		.cfi_offset 14, -4
 751 0002 0546     		mov	r5, r0
 258:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM4_IRQn);
 752              		.loc 1 258 0
 753 0004 1D20     		movs	r0, #29
 754              	.LVL75:
 755 0006 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 756              	.LVL76:
 259:Src/main.c    ****     
 757              		.loc 1 259 0
 758 000a 1E20     		movs	r0, #30
 759 000c FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 760              	.LVL77:
 261:Src/main.c    ****     servo_set_position(&servo_pitch, 0);
 761              		.loc 1 261 0
 762 0010 0024     		movs	r4, #0
ARM GAS  /tmp/ccTzhkRm.s 			page 28


 763 0012 2146     		mov	r1, r4
 764 0014 0F48     		ldr	r0, .L52
 765 0016 FFF7FEFF 		bl	servo_set_position
 766              	.LVL78:
 262:Src/main.c    **** 
 767              		.loc 1 262 0
 768 001a 2146     		mov	r1, r4
 769 001c 0E48     		ldr	r0, .L52+4
 770 001e FFF7FEFF 		bl	servo_set_position
 771              	.LVL79:
 264:Src/main.c    ****     
 772              		.loc 1 264 0
 773 0022 0E4C     		ldr	r4, .L52+8
 774 0024 2560     		str	r5, [r4]
 266:Src/main.c    ****     delete_maf(&pitch_filter);
 775              		.loc 1 266 0
 776 0026 0E4E     		ldr	r6, .L52+12
 777 0028 3046     		mov	r0, r6
 778 002a FFF7FEFF 		bl	delete_maf
 779              	.LVL80:
 267:Src/main.c    **** 
 780              		.loc 1 267 0
 781 002e 0D4D     		ldr	r5, .L52+16
 782              	.LVL81:
 783 0030 2846     		mov	r0, r5
 784 0032 FFF7FEFF 		bl	delete_maf
 785              	.LVL82:
 269:Src/main.c    ****     init_maf(&pitch_filter, smoothing);
 786              		.loc 1 269 0
 787 0036 2168     		ldr	r1, [r4]
 788 0038 3046     		mov	r0, r6
 789 003a FFF7FEFF 		bl	init_maf
 790              	.LVL83:
 270:Src/main.c    ****     
 791              		.loc 1 270 0
 792 003e 2168     		ldr	r1, [r4]
 793 0040 2846     		mov	r0, r5
 794 0042 FFF7FEFF 		bl	init_maf
 795              	.LVL84:
 272:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 796              		.loc 1 272 0
 797 0046 1E20     		movs	r0, #30
 798 0048 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 799              	.LVL85:
 273:Src/main.c    **** }
 800              		.loc 1 273 0
 801 004c 1D20     		movs	r0, #29
 802 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 803              	.LVL86:
 804 0052 70BD     		pop	{r4, r5, r6, pc}
 805              	.L53:
 806              		.align	2
 807              	.L52:
 808 0054 00000000 		.word	servo_roll
 809 0058 00000000 		.word	servo_pitch
 810 005c 00000000 		.word	smoothing
 811 0060 00000000 		.word	roll_filter
ARM GAS  /tmp/ccTzhkRm.s 			page 29


 812 0064 00000000 		.word	pitch_filter
 813              		.cfi_endproc
 814              	.LFE251:
 816              		.section	.text.init_uart_messaging,"ax",%progbits
 817              		.align	1
 818              		.global	init_uart_messaging
 819              		.syntax unified
 820              		.thumb
 821              		.thumb_func
 822              		.fpu softvfp
 824              	init_uart_messaging:
 825              	.LFB253:
 291:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 826              		.loc 1 291 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830 0000 08B5     		push	{r3, lr}
 831              	.LCFI20:
 832              		.cfi_def_cfa_offset 8
 833              		.cfi_offset 3, -8
 834              		.cfi_offset 14, -4
 292:Src/main.c    **** }
 835              		.loc 1 292 0
 836 0002 0248     		ldr	r0, .L56
 837 0004 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 838              	.LVL87:
 839 0008 08BD     		pop	{r3, pc}
 840              	.L57:
 841 000a 00BF     		.align	2
 842              	.L56:
 843 000c 00000000 		.word	htim2
 844              		.cfi_endproc
 845              	.LFE253:
 847              		.section	.text.init_system,"ax",%progbits
 848              		.align	1
 849              		.global	init_system
 850              		.syntax unified
 851              		.thumb
 852              		.thumb_func
 853              		.fpu softvfp
 855              	init_system:
 856              	.LFB242:
 107:Src/main.c    ****     smoothing = DEFAULT_SMOOTHING;
 857              		.loc 1 107 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861 0000 08B5     		push	{r3, lr}
 862              	.LCFI21:
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 3, -8
 865              		.cfi_offset 14, -4
 108:Src/main.c    ****     if(init_maf(&roll_filter, smoothing) == 0) error_alert("Cannot init MAF");
 866              		.loc 1 108 0
 867 0002 1421     		movs	r1, #20
 868 0004 0E4B     		ldr	r3, .L64
ARM GAS  /tmp/ccTzhkRm.s 			page 30


 869 0006 1960     		str	r1, [r3]
 109:Src/main.c    ****     if(init_maf(&pitch_filter, smoothing) == 0) error_alert("Cannot init MAF");
 870              		.loc 1 109 0
 871 0008 0E48     		ldr	r0, .L64+4
 872 000a FFF7FEFF 		bl	init_maf
 873              	.LVL88:
 874 000e 70B1     		cbz	r0, .L62
 875              	.L59:
 110:Src/main.c    **** 
 876              		.loc 1 110 0
 877 0010 0B4B     		ldr	r3, .L64
 878 0012 1968     		ldr	r1, [r3]
 879 0014 0C48     		ldr	r0, .L64+8
 880 0016 FFF7FEFF 		bl	init_maf
 881              	.LVL89:
 882 001a 60B1     		cbz	r0, .L63
 883              	.L60:
 112:Src/main.c    ****     init_servomotors();
 884              		.loc 1 112 0
 885 001c FFF7FEFF 		bl	init_position_sensor
 886              	.LVL90:
 113:Src/main.c    ****     init_uart_messaging();
 887              		.loc 1 113 0
 888 0020 FFF7FEFF 		bl	init_servomotors
 889              	.LVL91:
 114:Src/main.c    ****     init_servomotors_motion();
 890              		.loc 1 114 0
 891 0024 FFF7FEFF 		bl	init_uart_messaging
 892              	.LVL92:
 115:Src/main.c    **** }
 893              		.loc 1 115 0
 894 0028 FFF7FEFF 		bl	init_servomotors_motion
 895              	.LVL93:
 896 002c 08BD     		pop	{r3, pc}
 897              	.L62:
 109:Src/main.c    ****     if(init_maf(&pitch_filter, smoothing) == 0) error_alert("Cannot init MAF");
 898              		.loc 1 109 0 discriminator 1
 899 002e 0748     		ldr	r0, .L64+12
 900 0030 FFF7FEFF 		bl	error_alert
 901              	.LVL94:
 902 0034 ECE7     		b	.L59
 903              	.L63:
 110:Src/main.c    **** 
 904              		.loc 1 110 0 discriminator 1
 905 0036 0548     		ldr	r0, .L64+12
 906 0038 FFF7FEFF 		bl	error_alert
 907              	.LVL95:
 908 003c EEE7     		b	.L60
 909              	.L65:
 910 003e 00BF     		.align	2
 911              	.L64:
 912 0040 00000000 		.word	smoothing
 913 0044 00000000 		.word	roll_filter
 914 0048 00000000 		.word	pitch_filter
 915 004c 00000000 		.word	.LC6
 916              		.cfi_endproc
 917              	.LFE242:
ARM GAS  /tmp/ccTzhkRm.s 			page 31


 919              		.section	.text.send_value_pack,"ax",%progbits
 920              		.align	1
 921              		.global	send_value_pack
 922              		.syntax unified
 923              		.thumb
 924              		.thumb_func
 925              		.fpu softvfp
 927              	send_value_pack:
 928              	.LFB254:
 296:Src/main.c    ****     char value_pack_str[100];
 929              		.loc 1 296 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 112
 932              		@ frame_needed = 0, uses_anonymous_args = 0
 933              	.LVL96:
 934 0000 10B5     		push	{r4, lr}
 935              	.LCFI22:
 936              		.cfi_def_cfa_offset 8
 937              		.cfi_offset 4, -8
 938              		.cfi_offset 14, -4
 939 0002 9CB0     		sub	sp, sp, #112
 940              	.LCFI23:
 941              		.cfi_def_cfa_offset 120
 942 0004 0446     		mov	r4, r0
 943 0006 0846     		mov	r0, r1
 944              	.LVL97:
 299:Src/main.c    **** 
 945              		.loc 1 299 0
 946 0008 6946     		mov	r1, sp
 947              	.LVL98:
 948 000a FFF7FEFF 		bl	float_to_string
 949              	.LVL99:
 301:Src/main.c    ****     {
 950              		.loc 1 301 0
 951 000e 012C     		cmp	r4, #1
 952 0010 06D0     		beq	.L70
 307:Src/main.c    ****     }
 953              		.loc 1 307 0
 954 0012 6A46     		mov	r2, sp
 955 0014 0549     		ldr	r1, .L71
 956 0016 03A8     		add	r0, sp, #12
 957 0018 FFF7FEFF 		bl	sprintf
 958              	.LVL100:
 959              	.L66:
 309:Src/main.c    **** 
 960              		.loc 1 309 0
 961 001c 1CB0     		add	sp, sp, #112
 962              	.LCFI24:
 963              		.cfi_remember_state
 964              		.cfi_def_cfa_offset 8
 965              		@ sp needed
 966 001e 10BD     		pop	{r4, pc}
 967              	.L70:
 968              	.LCFI25:
 969              		.cfi_restore_state
 303:Src/main.c    ****     }
 970              		.loc 1 303 0
ARM GAS  /tmp/ccTzhkRm.s 			page 32


 971 0020 6A46     		mov	r2, sp
 972 0022 0349     		ldr	r1, .L71+4
 973 0024 03A8     		add	r0, sp, #12
 974 0026 FFF7FEFF 		bl	sprintf
 975              	.LVL101:
 976 002a F7E7     		b	.L66
 977              	.L72:
 978              		.align	2
 979              	.L71:
 980 002c 34000000 		.word	.LC8
 981 0030 00000000 		.word	.LC7
 982              		.cfi_endproc
 983              	.LFE254:
 985              		.global	__aeabi_f2iz
 986              		.section	.text.send_angle_pack,"ax",%progbits
 987              		.align	1
 988              		.global	send_angle_pack
 989              		.syntax unified
 990              		.thumb
 991              		.thumb_func
 992              		.fpu softvfp
 994              	send_angle_pack:
 995              	.LFB255:
 312:Src/main.c    ****     char angle_pack_str[100];
 996              		.loc 1 312 0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 104
 999              		@ frame_needed = 0, uses_anonymous_args = 0
 1000              	.LVL102:
 1001 0000 30B5     		push	{r4, r5, lr}
 1002              	.LCFI26:
 1003              		.cfi_def_cfa_offset 12
 1004              		.cfi_offset 4, -12
 1005              		.cfi_offset 5, -8
 1006              		.cfi_offset 14, -4
 1007 0002 9BB0     		sub	sp, sp, #108
 1008              	.LCFI27:
 1009              		.cfi_def_cfa_offset 120
 1010 0004 0C46     		mov	r4, r1
 316:Src/main.c    ****     {
 1011              		.loc 1 316 0
 1012 0006 0128     		cmp	r0, #1
 1013 0008 17D0     		beq	.L77
 322:Src/main.c    ****     }
 1014              		.loc 1 322 0
 1015 000a 1046     		mov	r0, r2
 1016              	.LVL103:
 1017 000c FFF7FEFF 		bl	__aeabi_f2iz
 1018              	.LVL104:
 1019 0010 0546     		mov	r5, r0
 1020 0012 2046     		mov	r0, r4
 1021 0014 FFF7FEFF 		bl	__aeabi_f2iz
 1022              	.LVL105:
 1023 0018 2B46     		mov	r3, r5
 1024 001a 0246     		mov	r2, r0
 1025 001c 0E49     		ldr	r1, .L78
 1026 001e 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccTzhkRm.s 			page 33


 1027 0020 FFF7FEFF 		bl	sprintf
 1028              	.LVL106:
 1029              	.L75:
 345:Src/main.c    **** }
 1030              		.loc 1 345 0
 1031 0024 01A8     		add	r0, sp, #4
 1032 0026 FFF7FEFF 		bl	strlen
 1033              	.LVL107:
 1034 002a 6423     		movs	r3, #100
 1035 002c 82B2     		uxth	r2, r0
 1036 002e 01A9     		add	r1, sp, #4
 1037 0030 0A48     		ldr	r0, .L78+4
 1038 0032 FFF7FEFF 		bl	HAL_UART_Transmit
 1039              	.LVL108:
 346:Src/main.c    **** 
 1040              		.loc 1 346 0
 1041 0036 1BB0     		add	sp, sp, #108
 1042              	.LCFI28:
 1043              		.cfi_remember_state
 1044              		.cfi_def_cfa_offset 12
 1045              		@ sp needed
 1046 0038 30BD     		pop	{r4, r5, pc}
 1047              	.LVL109:
 1048              	.L77:
 1049              	.LCFI29:
 1050              		.cfi_restore_state
 318:Src/main.c    ****     }
 1051              		.loc 1 318 0
 1052 003a 1046     		mov	r0, r2
 1053              	.LVL110:
 1054 003c FFF7FEFF 		bl	__aeabi_f2iz
 1055              	.LVL111:
 1056 0040 0546     		mov	r5, r0
 1057 0042 2046     		mov	r0, r4
 1058 0044 FFF7FEFF 		bl	__aeabi_f2iz
 1059              	.LVL112:
 1060 0048 2B46     		mov	r3, r5
 1061 004a 0246     		mov	r2, r0
 1062 004c 0449     		ldr	r1, .L78+8
 1063 004e 01A8     		add	r0, sp, #4
 1064 0050 FFF7FEFF 		bl	sprintf
 1065              	.LVL113:
 1066 0054 E6E7     		b	.L75
 1067              	.L79:
 1068 0056 00BF     		.align	2
 1069              	.L78:
 1070 0058 3C000000 		.word	.LC10
 1071 005c 00000000 		.word	huart1
 1072 0060 00000000 		.word	.LC9
 1073              		.cfi_endproc
 1074              	.LFE255:
 1076              		.section	.text.uart_message_update,"ax",%progbits
 1077              		.align	1
 1078              		.global	uart_message_update
 1079              		.syntax unified
 1080              		.thumb
 1081              		.thumb_func
ARM GAS  /tmp/ccTzhkRm.s 			page 34


 1082              		.fpu softvfp
 1084              	uart_message_update:
 1085              	.LFB252:
 282:Src/main.c    ****     send_angle_pack(SENSOR_ANGLE_PACK, sensor_pitch, sensor_roll);
 1086              		.loc 1 282 0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 0
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 1090 0000 08B5     		push	{r3, lr}
 1091              	.LCFI30:
 1092              		.cfi_def_cfa_offset 8
 1093              		.cfi_offset 3, -8
 1094              		.cfi_offset 14, -4
 283:Src/main.c    ****     send_angle_pack(SERVO_ANGLE_PACK, pitch_compensation, roll_compensation);
 1095              		.loc 1 283 0
 1096 0002 074B     		ldr	r3, .L82
 1097 0004 1A68     		ldr	r2, [r3]	@ float
 1098 0006 074B     		ldr	r3, .L82+4
 1099 0008 1968     		ldr	r1, [r3]	@ float
 1100 000a 0120     		movs	r0, #1
 1101 000c FFF7FEFF 		bl	send_angle_pack
 1102              	.LVL114:
 284:Src/main.c    **** }
 1103              		.loc 1 284 0
 1104 0010 054B     		ldr	r3, .L82+8
 1105 0012 1A68     		ldr	r2, [r3]	@ float
 1106 0014 054B     		ldr	r3, .L82+12
 1107 0016 1968     		ldr	r1, [r3]	@ float
 1108 0018 0020     		movs	r0, #0
 1109 001a FFF7FEFF 		bl	send_angle_pack
 1110              	.LVL115:
 1111 001e 08BD     		pop	{r3, pc}
 1112              	.L83:
 1113              		.align	2
 1114              	.L82:
 1115 0020 00000000 		.word	sensor_roll
 1116 0024 00000000 		.word	sensor_pitch
 1117 0028 00000000 		.word	roll_compensation
 1118 002c 00000000 		.word	pitch_compensation
 1119              		.cfi_endproc
 1120              	.LFE252:
 1122              		.section	.text.send_echo_pack,"ax",%progbits
 1123              		.align	1
 1124              		.global	send_echo_pack
 1125              		.syntax unified
 1126              		.thumb
 1127              		.thumb_func
 1128              		.fpu softvfp
 1130              	send_echo_pack:
 1131              	.LFB256:
 349:Src/main.c    ****     char echo_pack_str[100];
 1132              		.loc 1 349 0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 104
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              	.LVL116:
 1137 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccTzhkRm.s 			page 35


 1138              	.LCFI31:
 1139              		.cfi_def_cfa_offset 4
 1140              		.cfi_offset 14, -4
 1141 0002 9BB0     		sub	sp, sp, #108
 1142              	.LCFI32:
 1143              		.cfi_def_cfa_offset 112
 351:Src/main.c    ****     HAL_UART_Transmit(&huart1, echo_pack_str, strlen(echo_pack_str), 100);
 1144              		.loc 1 351 0
 1145 0004 0246     		mov	r2, r0
 1146 0006 0849     		ldr	r1, .L86
 1147 0008 01A8     		add	r0, sp, #4
 1148              	.LVL117:
 1149 000a FFF7FEFF 		bl	sprintf
 1150              	.LVL118:
 352:Src/main.c    **** }
 1151              		.loc 1 352 0
 1152 000e 01A8     		add	r0, sp, #4
 1153 0010 FFF7FEFF 		bl	strlen
 1154              	.LVL119:
 1155 0014 6423     		movs	r3, #100
 1156 0016 82B2     		uxth	r2, r0
 1157 0018 01A9     		add	r1, sp, #4
 1158 001a 0448     		ldr	r0, .L86+4
 1159 001c FFF7FEFF 		bl	HAL_UART_Transmit
 1160              	.LVL120:
 353:Src/main.c    **** 
 1161              		.loc 1 353 0
 1162 0020 1BB0     		add	sp, sp, #108
 1163              	.LCFI33:
 1164              		.cfi_def_cfa_offset 4
 1165              		@ sp needed
 1166 0022 5DF804FB 		ldr	pc, [sp], #4
 1167              	.L87:
 1168 0026 00BF     		.align	2
 1169              	.L86:
 1170 0028 00000000 		.word	.LC11
 1171 002c 00000000 		.word	huart1
 1172              		.cfi_endproc
 1173              	.LFE256:
 1175              		.section	.text.send_message_pack,"ax",%progbits
 1176              		.align	1
 1177              		.global	send_message_pack
 1178              		.syntax unified
 1179              		.thumb
 1180              		.thumb_func
 1181              		.fpu softvfp
 1183              	send_message_pack:
 1184              	.LFB257:
 356:Src/main.c    ****     char message_pack_str[100];
 1185              		.loc 1 356 0
 1186              		.cfi_startproc
 1187              		@ args = 0, pretend = 0, frame = 104
 1188              		@ frame_needed = 0, uses_anonymous_args = 0
 1189              	.LVL121:
 1190 0000 00B5     		push	{lr}
 1191              	.LCFI34:
 1192              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccTzhkRm.s 			page 36


 1193              		.cfi_offset 14, -4
 1194 0002 9BB0     		sub	sp, sp, #108
 1195              	.LCFI35:
 1196              		.cfi_def_cfa_offset 112
 358:Src/main.c    ****     HAL_UART_Transmit(&huart1, message_pack_str, strlen(message_pack_str), 100);
 1197              		.loc 1 358 0
 1198 0004 0246     		mov	r2, r0
 1199 0006 0849     		ldr	r1, .L90
 1200 0008 01A8     		add	r0, sp, #4
 1201              	.LVL122:
 1202 000a FFF7FEFF 		bl	sprintf
 1203              	.LVL123:
 359:Src/main.c    **** }
 1204              		.loc 1 359 0
 1205 000e 01A8     		add	r0, sp, #4
 1206 0010 FFF7FEFF 		bl	strlen
 1207              	.LVL124:
 1208 0014 6423     		movs	r3, #100
 1209 0016 82B2     		uxth	r2, r0
 1210 0018 01A9     		add	r1, sp, #4
 1211 001a 0448     		ldr	r0, .L90+4
 1212 001c FFF7FEFF 		bl	HAL_UART_Transmit
 1213              	.LVL125:
 360:Src/main.c    **** 
 1214              		.loc 1 360 0
 1215 0020 1BB0     		add	sp, sp, #108
 1216              	.LCFI36:
 1217              		.cfi_def_cfa_offset 4
 1218              		@ sp needed
 1219 0022 5DF804FB 		ldr	pc, [sp], #4
 1220              	.L91:
 1221 0026 00BF     		.align	2
 1222              	.L90:
 1223 0028 00000000 		.word	.LC12
 1224 002c 00000000 		.word	huart1
 1225              		.cfi_endproc
 1226              	.LFE257:
 1228              		.section	.text.Error_Handler,"ax",%progbits
 1229              		.align	1
 1230              		.global	Error_Handler
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu softvfp
 1236              	Error_Handler:
 1237              	.LFB267:
 734:Src/main.c    **** 
 735:Src/main.c    **** /* USER CODE BEGIN 4 */
 736:Src/main.c    **** 
 737:Src/main.c    **** /* USER CODE END 4 */
 738:Src/main.c    **** 
 739:Src/main.c    **** /**
 740:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 741:Src/main.c    ****   * @retval None
 742:Src/main.c    ****   */
 743:Src/main.c    **** void Error_Handler(void)
 744:Src/main.c    **** {
ARM GAS  /tmp/ccTzhkRm.s 			page 37


 1238              		.loc 1 744 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242 0000 08B5     		push	{r3, lr}
 1243              	.LCFI37:
 1244              		.cfi_def_cfa_offset 8
 1245              		.cfi_offset 3, -8
 1246              		.cfi_offset 14, -4
 745:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 746:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 747:Src/main.c    ****   error_alert("HAL Error_Handler call");
 1247              		.loc 1 747 0
 1248 0002 0248     		ldr	r0, .L94
 1249 0004 FFF7FEFF 		bl	error_alert
 1250              	.LVL126:
 1251 0008 08BD     		pop	{r3, pc}
 1252              	.L95:
 1253 000a 00BF     		.align	2
 1254              	.L94:
 1255 000c 00000000 		.word	.LC13
 1256              		.cfi_endproc
 1257              	.LFE267:
 1259              		.section	.text.MX_I2C2_Init,"ax",%progbits
 1260              		.align	1
 1261              		.syntax unified
 1262              		.thumb
 1263              		.thumb_func
 1264              		.fpu softvfp
 1266              	MX_I2C2_Init:
 1267              	.LFB260:
 466:Src/main.c    **** 
 1268              		.loc 1 466 0
 1269              		.cfi_startproc
 1270              		@ args = 0, pretend = 0, frame = 0
 1271              		@ frame_needed = 0, uses_anonymous_args = 0
 1272 0000 08B5     		push	{r3, lr}
 1273              	.LCFI38:
 1274              		.cfi_def_cfa_offset 8
 1275              		.cfi_offset 3, -8
 1276              		.cfi_offset 14, -4
 475:Src/main.c    ****   hi2c2.Init.ClockSpeed = 400000;
 1277              		.loc 1 475 0
 1278 0002 0B48     		ldr	r0, .L100
 1279 0004 0B4B     		ldr	r3, .L100+4
 1280 0006 0360     		str	r3, [r0]
 476:Src/main.c    ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1281              		.loc 1 476 0
 1282 0008 0B4B     		ldr	r3, .L100+8
 1283 000a 4360     		str	r3, [r0, #4]
 477:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 1284              		.loc 1 477 0
 1285 000c 0023     		movs	r3, #0
 1286 000e 8360     		str	r3, [r0, #8]
 478:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1287              		.loc 1 478 0
 1288 0010 C360     		str	r3, [r0, #12]
ARM GAS  /tmp/ccTzhkRm.s 			page 38


 479:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1289              		.loc 1 479 0
 1290 0012 4FF48042 		mov	r2, #16384
 1291 0016 0261     		str	r2, [r0, #16]
 480:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 1292              		.loc 1 480 0
 1293 0018 4361     		str	r3, [r0, #20]
 481:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1294              		.loc 1 481 0
 1295 001a 8361     		str	r3, [r0, #24]
 482:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1296              		.loc 1 482 0
 1297 001c C361     		str	r3, [r0, #28]
 483:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1298              		.loc 1 483 0
 1299 001e 0362     		str	r3, [r0, #32]
 484:Src/main.c    ****   {
 1300              		.loc 1 484 0
 1301 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1302              	.LVL127:
 1303 0024 00B9     		cbnz	r0, .L99
 1304              	.L96:
 1305 0026 08BD     		pop	{r3, pc}
 1306              	.L99:
 486:Src/main.c    ****   }
 1307              		.loc 1 486 0
 1308 0028 FFF7FEFF 		bl	Error_Handler
 1309              	.LVL128:
 492:Src/main.c    **** 
 1310              		.loc 1 492 0
 1311 002c FBE7     		b	.L96
 1312              	.L101:
 1313 002e 00BF     		.align	2
 1314              	.L100:
 1315 0030 00000000 		.word	hi2c2
 1316 0034 00580040 		.word	1073764352
 1317 0038 801A0600 		.word	400000
 1318              		.cfi_endproc
 1319              	.LFE260:
 1321              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1322              		.align	1
 1323              		.syntax unified
 1324              		.thumb
 1325              		.thumb_func
 1326              		.fpu softvfp
 1328              	MX_TIM2_Init:
 1329              	.LFB262:
 530:Src/main.c    **** 
 1330              		.loc 1 530 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 24
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334 0000 00B5     		push	{lr}
 1335              	.LCFI39:
 1336              		.cfi_def_cfa_offset 4
 1337              		.cfi_offset 14, -4
 1338 0002 87B0     		sub	sp, sp, #28
ARM GAS  /tmp/ccTzhkRm.s 			page 39


 1339              	.LCFI40:
 1340              		.cfi_def_cfa_offset 32
 536:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1341              		.loc 1 536 0
 1342 0004 0023     		movs	r3, #0
 1343 0006 0293     		str	r3, [sp, #8]
 1344 0008 0393     		str	r3, [sp, #12]
 1345 000a 0493     		str	r3, [sp, #16]
 1346 000c 0593     		str	r3, [sp, #20]
 537:Src/main.c    **** 
 1347              		.loc 1 537 0
 1348 000e 0093     		str	r3, [sp]
 1349 0010 0193     		str	r3, [sp, #4]
 542:Src/main.c    ****   htim2.Init.Prescaler = 9000;
 1350              		.loc 1 542 0
 1351 0012 1648     		ldr	r0, .L110
 1352 0014 4FF08042 		mov	r2, #1073741824
 1353 0018 0260     		str	r2, [r0]
 543:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1354              		.loc 1 543 0
 1355 001a 42F22832 		movw	r2, #9000
 1356 001e 4260     		str	r2, [r0, #4]
 544:Src/main.c    ****   htim2.Init.Period = 60;
 1357              		.loc 1 544 0
 1358 0020 8360     		str	r3, [r0, #8]
 545:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1359              		.loc 1 545 0
 1360 0022 3C22     		movs	r2, #60
 1361 0024 C260     		str	r2, [r0, #12]
 546:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1362              		.loc 1 546 0
 1363 0026 0361     		str	r3, [r0, #16]
 547:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1364              		.loc 1 547 0
 1365 0028 8361     		str	r3, [r0, #24]
 548:Src/main.c    ****   {
 1366              		.loc 1 548 0
 1367 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1368              	.LVL129:
 1369 002e 98B9     		cbnz	r0, .L107
 1370              	.L103:
 552:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1371              		.loc 1 552 0
 1372 0030 06A9     		add	r1, sp, #24
 1373 0032 4FF48053 		mov	r3, #4096
 1374 0036 41F8103D 		str	r3, [r1, #-16]!
 553:Src/main.c    ****   {
 1375              		.loc 1 553 0
 1376 003a 0C48     		ldr	r0, .L110
 1377 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1378              	.LVL130:
 1379 0040 68B9     		cbnz	r0, .L108
 1380              	.L104:
 557:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1381              		.loc 1 557 0
 1382 0042 0023     		movs	r3, #0
 1383 0044 0093     		str	r3, [sp]
ARM GAS  /tmp/ccTzhkRm.s 			page 40


 558:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1384              		.loc 1 558 0
 1385 0046 0193     		str	r3, [sp, #4]
 559:Src/main.c    ****   {
 1386              		.loc 1 559 0
 1387 0048 6946     		mov	r1, sp
 1388 004a 0848     		ldr	r0, .L110
 1389 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1390              	.LVL131:
 1391 0050 40B9     		cbnz	r0, .L109
 1392              	.L102:
 567:Src/main.c    **** 
 1393              		.loc 1 567 0
 1394 0052 07B0     		add	sp, sp, #28
 1395              	.LCFI41:
 1396              		.cfi_remember_state
 1397              		.cfi_def_cfa_offset 4
 1398              		@ sp needed
 1399 0054 5DF804FB 		ldr	pc, [sp], #4
 1400              	.L107:
 1401              	.LCFI42:
 1402              		.cfi_restore_state
 550:Src/main.c    ****   }
 1403              		.loc 1 550 0
 1404 0058 FFF7FEFF 		bl	Error_Handler
 1405              	.LVL132:
 1406 005c E8E7     		b	.L103
 1407              	.L108:
 555:Src/main.c    ****   }
 1408              		.loc 1 555 0
 1409 005e FFF7FEFF 		bl	Error_Handler
 1410              	.LVL133:
 1411 0062 EEE7     		b	.L104
 1412              	.L109:
 561:Src/main.c    ****   }
 1413              		.loc 1 561 0
 1414 0064 FFF7FEFF 		bl	Error_Handler
 1415              	.LVL134:
 567:Src/main.c    **** 
 1416              		.loc 1 567 0
 1417 0068 F3E7     		b	.L102
 1418              	.L111:
 1419 006a 00BF     		.align	2
 1420              	.L110:
 1421 006c 00000000 		.word	htim2
 1422              		.cfi_endproc
 1423              	.LFE262:
 1425              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1426              		.align	1
 1427              		.syntax unified
 1428              		.thumb
 1429              		.thumb_func
 1430              		.fpu softvfp
 1432              	MX_TIM3_Init:
 1433              	.LFB263:
 575:Src/main.c    **** 
 1434              		.loc 1 575 0
ARM GAS  /tmp/ccTzhkRm.s 			page 41


 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 56
 1437              		@ frame_needed = 0, uses_anonymous_args = 0
 1438 0000 00B5     		push	{lr}
 1439              	.LCFI43:
 1440              		.cfi_def_cfa_offset 4
 1441              		.cfi_offset 14, -4
 1442 0002 8FB0     		sub	sp, sp, #60
 1443              	.LCFI44:
 1444              		.cfi_def_cfa_offset 64
 581:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1445              		.loc 1 581 0
 1446 0004 0023     		movs	r3, #0
 1447 0006 0A93     		str	r3, [sp, #40]
 1448 0008 0B93     		str	r3, [sp, #44]
 1449 000a 0C93     		str	r3, [sp, #48]
 1450 000c 0D93     		str	r3, [sp, #52]
 582:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1451              		.loc 1 582 0
 1452 000e 0893     		str	r3, [sp, #32]
 1453 0010 0993     		str	r3, [sp, #36]
 583:Src/main.c    **** 
 1454              		.loc 1 583 0
 1455 0012 0193     		str	r3, [sp, #4]
 1456 0014 0293     		str	r3, [sp, #8]
 1457 0016 0393     		str	r3, [sp, #12]
 1458 0018 0493     		str	r3, [sp, #16]
 1459 001a 0593     		str	r3, [sp, #20]
 1460 001c 0693     		str	r3, [sp, #24]
 1461 001e 0793     		str	r3, [sp, #28]
 588:Src/main.c    ****   htim3.Init.Prescaler = 16;
 1462              		.loc 1 588 0
 1463 0020 2648     		ldr	r0, .L126
 1464 0022 274A     		ldr	r2, .L126+4
 1465 0024 0260     		str	r2, [r0]
 589:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1466              		.loc 1 589 0
 1467 0026 1022     		movs	r2, #16
 1468 0028 4260     		str	r2, [r0, #4]
 590:Src/main.c    ****   htim3.Init.Period = 10000;
 1469              		.loc 1 590 0
 1470 002a 8360     		str	r3, [r0, #8]
 591:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1471              		.loc 1 591 0
 1472 002c 42F21072 		movw	r2, #10000
 1473 0030 C260     		str	r2, [r0, #12]
 592:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1474              		.loc 1 592 0
 1475 0032 0361     		str	r3, [r0, #16]
 593:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1476              		.loc 1 593 0
 1477 0034 8361     		str	r3, [r0, #24]
 594:Src/main.c    ****   {
 1478              		.loc 1 594 0
 1479 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1480              	.LVL135:
 1481 003a 60BB     		cbnz	r0, .L120
ARM GAS  /tmp/ccTzhkRm.s 			page 42


 1482              	.L113:
 598:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1483              		.loc 1 598 0
 1484 003c 0EA9     		add	r1, sp, #56
 1485 003e 4FF48053 		mov	r3, #4096
 1486 0042 41F8103D 		str	r3, [r1, #-16]!
 599:Src/main.c    ****   {
 1487              		.loc 1 599 0
 1488 0046 1D48     		ldr	r0, .L126
 1489 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1490              	.LVL136:
 1491 004c 30BB     		cbnz	r0, .L121
 1492              	.L114:
 603:Src/main.c    ****   {
 1493              		.loc 1 603 0
 1494 004e 1B48     		ldr	r0, .L126
 1495 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1496              	.LVL137:
 1497 0054 28BB     		cbnz	r0, .L122
 1498              	.L115:
 607:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1499              		.loc 1 607 0
 1500 0056 0023     		movs	r3, #0
 1501 0058 0893     		str	r3, [sp, #32]
 608:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1502              		.loc 1 608 0
 1503 005a 0993     		str	r3, [sp, #36]
 609:Src/main.c    ****   {
 1504              		.loc 1 609 0
 1505 005c 08A9     		add	r1, sp, #32
 1506 005e 1748     		ldr	r0, .L126
 1507 0060 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1508              	.LVL138:
 1509 0064 00BB     		cbnz	r0, .L123
 1510              	.L116:
 613:Src/main.c    ****   sConfigOC.Pulse = 0;
 1511              		.loc 1 613 0
 1512 0066 6023     		movs	r3, #96
 1513 0068 0193     		str	r3, [sp, #4]
 614:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1514              		.loc 1 614 0
 1515 006a 0022     		movs	r2, #0
 1516 006c 0292     		str	r2, [sp, #8]
 615:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1517              		.loc 1 615 0
 1518 006e 0392     		str	r2, [sp, #12]
 616:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1519              		.loc 1 616 0
 1520 0070 0592     		str	r2, [sp, #20]
 617:Src/main.c    ****   {
 1521              		.loc 1 617 0
 1522 0072 01A9     		add	r1, sp, #4
 1523 0074 1148     		ldr	r0, .L126
 1524 0076 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1525              	.LVL139:
 1526 007a C0B9     		cbnz	r0, .L124
 1527              	.L117:
ARM GAS  /tmp/ccTzhkRm.s 			page 43


 621:Src/main.c    ****   {
 1528              		.loc 1 621 0
 1529 007c 0422     		movs	r2, #4
 1530 007e 0DEB0201 		add	r1, sp, r2
 1531 0082 0E48     		ldr	r0, .L126
 1532 0084 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1533              	.LVL140:
 1534 0088 A0B9     		cbnz	r0, .L125
 1535              	.L118:
 628:Src/main.c    **** 
 1536              		.loc 1 628 0
 1537 008a 0C48     		ldr	r0, .L126
 1538 008c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1539              	.LVL141:
 630:Src/main.c    **** 
 1540              		.loc 1 630 0
 1541 0090 0FB0     		add	sp, sp, #60
 1542              	.LCFI45:
 1543              		.cfi_remember_state
 1544              		.cfi_def_cfa_offset 4
 1545              		@ sp needed
 1546 0092 5DF804FB 		ldr	pc, [sp], #4
 1547              	.L120:
 1548              	.LCFI46:
 1549              		.cfi_restore_state
 596:Src/main.c    ****   }
 1550              		.loc 1 596 0
 1551 0096 FFF7FEFF 		bl	Error_Handler
 1552              	.LVL142:
 1553 009a CFE7     		b	.L113
 1554              	.L121:
 601:Src/main.c    ****   }
 1555              		.loc 1 601 0
 1556 009c FFF7FEFF 		bl	Error_Handler
 1557              	.LVL143:
 1558 00a0 D5E7     		b	.L114
 1559              	.L122:
 605:Src/main.c    ****   }
 1560              		.loc 1 605 0
 1561 00a2 FFF7FEFF 		bl	Error_Handler
 1562              	.LVL144:
 1563 00a6 D6E7     		b	.L115
 1564              	.L123:
 611:Src/main.c    ****   }
 1565              		.loc 1 611 0
 1566 00a8 FFF7FEFF 		bl	Error_Handler
 1567              	.LVL145:
 1568 00ac DBE7     		b	.L116
 1569              	.L124:
 619:Src/main.c    ****   }
 1570              		.loc 1 619 0
 1571 00ae FFF7FEFF 		bl	Error_Handler
 1572              	.LVL146:
 1573 00b2 E3E7     		b	.L117
 1574              	.L125:
 623:Src/main.c    ****   }
 1575              		.loc 1 623 0
ARM GAS  /tmp/ccTzhkRm.s 			page 44


 1576 00b4 FFF7FEFF 		bl	Error_Handler
 1577              	.LVL147:
 1578 00b8 E7E7     		b	.L118
 1579              	.L127:
 1580 00ba 00BF     		.align	2
 1581              	.L126:
 1582 00bc 00000000 		.word	htim3
 1583 00c0 00040040 		.word	1073742848
 1584              		.cfi_endproc
 1585              	.LFE263:
 1587              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1588              		.align	1
 1589              		.syntax unified
 1590              		.thumb
 1591              		.thumb_func
 1592              		.fpu softvfp
 1594              	MX_USART1_UART_Init:
 1595              	.LFB265:
 683:Src/main.c    **** 
 1596              		.loc 1 683 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 0
 1599              		@ frame_needed = 0, uses_anonymous_args = 0
 1600 0000 08B5     		push	{r3, lr}
 1601              	.LCFI47:
 1602              		.cfi_def_cfa_offset 8
 1603              		.cfi_offset 3, -8
 1604              		.cfi_offset 14, -4
 692:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 1605              		.loc 1 692 0
 1606 0002 0B48     		ldr	r0, .L132
 1607 0004 0B4B     		ldr	r3, .L132+4
 1608 0006 0360     		str	r3, [r0]
 693:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1609              		.loc 1 693 0
 1610 0008 4FF4E133 		mov	r3, #115200
 1611 000c 4360     		str	r3, [r0, #4]
 694:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1612              		.loc 1 694 0
 1613 000e 0021     		movs	r1, #0
 1614 0010 8160     		str	r1, [r0, #8]
 695:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 1615              		.loc 1 695 0
 1616 0012 C160     		str	r1, [r0, #12]
 696:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1617              		.loc 1 696 0
 1618 0014 0161     		str	r1, [r0, #16]
 697:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1619              		.loc 1 697 0
 1620 0016 0C23     		movs	r3, #12
 1621 0018 4361     		str	r3, [r0, #20]
 698:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1622              		.loc 1 698 0
 1623 001a 8161     		str	r1, [r0, #24]
 699:Src/main.c    ****   if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 1624              		.loc 1 699 0
 1625 001c C161     		str	r1, [r0, #28]
ARM GAS  /tmp/ccTzhkRm.s 			page 45


 700:Src/main.c    ****   {
 1626              		.loc 1 700 0
 1627 001e 0A46     		mov	r2, r1
 1628 0020 FFF7FEFF 		bl	HAL_MultiProcessor_Init
 1629              	.LVL148:
 1630 0024 00B9     		cbnz	r0, .L131
 1631              	.L128:
 1632 0026 08BD     		pop	{r3, pc}
 1633              	.L131:
 702:Src/main.c    ****   }
 1634              		.loc 1 702 0
 1635 0028 FFF7FEFF 		bl	Error_Handler
 1636              	.LVL149:
 708:Src/main.c    **** 
 1637              		.loc 1 708 0
 1638 002c FBE7     		b	.L128
 1639              	.L133:
 1640 002e 00BF     		.align	2
 1641              	.L132:
 1642 0030 00000000 		.word	huart1
 1643 0034 00380140 		.word	1073821696
 1644              		.cfi_endproc
 1645              	.LFE265:
 1647              		.section	.text.MX_RTC_Init,"ax",%progbits
 1648              		.align	1
 1649              		.syntax unified
 1650              		.thumb
 1651              		.thumb_func
 1652              		.fpu softvfp
 1654              	MX_RTC_Init:
 1655              	.LFB261:
 500:Src/main.c    **** 
 1656              		.loc 1 500 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 0
 1659              		@ frame_needed = 0, uses_anonymous_args = 0
 1660 0000 08B5     		push	{r3, lr}
 1661              	.LCFI48:
 1662              		.cfi_def_cfa_offset 8
 1663              		.cfi_offset 3, -8
 1664              		.cfi_offset 14, -4
 511:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 1665              		.loc 1 511 0
 1666 0002 0848     		ldr	r0, .L138
 1667 0004 084B     		ldr	r3, .L138+4
 1668 0006 0360     		str	r3, [r0]
 512:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 1669              		.loc 1 512 0
 1670 0008 4FF0FF33 		mov	r3, #-1
 1671 000c 4360     		str	r3, [r0, #4]
 513:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 1672              		.loc 1 513 0
 1673 000e 4FF48073 		mov	r3, #256
 1674 0012 8360     		str	r3, [r0, #8]
 514:Src/main.c    ****   {
 1675              		.loc 1 514 0
 1676 0014 FFF7FEFF 		bl	HAL_RTC_Init
ARM GAS  /tmp/ccTzhkRm.s 			page 46


 1677              	.LVL150:
 1678 0018 00B9     		cbnz	r0, .L137
 1679              	.L134:
 1680 001a 08BD     		pop	{r3, pc}
 1681              	.L137:
 516:Src/main.c    ****   }
 1682              		.loc 1 516 0
 1683 001c FFF7FEFF 		bl	Error_Handler
 1684              	.LVL151:
 522:Src/main.c    **** 
 1685              		.loc 1 522 0
 1686 0020 FBE7     		b	.L134
 1687              	.L139:
 1688 0022 00BF     		.align	2
 1689              	.L138:
 1690 0024 00000000 		.word	hrtc
 1691 0028 00280040 		.word	1073752064
 1692              		.cfi_endproc
 1693              	.LFE261:
 1695              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1696              		.align	1
 1697              		.syntax unified
 1698              		.thumb
 1699              		.thumb_func
 1700              		.fpu softvfp
 1702              	MX_TIM4_Init:
 1703              	.LFB264:
 638:Src/main.c    **** 
 1704              		.loc 1 638 0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 24
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708 0000 00B5     		push	{lr}
 1709              	.LCFI49:
 1710              		.cfi_def_cfa_offset 4
 1711              		.cfi_offset 14, -4
 1712 0002 87B0     		sub	sp, sp, #28
 1713              	.LCFI50:
 1714              		.cfi_def_cfa_offset 32
 644:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1715              		.loc 1 644 0
 1716 0004 0023     		movs	r3, #0
 1717 0006 0293     		str	r3, [sp, #8]
 1718 0008 0393     		str	r3, [sp, #12]
 1719 000a 0493     		str	r3, [sp, #16]
 1720 000c 0593     		str	r3, [sp, #20]
 645:Src/main.c    **** 
 1721              		.loc 1 645 0
 1722 000e 0093     		str	r3, [sp]
 1723 0010 0193     		str	r3, [sp, #4]
 650:Src/main.c    ****   htim4.Init.Prescaler = 8;
 1724              		.loc 1 650 0
 1725 0012 1548     		ldr	r0, .L148
 1726 0014 154A     		ldr	r2, .L148+4
 1727 0016 0260     		str	r2, [r0]
 651:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1728              		.loc 1 651 0
ARM GAS  /tmp/ccTzhkRm.s 			page 47


 1729 0018 0822     		movs	r2, #8
 1730 001a 4260     		str	r2, [r0, #4]
 652:Src/main.c    ****   htim4.Init.Period = 5000;
 1731              		.loc 1 652 0
 1732 001c 8360     		str	r3, [r0, #8]
 653:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1733              		.loc 1 653 0
 1734 001e 41F28832 		movw	r2, #5000
 1735 0022 C260     		str	r2, [r0, #12]
 654:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1736              		.loc 1 654 0
 1737 0024 0361     		str	r3, [r0, #16]
 655:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 1738              		.loc 1 655 0
 1739 0026 8361     		str	r3, [r0, #24]
 656:Src/main.c    ****   {
 1740              		.loc 1 656 0
 1741 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1742              	.LVL152:
 1743 002c 98B9     		cbnz	r0, .L145
 1744              	.L141:
 660:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 1745              		.loc 1 660 0
 1746 002e 06A9     		add	r1, sp, #24
 1747 0030 4FF48053 		mov	r3, #4096
 1748 0034 41F8103D 		str	r3, [r1, #-16]!
 661:Src/main.c    ****   {
 1749              		.loc 1 661 0
 1750 0038 0B48     		ldr	r0, .L148
 1751 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1752              	.LVL153:
 1753 003e 68B9     		cbnz	r0, .L146
 1754              	.L142:
 665:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1755              		.loc 1 665 0
 1756 0040 0023     		movs	r3, #0
 1757 0042 0093     		str	r3, [sp]
 666:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 1758              		.loc 1 666 0
 1759 0044 0193     		str	r3, [sp, #4]
 667:Src/main.c    ****   {
 1760              		.loc 1 667 0
 1761 0046 6946     		mov	r1, sp
 1762 0048 0748     		ldr	r0, .L148
 1763 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1764              	.LVL154:
 1765 004e 40B9     		cbnz	r0, .L147
 1766              	.L140:
 675:Src/main.c    **** 
 1767              		.loc 1 675 0
 1768 0050 07B0     		add	sp, sp, #28
 1769              	.LCFI51:
 1770              		.cfi_remember_state
 1771              		.cfi_def_cfa_offset 4
 1772              		@ sp needed
 1773 0052 5DF804FB 		ldr	pc, [sp], #4
 1774              	.L145:
ARM GAS  /tmp/ccTzhkRm.s 			page 48


 1775              	.LCFI52:
 1776              		.cfi_restore_state
 658:Src/main.c    ****   }
 1777              		.loc 1 658 0
 1778 0056 FFF7FEFF 		bl	Error_Handler
 1779              	.LVL155:
 1780 005a E8E7     		b	.L141
 1781              	.L146:
 663:Src/main.c    ****   }
 1782              		.loc 1 663 0
 1783 005c FFF7FEFF 		bl	Error_Handler
 1784              	.LVL156:
 1785 0060 EEE7     		b	.L142
 1786              	.L147:
 669:Src/main.c    ****   }
 1787              		.loc 1 669 0
 1788 0062 FFF7FEFF 		bl	Error_Handler
 1789              	.LVL157:
 675:Src/main.c    **** 
 1790              		.loc 1 675 0
 1791 0066 F3E7     		b	.L140
 1792              	.L149:
 1793              		.align	2
 1794              	.L148:
 1795 0068 00000000 		.word	htim4
 1796 006c 00080040 		.word	1073743872
 1797              		.cfi_endproc
 1798              	.LFE264:
 1800              		.section	.text.SystemClock_Config,"ax",%progbits
 1801              		.align	1
 1802              		.global	SystemClock_Config
 1803              		.syntax unified
 1804              		.thumb
 1805              		.thumb_func
 1806              		.fpu softvfp
 1808              	SystemClock_Config:
 1809              	.LFB259:
 421:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1810              		.loc 1 421 0
 1811              		.cfi_startproc
 1812              		@ args = 0, pretend = 0, frame = 80
 1813              		@ frame_needed = 0, uses_anonymous_args = 0
 1814 0000 00B5     		push	{lr}
 1815              	.LCFI53:
 1816              		.cfi_def_cfa_offset 4
 1817              		.cfi_offset 14, -4
 1818 0002 95B0     		sub	sp, sp, #84
 1819              	.LCFI54:
 1820              		.cfi_def_cfa_offset 88
 422:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1821              		.loc 1 422 0
 1822 0004 2822     		movs	r2, #40
 1823 0006 0021     		movs	r1, #0
 1824 0008 0DEB0200 		add	r0, sp, r2
 1825 000c FFF7FEFF 		bl	memset
 1826              	.LVL158:
 423:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
ARM GAS  /tmp/ccTzhkRm.s 			page 49


 1827              		.loc 1 423 0
 1828 0010 0023     		movs	r3, #0
 1829 0012 0593     		str	r3, [sp, #20]
 1830 0014 0693     		str	r3, [sp, #24]
 1831 0016 0793     		str	r3, [sp, #28]
 1832 0018 0893     		str	r3, [sp, #32]
 1833 001a 0993     		str	r3, [sp, #36]
 424:Src/main.c    **** 
 1834              		.loc 1 424 0
 1835 001c 0193     		str	r3, [sp, #4]
 1836 001e 0293     		str	r3, [sp, #8]
 1837 0020 0393     		str	r3, [sp, #12]
 1838 0022 0493     		str	r3, [sp, #16]
 428:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1839              		.loc 1 428 0
 1840 0024 0A23     		movs	r3, #10
 1841 0026 0A93     		str	r3, [sp, #40]
 429:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1842              		.loc 1 429 0
 1843 0028 0123     		movs	r3, #1
 1844 002a 0E93     		str	r3, [sp, #56]
 430:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 1845              		.loc 1 430 0
 1846 002c 1022     		movs	r2, #16
 1847 002e 0F92     		str	r2, [sp, #60]
 431:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1848              		.loc 1 431 0
 1849 0030 1093     		str	r3, [sp, #64]
 432:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 1850              		.loc 1 432 0
 1851 0032 0223     		movs	r3, #2
 1852 0034 1193     		str	r3, [sp, #68]
 435:Src/main.c    ****   {
 1853              		.loc 1 435 0
 1854 0036 0AA8     		add	r0, sp, #40
 1855 0038 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1856              	.LVL159:
 1857 003c B8B9     		cbnz	r0, .L155
 1858              	.L151:
 441:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1859              		.loc 1 441 0
 1860 003e 0F23     		movs	r3, #15
 1861 0040 0593     		str	r3, [sp, #20]
 443:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1862              		.loc 1 443 0
 1863 0042 0223     		movs	r3, #2
 1864 0044 0693     		str	r3, [sp, #24]
 444:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1865              		.loc 1 444 0
 1866 0046 0021     		movs	r1, #0
 1867 0048 0791     		str	r1, [sp, #28]
 445:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1868              		.loc 1 445 0
 1869 004a 0891     		str	r1, [sp, #32]
 446:Src/main.c    **** 
 1870              		.loc 1 446 0
 1871 004c 0991     		str	r1, [sp, #36]
ARM GAS  /tmp/ccTzhkRm.s 			page 50


 448:Src/main.c    ****   {
 1872              		.loc 1 448 0
 1873 004e 05A8     		add	r0, sp, #20
 1874 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1875              	.LVL160:
 1876 0054 70B9     		cbnz	r0, .L156
 1877              	.L152:
 452:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 1878              		.loc 1 452 0
 1879 0056 0123     		movs	r3, #1
 1880 0058 0193     		str	r3, [sp, #4]
 453:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1881              		.loc 1 453 0
 1882 005a 4FF40073 		mov	r3, #512
 1883 005e 0293     		str	r3, [sp, #8]
 454:Src/main.c    ****   {
 1884              		.loc 1 454 0
 1885 0060 01A8     		add	r0, sp, #4
 1886 0062 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1887              	.LVL161:
 1888 0066 40B9     		cbnz	r0, .L157
 1889              	.L150:
 458:Src/main.c    **** 
 1890              		.loc 1 458 0
 1891 0068 15B0     		add	sp, sp, #84
 1892              	.LCFI55:
 1893              		.cfi_remember_state
 1894              		.cfi_def_cfa_offset 4
 1895              		@ sp needed
 1896 006a 5DF804FB 		ldr	pc, [sp], #4
 1897              	.L155:
 1898              	.LCFI56:
 1899              		.cfi_restore_state
 437:Src/main.c    ****   }
 1900              		.loc 1 437 0
 1901 006e FFF7FEFF 		bl	Error_Handler
 1902              	.LVL162:
 1903 0072 E4E7     		b	.L151
 1904              	.L156:
 450:Src/main.c    ****   }
 1905              		.loc 1 450 0
 1906 0074 FFF7FEFF 		bl	Error_Handler
 1907              	.LVL163:
 1908 0078 EDE7     		b	.L152
 1909              	.L157:
 456:Src/main.c    ****   }
 1910              		.loc 1 456 0
 1911 007a FFF7FEFF 		bl	Error_Handler
 1912              	.LVL164:
 458:Src/main.c    **** 
 1913              		.loc 1 458 0
 1914 007e F3E7     		b	.L150
 1915              		.cfi_endproc
 1916              	.LFE259:
 1918              		.section	.text.main,"ax",%progbits
 1919              		.align	1
 1920              		.global	main
ARM GAS  /tmp/ccTzhkRm.s 			page 51


 1921              		.syntax unified
 1922              		.thumb
 1923              		.thumb_func
 1924              		.fpu softvfp
 1926              	main:
 1927              	.LFB258:
 369:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1928              		.loc 1 369 0
 1929              		.cfi_startproc
 1930              		@ Volatile: function does not return.
 1931              		@ args = 0, pretend = 0, frame = 0
 1932              		@ frame_needed = 0, uses_anonymous_args = 0
 1933 0000 08B5     		push	{r3, lr}
 1934              	.LCFI57:
 1935              		.cfi_def_cfa_offset 8
 1936              		.cfi_offset 3, -8
 1937              		.cfi_offset 14, -4
 378:Src/main.c    **** 
 1938              		.loc 1 378 0
 1939 0002 FFF7FEFF 		bl	HAL_Init
 1940              	.LVL165:
 385:Src/main.c    **** 
 1941              		.loc 1 385 0
 1942 0006 FFF7FEFF 		bl	SystemClock_Config
 1943              	.LVL166:
 392:Src/main.c    ****   MX_I2C2_Init();
 1944              		.loc 1 392 0
 1945 000a FFF7FEFF 		bl	MX_GPIO_Init
 1946              	.LVL167:
 393:Src/main.c    ****   MX_TIM2_Init();
 1947              		.loc 1 393 0
 1948 000e FFF7FEFF 		bl	MX_I2C2_Init
 1949              	.LVL168:
 394:Src/main.c    ****   MX_TIM3_Init();
 1950              		.loc 1 394 0
 1951 0012 FFF7FEFF 		bl	MX_TIM2_Init
 1952              	.LVL169:
 395:Src/main.c    ****   MX_USART1_UART_Init();
 1953              		.loc 1 395 0
 1954 0016 FFF7FEFF 		bl	MX_TIM3_Init
 1955              	.LVL170:
 396:Src/main.c    ****   MX_RTC_Init();
 1956              		.loc 1 396 0
 1957 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 1958              	.LVL171:
 397:Src/main.c    ****   MX_TIM4_Init();
 1959              		.loc 1 397 0
 1960 001e FFF7FEFF 		bl	MX_RTC_Init
 1961              	.LVL172:
 398:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1962              		.loc 1 398 0
 1963 0022 FFF7FEFF 		bl	MX_TIM4_Init
 1964              	.LVL173:
 401:Src/main.c    **** 
 1965              		.loc 1 401 0
 1966 0026 FFF7FEFF 		bl	init_system
 1967              	.LVL174:
ARM GAS  /tmp/ccTzhkRm.s 			page 52


 1968              	.L159:
 410:Src/main.c    ****     /* USER CODE BEGIN 3 */
 1969              		.loc 1 410 0 discriminator 1
 1970              		.syntax unified
 1971              	@ 410 "Src/main.c" 1
 1972 002a 30BF     		WFI
 1973              	@ 0 "" 2
 1974              		.thumb
 1975              		.syntax unified
 1976 002c FDE7     		b	.L159
 1977              		.cfi_endproc
 1978              	.LFE258:
 1980              		.comm	pitch_filter,28,4
 1981              		.comm	roll_filter,28,4
 1982              		.comm	servo_pitch,20,4
 1983              		.comm	servo_roll,20,4
 1984              		.comm	smoothing,4,4
 1985              		.comm	pitch_compensation,4,4
 1986              		.comm	roll_compensation,4,4
 1987              		.comm	sensor_factor,4,4
 1988              		.comm	sensor_pitch,4,4
 1989              		.comm	sensor_roll,4,4
 1990              		.comm	position_sensor,28,4
 1991              		.comm	huart1,64,4
 1992              		.comm	htim4,64,4
 1993              		.comm	htim3,64,4
 1994              		.comm	htim2,64,4
 1995              		.comm	hrtc,20,4
 1996              		.comm	hi2c2,84,4
 1997              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 1998              		.align	2
 1999              	.LC13:
 2000 0000 48414C20 		.ascii	"HAL Error_Handler call\000"
 2000      4572726F 
 2000      725F4861 
 2000      6E646C65 
 2000      72206361 
 2001              		.section	.rodata.error_alert.str1.4,"aMS",%progbits,1
 2002              		.align	2
 2003              	.LC0:
 2004 0000 7B227479 		.ascii	"{\"type\":\"error\",\"text\":\"%s\"}\012\015\000"
 2004      7065223A 
 2004      22657272 
 2004      6F72222C 
 2004      22746578 
 2005              		.section	.rodata.init_position_sensor.str1.4,"aMS",%progbits,1
 2006              		.align	2
 2007              	.LC4:
 2008 0000 43616E6E 		.ascii	"Cannot init MPU6050\000"
 2008      6F742069 
 2008      6E697420 
 2008      4D505536 
 2008      30353000 
 2009              		.section	.rodata.init_servomotors.str1.4,"aMS",%progbits,1
 2010              		.align	2
 2011              	.LC1:
 2012 0000 43616E6E 		.ascii	"Cannot init servo_roll\000"
ARM GAS  /tmp/ccTzhkRm.s 			page 53


 2012      6F742069 
 2012      6E697420 
 2012      73657276 
 2012      6F5F726F 
 2013 0017 00       		.space	1
 2014              	.LC2:
 2015 0018 43616E6E 		.ascii	"Cannot init servo_pitch\000"
 2015      6F742069 
 2015      6E697420 
 2015      73657276 
 2015      6F5F7069 
 2016              		.section	.rodata.init_system.str1.4,"aMS",%progbits,1
 2017              		.align	2
 2018              	.LC6:
 2019 0000 43616E6E 		.ascii	"Cannot init MAF\000"
 2019      6F742069 
 2019      6E697420 
 2019      4D414600 
 2020              		.section	.rodata.send_angle_pack.str1.4,"aMS",%progbits,1
 2021              		.align	2
 2022              	.LC9:
 2023 0000 7B227479 		.ascii	"{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d, \"tar"
 2023      7065223A 
 2023      22616E67 
 2023      6C65222C 
 2023      22706974 
 2024 002a 67657422 		.ascii	"get\":\"sensor\"}\012\000"
 2024      3A227365 
 2024      6E736F72 
 2024      227D0A00 
 2025 003a 0000     		.space	2
 2026              	.LC10:
 2027 003c 7B227479 		.ascii	"{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d, \"tar"
 2027      7065223A 
 2027      22616E67 
 2027      6C65222C 
 2027      22706974 
 2028 0066 67657422 		.ascii	"get\":\"servo\"}\012\000"
 2028      3A227365 
 2028      72766F22 
 2028      7D0A00
 2029              		.section	.rodata.send_echo_pack.str1.4,"aMS",%progbits,1
 2030              		.align	2
 2031              	.LC11:
 2032 0000 7B227479 		.ascii	"{\"type\":\"echo\",\"text\":\"%s\"}\012\000"
 2032      7065223A 
 2032      22656368 
 2032      6F222C22 
 2032      74657874 
 2033              		.section	.rodata.send_message_pack.str1.4,"aMS",%progbits,1
 2034              		.align	2
 2035              	.LC12:
 2036 0000 7B227479 		.ascii	"{\"type\":\"message\",\"text\":\"%s\"}\012\000"
 2036      7065223A 
 2036      226D6573 
 2036      73616765 
 2036      222C2274 
ARM GAS  /tmp/ccTzhkRm.s 			page 54


 2037              		.section	.rodata.send_value_pack.str1.4,"aMS",%progbits,1
 2038              		.align	2
 2039              	.LC7:
 2040 0000 7B227479 		.ascii	"{\"type\":\"value\", \"target\",\"smoothing\", \"va"
 2040      7065223A 
 2040      2276616C 
 2040      7565222C 
 2040      20227461 
 2041 002a 6C756522 		.ascii	"lue\":%s}\012\000"
 2041      3A25737D 
 2041      0A00
 2042              	.LC8:
 2043 0034 7B227479 		.ascii	"{\"type\":\"value\", \"target\",\"factor\", \"value"
 2043      7065223A 
 2043      2276616C 
 2043      7565222C 
 2043      20227461 
 2044 005e 223A2573 		.ascii	"\":%s}\012\000"
 2044      7D0A00
 2045              		.section	.rodata.test_sensor.str1.4,"aMS",%progbits,1
 2046              		.align	2
 2047              	.LC3:
 2048 0000 4D505536 		.ascii	"MPU6050 connection fail\000"
 2048      30353020 
 2048      636F6E6E 
 2048      65637469 
 2048      6F6E2066 
 2049              		.section	.rodata.update_position_sensor.str1.4,"aMS",%progbits,1
 2050              		.align	2
 2051              	.LC5:
 2052 0000 43616E6E 		.ascii	"Cannot read MPU6050 Read Acce\000"
 2052      6F742072 
 2052      65616420 
 2052      4D505536 
 2052      30353020 
 2053              		.text
 2054              	.Letext0:
 2055              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2056              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2057              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 2058              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2059              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2060              		.file 7 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2061              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2062              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2063              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2064              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2065              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2066              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 2067              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 2068              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2069              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 2070              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2071              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h"
 2072              		.file 19 "Inc/main.h"
 2073              		.file 20 "/usr/include/newlib/sys/lock.h"
 2074              		.file 21 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/ccTzhkRm.s 			page 55


 2075              		.file 22 "/usr/include/newlib/sys/reent.h"
 2076              		.file 23 "/usr/include/newlib/math.h"
 2077              		.file 24 "stm32-servomotor/servomotor.h"
 2078              		.file 25 "stm32-mpu6050/mpu6050.h"
 2079              		.file 26 "/usr/include/newlib/stdlib.h"
 2080              		.file 27 "signals/c/moving-average/moving_average.h"
 2081              		.file 28 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2082              		.file 29 "/usr/include/newlib/stdio.h"
 2083              		.file 30 "/usr/include/newlib/string.h"
 2084              		.file 31 "Inc/float_to_string.h"
 2085              		.file 32 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccTzhkRm.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccTzhkRm.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccTzhkRm.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccTzhkRm.s:97     .text.MX_GPIO_Init:000000000000005c $d
     /tmp/ccTzhkRm.s:103    .text.error_alert:0000000000000000 $t
     /tmp/ccTzhkRm.s:110    .text.error_alert:0000000000000000 error_alert
     /tmp/ccTzhkRm.s:182    .text.error_alert:0000000000000054 $d
                            *COM*:0000000000000040 huart1
     /tmp/ccTzhkRm.s:189    .text.init_servomotors:0000000000000000 $t
     /tmp/ccTzhkRm.s:196    .text.init_servomotors:0000000000000000 init_servomotors
     /tmp/ccTzhkRm.s:257    .text.init_servomotors:000000000000003c $d
                            *COM*:0000000000000040 htim3
                            *COM*:0000000000000014 servo_roll
                            *COM*:0000000000000014 servo_pitch
     /tmp/ccTzhkRm.s:268    .text.init_servomotors_motion:0000000000000000 $t
     /tmp/ccTzhkRm.s:275    .text.init_servomotors_motion:0000000000000000 init_servomotors_motion
     /tmp/ccTzhkRm.s:294    .text.init_servomotors_motion:000000000000000c $d
     /tmp/ccTzhkRm.s:299    .text.servo_update:0000000000000000 $t
     /tmp/ccTzhkRm.s:306    .text.servo_update:0000000000000000 servo_update
     /tmp/ccTzhkRm.s:333    .text.servo_update:0000000000000018 $d
                            *COM*:0000000000000004 roll_compensation
                            *COM*:0000000000000004 pitch_compensation
     /tmp/ccTzhkRm.s:341    .text.test_sensor:0000000000000000 $t
     /tmp/ccTzhkRm.s:348    .text.test_sensor:0000000000000000 test_sensor
     /tmp/ccTzhkRm.s:419    .text.test_sensor:0000000000000058 $d
                            *COM*:0000000000000054 hi2c2
     /tmp/ccTzhkRm.s:430    .text.sensor_calc_position:0000000000000000 $t
     /tmp/ccTzhkRm.s:437    .text.sensor_calc_position:0000000000000000 sensor_calc_position
     /tmp/ccTzhkRm.s:541    .text.sensor_calc_position:00000000000000b8 $d
                            *COM*:000000000000001c position_sensor
                            *COM*:0000000000000004 sensor_factor
     /tmp/ccTzhkRm.s:550    .text.init_position_sensor:0000000000000000 $t
     /tmp/ccTzhkRm.s:557    .text.init_position_sensor:0000000000000000 init_position_sensor
     /tmp/ccTzhkRm.s:626    .text.init_position_sensor:0000000000000048 $d
                            *COM*:0000000000000004 sensor_roll
                            *COM*:0000000000000004 sensor_pitch
                            *COM*:0000000000000040 htim4
     /tmp/ccTzhkRm.s:638    .text.update_position_sensor:0000000000000000 $t
     /tmp/ccTzhkRm.s:645    .text.update_position_sensor:0000000000000000 update_position_sensor
     /tmp/ccTzhkRm.s:716    .text.update_position_sensor:0000000000000058 $d
                            *COM*:000000000000001c roll_filter
                            *COM*:000000000000001c pitch_filter
     /tmp/ccTzhkRm.s:730    .text.change_smoothing:0000000000000000 $t
     /tmp/ccTzhkRm.s:737    .text.change_smoothing:0000000000000000 change_smoothing
     /tmp/ccTzhkRm.s:808    .text.change_smoothing:0000000000000054 $d
                            *COM*:0000000000000004 smoothing
     /tmp/ccTzhkRm.s:817    .text.init_uart_messaging:0000000000000000 $t
     /tmp/ccTzhkRm.s:824    .text.init_uart_messaging:0000000000000000 init_uart_messaging
     /tmp/ccTzhkRm.s:843    .text.init_uart_messaging:000000000000000c $d
                            *COM*:0000000000000040 htim2
     /tmp/ccTzhkRm.s:848    .text.init_system:0000000000000000 $t
     /tmp/ccTzhkRm.s:855    .text.init_system:0000000000000000 init_system
     /tmp/ccTzhkRm.s:912    .text.init_system:0000000000000040 $d
     /tmp/ccTzhkRm.s:920    .text.send_value_pack:0000000000000000 $t
     /tmp/ccTzhkRm.s:927    .text.send_value_pack:0000000000000000 send_value_pack
     /tmp/ccTzhkRm.s:980    .text.send_value_pack:000000000000002c $d
ARM GAS  /tmp/ccTzhkRm.s 			page 57


     /tmp/ccTzhkRm.s:987    .text.send_angle_pack:0000000000000000 $t
     /tmp/ccTzhkRm.s:994    .text.send_angle_pack:0000000000000000 send_angle_pack
     /tmp/ccTzhkRm.s:1070   .text.send_angle_pack:0000000000000058 $d
     /tmp/ccTzhkRm.s:1077   .text.uart_message_update:0000000000000000 $t
     /tmp/ccTzhkRm.s:1084   .text.uart_message_update:0000000000000000 uart_message_update
     /tmp/ccTzhkRm.s:1115   .text.uart_message_update:0000000000000020 $d
     /tmp/ccTzhkRm.s:1123   .text.send_echo_pack:0000000000000000 $t
     /tmp/ccTzhkRm.s:1130   .text.send_echo_pack:0000000000000000 send_echo_pack
     /tmp/ccTzhkRm.s:1170   .text.send_echo_pack:0000000000000028 $d
     /tmp/ccTzhkRm.s:1176   .text.send_message_pack:0000000000000000 $t
     /tmp/ccTzhkRm.s:1183   .text.send_message_pack:0000000000000000 send_message_pack
     /tmp/ccTzhkRm.s:1223   .text.send_message_pack:0000000000000028 $d
     /tmp/ccTzhkRm.s:1229   .text.Error_Handler:0000000000000000 $t
     /tmp/ccTzhkRm.s:1236   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccTzhkRm.s:1255   .text.Error_Handler:000000000000000c $d
     /tmp/ccTzhkRm.s:1260   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccTzhkRm.s:1266   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccTzhkRm.s:1315   .text.MX_I2C2_Init:0000000000000030 $d
     /tmp/ccTzhkRm.s:1322   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccTzhkRm.s:1328   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccTzhkRm.s:1421   .text.MX_TIM2_Init:000000000000006c $d
     /tmp/ccTzhkRm.s:1426   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccTzhkRm.s:1432   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccTzhkRm.s:1582   .text.MX_TIM3_Init:00000000000000bc $d
     /tmp/ccTzhkRm.s:1588   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccTzhkRm.s:1594   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccTzhkRm.s:1642   .text.MX_USART1_UART_Init:0000000000000030 $d
     /tmp/ccTzhkRm.s:1648   .text.MX_RTC_Init:0000000000000000 $t
     /tmp/ccTzhkRm.s:1654   .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/ccTzhkRm.s:1690   .text.MX_RTC_Init:0000000000000024 $d
                            *COM*:0000000000000014 hrtc
     /tmp/ccTzhkRm.s:1696   .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccTzhkRm.s:1702   .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccTzhkRm.s:1795   .text.MX_TIM4_Init:0000000000000068 $d
     /tmp/ccTzhkRm.s:1801   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccTzhkRm.s:1808   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccTzhkRm.s:1919   .text.main:0000000000000000 $t
     /tmp/ccTzhkRm.s:1926   .text.main:0000000000000000 main
     /tmp/ccTzhkRm.s:1998   .rodata.Error_Handler.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2002   .rodata.error_alert.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2006   .rodata.init_position_sensor.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2010   .rodata.init_servomotors.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2017   .rodata.init_system.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2021   .rodata.send_angle_pack.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2030   .rodata.send_echo_pack.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2034   .rodata.send_message_pack.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2038   .rodata.send_value_pack.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2046   .rodata.test_sensor.str1.4:0000000000000000 $d
     /tmp/ccTzhkRm.s:2050   .rodata.update_position_sensor.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_DisableIRQ
sprintf
strlen
ARM GAS  /tmp/ccTzhkRm.s 			page 58


HAL_UART_Transmit
HAL_Delay
HAL_NVIC_SystemReset
servo_init
servo_set_offset
HAL_TIM_Base_Start_IT
servo_set_position
HAL_I2C_Master_Transmit
HAL_I2C_Master_Receive
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
__aeabi_fmul
sqrt
atan
SD_MPU6050_Init
SD_MPU6050_ReadAccelerometer
maf_filter
delete_maf
init_maf
HAL_NVIC_EnableIRQ
float_to_string
__aeabi_f2iz
HAL_I2C_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_MultiProcessor_Init
HAL_RTC_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init

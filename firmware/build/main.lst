ARM GAS  /tmp/cc6DDMtp.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB270:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdio.h>
  27:Src/main.c    **** #include <string.h>
  28:Src/main.c    **** #include <math.h>
  29:Src/main.c    **** #include <float.h>
  30:Src/main.c    **** #include <servomotor.h>
  31:Src/main.c    **** #include <mpu6050.h>
  32:Src/main.c    **** #include <moving_average.h>
  33:Src/main.c    **** #include <float_to_string.h>
  34:Src/main.c    **** //#include <stm32f103x6.h>
ARM GAS  /tmp/cc6DDMtp.s 			page 2


  35:Src/main.c    **** /* USER CODE END Includes */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  38:Src/main.c    **** /* USER CODE BEGIN PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* USER CODE END PTD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** #define DEFAULT_SMOOTHING 20
  46:Src/main.c    **** #define DEFAULT_FACTOR 1.4
  47:Src/main.c    **** #define ROUND_ANGLE_PACK
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PD */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  52:Src/main.c    **** /* USER CODE BEGIN PM */
  53:Src/main.c    **** /* USER CODE END PM */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** I2C_HandleTypeDef hi2c2;
  57:Src/main.c    **** 
  58:Src/main.c    **** RTC_HandleTypeDef hrtc;
  59:Src/main.c    **** 
  60:Src/main.c    **** TIM_HandleTypeDef htim2;
  61:Src/main.c    **** TIM_HandleTypeDef htim3;
  62:Src/main.c    **** TIM_HandleTypeDef htim4;
  63:Src/main.c    **** 
  64:Src/main.c    **** UART_HandleTypeDef huart1;
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE BEGIN PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** SD_MPU6050 position_sensor;
  69:Src/main.c    **** 
  70:Src/main.c    **** float sensor_roll, sensor_pitch, sensor_factor;
  71:Src/main.c    **** float roll_compensation, pitch_compensation;
  72:Src/main.c    **** size_t smoothing;
  73:Src/main.c    **** 
  74:Src/main.c    **** servo_t servo_roll;
  75:Src/main.c    **** servo_t servo_pitch;
  76:Src/main.c    **** 
  77:Src/main.c    **** maf_t roll_filter;
  78:Src/main.c    **** maf_t pitch_filter;
  79:Src/main.c    **** 
  80:Src/main.c    **** 
  81:Src/main.c    **** /* USER CODE END PV */
  82:Src/main.c    **** 
  83:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  84:Src/main.c    **** void SystemClock_Config(void);
  85:Src/main.c    **** static void MX_GPIO_Init(void);
  86:Src/main.c    **** static void MX_I2C2_Init(void);
  87:Src/main.c    **** static void MX_TIM2_Init(void);
  88:Src/main.c    **** static void MX_TIM3_Init(void);
  89:Src/main.c    **** static void MX_USART1_UART_Init(void);
  90:Src/main.c    **** static void MX_RTC_Init(void);
  91:Src/main.c    **** static void MX_TIM4_Init(void);
ARM GAS  /tmp/cc6DDMtp.s 			page 3


  92:Src/main.c    **** /* USER CODE BEGIN PFP */
  93:Src/main.c    **** 
  94:Src/main.c    **** /* USER CODE END PFP */
  95:Src/main.c    **** 
  96:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  97:Src/main.c    **** /* USER CODE BEGIN 0 */
  98:Src/main.c    **** 
  99:Src/main.c    **** /* -- System -- */
 100:Src/main.c    **** void init_system()
 101:Src/main.c    **** {
 102:Src/main.c    ****     smoothing = DEFAULT_SMOOTHING;
 103:Src/main.c    ****     if(init_maf(&roll_filter, smoothing) == 0) error_alert("Cannot init MAF");
 104:Src/main.c    ****     if(init_maf(&pitch_filter, smoothing) == 0) error_alert("Cannot init MAF");
 105:Src/main.c    **** 
 106:Src/main.c    ****     init_position_sensor();
 107:Src/main.c    ****     init_servomotors();
 108:Src/main.c    ****     init_uart_messaging();
 109:Src/main.c    ****     init_servomotors_motion();
 110:Src/main.c    ****     init_mailbox();
 111:Src/main.c    **** }
 112:Src/main.c    **** 
 113:Src/main.c    **** void error_alert(char *msg)
 114:Src/main.c    **** {
 115:Src/main.c    ****     char str[100];
 116:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM2_IRQn);
 117:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM3_IRQn);
 118:Src/main.c    **** 
 119:Src/main.c    ****     HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 120:Src/main.c    ****     
 121:Src/main.c    ****     sprintf(str, "{\"type\":\"error\",\"text\":\"%s\"}\n\r", msg);
 122:Src/main.c    ****     HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 123:Src/main.c    ****     
 124:Src/main.c    ****     HAL_Delay(500);
 125:Src/main.c    **** 
 126:Src/main.c    ****     HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 127:Src/main.c    ****     
 128:Src/main.c    ****     HAL_NVIC_SystemReset();
 129:Src/main.c    **** }
 130:Src/main.c    **** 
 131:Src/main.c    **** /* -- Servomotors -- */
 132:Src/main.c    **** void init_servomotors()
 133:Src/main.c    **** {
 134:Src/main.c    ****     servo_status_t r;
 135:Src/main.c    ****     
 136:Src/main.c    ****     r = servo_init(&servo_roll, &htim3, TIM_CHANNEL_1);
 137:Src/main.c    ****     if(r != SERVO_STATUS_OK) error_alert("Cannot init servo_roll");
 138:Src/main.c    **** 
 139:Src/main.c    ****     r = servo_init(&servo_pitch, &htim3, TIM_CHANNEL_2);
 140:Src/main.c    ****     if(r != SERVO_STATUS_OK) error_alert("Cannot init servo_pitch");
 141:Src/main.c    **** 
 142:Src/main.c    ****     servo_set_offset(&servo_roll, 90);
 143:Src/main.c    ****     servo_set_offset(&servo_pitch, 90);
 144:Src/main.c    **** 
 145:Src/main.c    ****     //servo_set_position(&servo_roll, 0);
 146:Src/main.c    ****     //servo_set_position(&servo_pitch, 0);
 147:Src/main.c    **** }
 148:Src/main.c    **** 
ARM GAS  /tmp/cc6DDMtp.s 			page 4


 149:Src/main.c    **** void init_servomotors_motion()
 150:Src/main.c    **** {
 151:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 152:Src/main.c    **** }
 153:Src/main.c    **** 
 154:Src/main.c    **** void servo_update()
 155:Src/main.c    **** {
 156:Src/main.c    ****     servo_set_position(&servo_roll, roll_compensation);
 157:Src/main.c    ****     servo_set_position(&servo_pitch, pitch_compensation);
 158:Src/main.c    **** }
 159:Src/main.c    **** 
 160:Src/main.c    **** /* -- Sensors -- */
 161:Src/main.c    **** void init_position_sensor()
 162:Src/main.c    **** {
 163:Src/main.c    ****     sensor_roll = 0;
 164:Src/main.c    ****     sensor_pitch = 0;
 165:Src/main.c    ****     sensor_factor = DEFAULT_FACTOR;
 166:Src/main.c    **** 
 167:Src/main.c    ****     HAL_Delay(500);
 168:Src/main.c    ****     
 169:Src/main.c    ****     SD_MPU6050_Result r;
 170:Src/main.c    ****     r = SD_MPU6050_Init(&hi2c2, &position_sensor, SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_2G,
 171:Src/main.c    ****     
 172:Src/main.c    ****     if(r != SD_MPU6050_Result_Ok)
 173:Src/main.c    ****     {
 174:Src/main.c    ****         error_alert("Cannot init MPU6050");
 175:Src/main.c    ****     }
 176:Src/main.c    ****     
 177:Src/main.c    ****     sensor_calc_position(&sensor_pitch, &sensor_roll);
 178:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim4);
 179:Src/main.c    **** }
 180:Src/main.c    **** 
 181:Src/main.c    **** #define MPU6050_I2C_ADDR	0xD0
 182:Src/main.c    **** #define MPU6050_I_AM	0x68
 183:Src/main.c    **** #define MPU6050_WHO_AM_I 0x75
 184:Src/main.c    **** 
 185:Src/main.c    **** void test_sensor()
 186:Src/main.c    **** {
 187:Src/main.c    ****     uint8_t temp;
 188:Src/main.c    ****     uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 189:Src/main.c    ****     SD_MPU6050_Result r;
 190:Src/main.c    **** 
 191:Src/main.c    ****     /* Check who am I */
 192:Src/main.c    **** 	  //------------------
 193:Src/main.c    **** 		/* Send address */
 194:Src/main.c    **** 		if(HAL_I2C_Master_Transmit(&hi2c2, MPU6050_I2C_ADDR, &WHO_AM_I, 1, 1000) != HAL_OK)
 195:Src/main.c    **** 		{
 196:Src/main.c    ****         error_alert("MPU6050 connection fail");
 197:Src/main.c    **** 		}
 198:Src/main.c    **** 
 199:Src/main.c    **** 		/* Receive multiple byte */
 200:Src/main.c    **** 		if(HAL_I2C_Master_Receive(&hi2c2, MPU6050_I2C_ADDR, &temp, 1, 1000) != HAL_OK)
 201:Src/main.c    **** 		{
 202:Src/main.c    ****         error_alert("MPU6050 connection fail");
 203:Src/main.c    **** 		}
 204:Src/main.c    **** 
 205:Src/main.c    **** 		/* Checking */
ARM GAS  /tmp/cc6DDMtp.s 			page 5


 206:Src/main.c    **** 		if(temp != MPU6050_I_AM)
 207:Src/main.c    **** 		{
 208:Src/main.c    **** 				error_alert("MPU6050 connection fail");
 209:Src/main.c    **** 		}
 210:Src/main.c    **** 	  //------------------
 211:Src/main.c    **** }
 212:Src/main.c    **** 
 213:Src/main.c    **** void update_position_sensor()
 214:Src/main.c    **** {
 215:Src/main.c    ****     HAL_GPIO_WritePin(UPDATE_LED_GPIO_Port, UPDATE_LED_Pin, GPIO_PIN_SET);
 216:Src/main.c    ****     
 217:Src/main.c    ****     test_sensor();
 218:Src/main.c    ****     SD_MPU6050_Result r;
 219:Src/main.c    ****     r = SD_MPU6050_ReadAccelerometer(&hi2c2, &position_sensor);
 220:Src/main.c    ****     if(r != SD_MPU6050_Result_Ok)
 221:Src/main.c    ****     {
 222:Src/main.c    ****         error_alert("Cannot read MPU6050 Read Acce");
 223:Src/main.c    ****     }
 224:Src/main.c    **** 
 225:Src/main.c    ****     sensor_calc_position(&sensor_pitch, &sensor_roll);
 226:Src/main.c    ****     roll_compensation = -maf_filter(&roll_filter, sensor_roll);
 227:Src/main.c    ****     pitch_compensation = -maf_filter(&pitch_filter, sensor_pitch);
 228:Src/main.c    **** 
 229:Src/main.c    ****     HAL_GPIO_WritePin(UPDATE_LED_GPIO_Port, UPDATE_LED_Pin, GPIO_PIN_RESET);
 230:Src/main.c    **** }
 231:Src/main.c    **** 
 232:Src/main.c    **** 
 233:Src/main.c    **** #define SQUARE(v) ((v)*(v))
 234:Src/main.c    **** void sensor_calc_position(float *pitch, float *roll)
 235:Src/main.c    **** {
 236:Src/main.c    ****     *pitch = 180 * atan (position_sensor.Accelerometer_X/sqrt(SQUARE(position_sensor.Accelerometer_
 237:Src/main.c    ****     *roll = 180 * atan (position_sensor.Accelerometer_Y/sqrt(SQUARE(position_sensor.Accelerometer_X
 238:Src/main.c    ****     *pitch *= sensor_factor;
 239:Src/main.c    ****     *roll *= sensor_factor;
 240:Src/main.c    **** }
 241:Src/main.c    **** 
 242:Src/main.c    **** /* --- Smoothing -- */
 243:Src/main.c    **** void change_smoothing(size_t value)
 244:Src/main.c    **** {
 245:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM3_IRQn);
 246:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM4_IRQn);
 247:Src/main.c    ****     
 248:Src/main.c    ****     servo_set_position(&servo_roll, 0);
 249:Src/main.c    ****     servo_set_position(&servo_pitch, 0);
 250:Src/main.c    **** 
 251:Src/main.c    ****     smoothing = value;
 252:Src/main.c    ****     
 253:Src/main.c    ****     delete_maf(&roll_filter);
 254:Src/main.c    ****     delete_maf(&pitch_filter);
 255:Src/main.c    **** 
 256:Src/main.c    ****     init_maf(&roll_filter, smoothing);
 257:Src/main.c    ****     init_maf(&pitch_filter, smoothing);
 258:Src/main.c    ****     
 259:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 260:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 261:Src/main.c    **** }
 262:Src/main.c    **** 
ARM GAS  /tmp/cc6DDMtp.s 			page 6


 263:Src/main.c    **** /* -- UART messaging -- */
 264:Src/main.c    **** void uart_message_update()
 265:Src/main.c    **** {
 266:Src/main.c    ****     send_angle_pack(SENSOR_ANGLE_PACK, sensor_pitch, sensor_roll);
 267:Src/main.c    ****     send_angle_pack(SERVO_ANGLE_PACK, pitch_compensation, roll_compensation);
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** void init_uart_messaging()
 271:Src/main.c    **** {
 272:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 273:Src/main.c    **** }
 274:Src/main.c    **** 
 275:Src/main.c    **** void send_value_pack(value_pack_target_t target, float value)
 276:Src/main.c    **** {
 277:Src/main.c    ****     char value_pack_str[100];
 278:Src/main.c    ****     char value_str[10];
 279:Src/main.c    ****     float_to_string(value, value_str);
 280:Src/main.c    **** 
 281:Src/main.c    ****     if(target == SMOOTHING_VALUE_PACK)
 282:Src/main.c    ****     {
 283:Src/main.c    ****         sprintf(value_pack_str, "{\"type\":\"value\", \"target\",\"smoothing\", \"value\":%s}\n", v
 284:Src/main.c    ****     }
 285:Src/main.c    ****     else //FACTOR_VALUE_PACK
 286:Src/main.c    ****     {
 287:Src/main.c    ****         sprintf(value_pack_str, "{\"type\":\"value\", \"target\",\"factor\", \"value\":%s}\n", valu
 288:Src/main.c    ****     }
 289:Src/main.c    **** }
 290:Src/main.c    **** 
 291:Src/main.c    **** void send_angle_pack(angle_pack_target_t target, float pitch, float roll)
 292:Src/main.c    **** {
 293:Src/main.c    ****     char angle_pack_str[100];
 294:Src/main.c    **** 
 295:Src/main.c    **** #ifdef ROUND_ANGLE_PACK
 296:Src/main.c    ****     if(target == SENSOR_ANGLE_PACK)
 297:Src/main.c    ****     {
 298:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d, \"target\":\"sensor\
 299:Src/main.c    ****     }
 300:Src/main.c    ****     else //SERVO_ANGLE_PACK
 301:Src/main.c    ****     {
 302:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d, \"target\":\"servo\"
 303:Src/main.c    ****     }
 304:Src/main.c    ****     
 305:Src/main.c    **** #else
 306:Src/main.c    ****     char roll_str[20], pitch_str[20];
 307:Src/main.c    **** 
 308:Src/main.c    ****     float_to_string(roll, roll_str);
 309:Src/main.c    ****     float_to_string(pitch, pitch_str);
 310:Src/main.c    ****     
 311:Src/main.c    ****     if(target == SENSOR_ANGLE_PACK)
 312:Src/main.c    ****     {
 313:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%s,\"roll\":%s, \"target\":\"sensor\
 314:Src/main.c    ****     }
 315:Src/main.c    ****     else if(target == OFFSET_ANGLE_PACK)
 316:Src/main.c    ****     {
 317:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%s,\"roll\":%s, \"target\":\"offset\
 318:Src/main.c    ****     }
 319:Src/main.c    ****     else //SERVO_ANGLE_PACK
ARM GAS  /tmp/cc6DDMtp.s 			page 7


 320:Src/main.c    ****     {
 321:Src/main.c    ****         sprintf(angle_pack_str, "{\"type\":\"angle\",\"pitch\":%s,\"roll\":%s, \"target\":\"servo\"
 322:Src/main.c    ****     }
 323:Src/main.c    ****     
 324:Src/main.c    **** #endif
 325:Src/main.c    **** 
 326:Src/main.c    ****     HAL_UART_Transmit(&huart1, angle_pack_str, strlen(angle_pack_str), 100);
 327:Src/main.c    **** }
 328:Src/main.c    **** 
 329:Src/main.c    **** void send_echo_pack(char *msg)
 330:Src/main.c    **** {
 331:Src/main.c    ****     char echo_pack_str[100];
 332:Src/main.c    ****     sprintf(echo_pack_str, "{\"type\":\"echo\",\"text\":\"%s\"}\n", msg);
 333:Src/main.c    ****     HAL_UART_Transmit(&huart1, echo_pack_str, strlen(echo_pack_str), 100);
 334:Src/main.c    **** }
 335:Src/main.c    **** 
 336:Src/main.c    **** void send_message_pack(char *msg)
 337:Src/main.c    **** {
 338:Src/main.c    ****     char message_pack_str[100];
 339:Src/main.c    ****     sprintf(message_pack_str, "{\"type\":\"message\",\"text\":\"%s\"}\n", msg);
 340:Src/main.c    ****     HAL_UART_Transmit(&huart1, message_pack_str, strlen(message_pack_str), 100);
 341:Src/main.c    **** }
 342:Src/main.c    **** 
 343:Src/main.c    **** /* --- Mailbox --- */
 344:Src/main.c    **** 
 345:Src/main.c    **** char mailbox_buffer[50];
 346:Src/main.c    **** 
 347:Src/main.c    **** void init_mailbox()
 348:Src/main.c    **** {
 349:Src/main.c    **** }
 350:Src/main.c    **** 
 351:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 352:Src/main.c    **** {
 353:Src/main.c    ****   for(int i = 0; i < 50; i++)
 354:Src/main.c    ****   {
 355:Src/main.c    ****       if(mailbox_buffer[i] == '\n')
 356:Src/main.c    ****       { 
 357:Src/main.c    ****           mailbox_buffer[i] = '\0';
 358:Src/main.c    ****           //send_echo_pack(mailbox_buffer);
 359:Src/main.c    ****           mailbox_message_received(mailbox_buffer);
 360:Src/main.c    ****           return;
 361:Src/main.c    ****       }
 362:Src/main.c    ****   }
 363:Src/main.c    **** 
 364:Src/main.c    ****   mailbox_buffer[49] = '\0';
 365:Src/main.c    ****   mailbox_message_received(mailbox_buffer);
 366:Src/main.c    **** }
 367:Src/main.c    **** 
 368:Src/main.c    **** void mailbox_listen()
 369:Src/main.c    **** {
 370:Src/main.c    ****     HAL_UART_Receive_IT(&huart1, mailbox_buffer, 50);
 371:Src/main.c    **** }
 372:Src/main.c    **** 
 373:Src/main.c    **** void mailbox_message_received(char *message)
 374:Src/main.c    **** {
 375:Src/main.c    ****     if(strcmp(message, "pause") == 0)
 376:Src/main.c    ****     {
ARM GAS  /tmp/cc6DDMtp.s 			page 8


 377:Src/main.c    ****         HAL_NVIC_DisableIRQ(TIM3_IRQn);
 378:Src/main.c    ****         HAL_NVIC_DisableIRQ(TIM4_IRQn);
 379:Src/main.c    ****     }
 380:Src/main.c    ****     else if(strcmp(message, "resume") == 0)
 381:Src/main.c    ****     {
 382:Src/main.c    ****         HAL_NVIC_EnableIRQ(TIM4_IRQn);
 383:Src/main.c    ****         HAL_NVIC_EnableIRQ(TIM3_IRQn);
 384:Src/main.c    ****     }
 385:Src/main.c    ****     else
 386:Src/main.c    ****     {
 387:Src/main.c    ****         #if 0 /* problematic code */
 388:Src/main.c    ****         char pack_type[100];
 389:Src/main.c    ****         char pack_param[100];
 390:Src/main.c    ****         int pack_value;
 391:Src/main.c    ****         int pack_exp;
 392:Src/main.c    **** 
 393:Src/main.c    ****         sscanf(message, "type %s param %s value %de%d", pack_type, pack_param, &pack_value, &pack_e
 394:Src/main.c    ****         float float_value = 0;
 395:Src/main.c    ****         float_value = (float)pack_value * pow(10, pack_exp);
 396:Src/main.c    **** 
 397:Src/main.c    ****         //send_message_pack(pack_type);
 398:Src/main.c    ****         //send_message_pack(pack_param);
 399:Src/main.c    ****         //send_value_pack(SMOOTHING_VALUE_PACK, float_value);        
 400:Src/main.c    ****         
 401:Src/main.c    ****         if(strcmp(pack_type, "get") == 0)
 402:Src/main.c    ****         {
 403:Src/main.c    ****             if(strcmp(pack_param, "sensor") == 0)
 404:Src/main.c    ****             {
 405:Src/main.c    ****                 send_angle_pack(SENSOR_ANGLE_PACK, sensor_pitch, sensor_roll);
 406:Src/main.c    ****             }
 407:Src/main.c    ****             else if(strcmp(pack_param, "servo") == 0)
 408:Src/main.c    ****             {
 409:Src/main.c    ****                 send_angle_pack(SERVO_ANGLE_PACK, pitch_compensation, roll_compensation);
 410:Src/main.c    ****             }
 411:Src/main.c    ****             else if(strcmp(pack_param, "factor") == 0)
 412:Src/main.c    ****             {
 413:Src/main.c    ****                 send_value_pack(FACTOR_VALUE_PACK, sensor_factor);
 414:Src/main.c    ****             }
 415:Src/main.c    ****             else if(strcmp(pack_param, "smoothing") == 0)
 416:Src/main.c    ****             {
 417:Src/main.c    ****                 send_value_pack(SMOOTHING_VALUE_PACK, (float)smoothing);
 418:Src/main.c    ****             }
 419:Src/main.c    ****             else if(strcmp(pack_param, "offset") == 0)
 420:Src/main.c    ****             {
 421:Src/main.c    ****                 send_angle_pack(OFFSET_ANGLE_PACK, servo_pitch.offset, servo_roll.offset);
 422:Src/main.c    ****             }
 423:Src/main.c    ****             else
 424:Src/main.c    ****             {
 425:Src/main.c    ****                 send_message_pack("undefined param");
 426:Src/main.c    ****             }
 427:Src/main.c    ****         }
 428:Src/main.c    ****         else if(strcmp(pack_type, "set") == 0)
 429:Src/main.c    ****         {
 430:Src/main.c    ****             if(strcmp(pack_param, "servo_pitch") == 0)
 431:Src/main.c    ****             {
 432:Src/main.c    ****                 pitch_compensation = float_value;
 433:Src/main.c    ****                 servo_set_position(&servo_pitch, pitch_compensation);
ARM GAS  /tmp/cc6DDMtp.s 			page 9


 434:Src/main.c    ****             }
 435:Src/main.c    ****             else if(strcmp(pack_param, "servo_roll") == 0)
 436:Src/main.c    ****             {
 437:Src/main.c    ****                 roll_compensation = float_value;
 438:Src/main.c    ****                 servo_set_position(&servo_roll, roll_compensation);
 439:Src/main.c    ****             }
 440:Src/main.c    ****             else if(strcmp(pack_param, "roll_offset") == 0)
 441:Src/main.c    ****             {
 442:Src/main.c    ****                 servo_set_offset(&servo_roll, float_value);
 443:Src/main.c    ****             }
 444:Src/main.c    ****             else if(strcmp(pack_param, "pitch_offset") == 0)
 445:Src/main.c    ****             {
 446:Src/main.c    ****                 servo_set_offset(&servo_pitch, float_value);
 447:Src/main.c    ****             }
 448:Src/main.c    ****             else if(strcmp(pack_param, "sensor_factor") == 0)
 449:Src/main.c    ****             {
 450:Src/main.c    ****                 sensor_factor = float_value;
 451:Src/main.c    ****             }
 452:Src/main.c    ****             else if(strcmp(pack_param, "sensor_smoothing") == 0)
 453:Src/main.c    ****             {
 454:Src/main.c    ****                 change_smoothing((int)float_value);
 455:Src/main.c    ****             }
 456:Src/main.c    ****             else
 457:Src/main.c    ****             {
 458:Src/main.c    ****                 send_message_pack("undefined param");
 459:Src/main.c    ****             }
 460:Src/main.c    ****         }
 461:Src/main.c    ****         else
 462:Src/main.c    ****         {
 463:Src/main.c    ****             send_message_pack("undefined pack type");
 464:Src/main.c    ****         }
 465:Src/main.c    ****         #endif
 466:Src/main.c    ****     }
 467:Src/main.c    **** }
 468:Src/main.c    **** 
 469:Src/main.c    **** /* USER CODE END 0 */
 470:Src/main.c    **** 
 471:Src/main.c    **** /**
 472:Src/main.c    ****   * @brief  The application entry point.
 473:Src/main.c    ****   * @retval int
 474:Src/main.c    ****   */
 475:Src/main.c    **** int main(void)
 476:Src/main.c    **** {
 477:Src/main.c    ****   /* USER CODE BEGIN 1 */
 478:Src/main.c    **** 
 479:Src/main.c    ****   /* USER CODE END 1 */
 480:Src/main.c    ****   
 481:Src/main.c    **** 
 482:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 483:Src/main.c    **** 
 484:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 485:Src/main.c    ****   HAL_Init();
 486:Src/main.c    **** 
 487:Src/main.c    ****   /* USER CODE BEGIN Init */
 488:Src/main.c    **** 
 489:Src/main.c    ****   /* USER CODE END Init */
 490:Src/main.c    **** 
ARM GAS  /tmp/cc6DDMtp.s 			page 10


 491:Src/main.c    ****   /* Configure the system clock */
 492:Src/main.c    ****   SystemClock_Config();
 493:Src/main.c    **** 
 494:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 495:Src/main.c    **** 
 496:Src/main.c    ****   /* USER CODE END SysInit */
 497:Src/main.c    **** 
 498:Src/main.c    ****   /* Initialize all configured peripherals */
 499:Src/main.c    ****   MX_GPIO_Init();
 500:Src/main.c    ****   MX_I2C2_Init();
 501:Src/main.c    ****   MX_TIM2_Init();
 502:Src/main.c    ****   MX_TIM3_Init();
 503:Src/main.c    ****   MX_USART1_UART_Init();
 504:Src/main.c    ****   MX_RTC_Init();
 505:Src/main.c    ****   MX_TIM4_Init();
 506:Src/main.c    ****   /* USER CODE BEGIN 2 */
 507:Src/main.c    **** 
 508:Src/main.c    ****   init_system();
 509:Src/main.c    ****   
 510:Src/main.c    ****   /* USER CODE END 2 */
 511:Src/main.c    ****  
 512:Src/main.c    ****  
 513:Src/main.c    **** 
 514:Src/main.c    ****   /* Infinite loop */
 515:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 516:Src/main.c    ****   while (1)
 517:Src/main.c    ****   {
 518:Src/main.c    ****     mailbox_listen();
 519:Src/main.c    ****     /* USER CODE END WHILE */
 520:Src/main.c    **** 
 521:Src/main.c    ****     /* USER CODE BEGIN 3 */
 522:Src/main.c    ****   }
 523:Src/main.c    ****   /* USER CODE END 3 */
 524:Src/main.c    **** }
 525:Src/main.c    **** 
 526:Src/main.c    **** /**
 527:Src/main.c    ****   * @brief System Clock Configuration
 528:Src/main.c    ****   * @retval None
 529:Src/main.c    ****   */
 530:Src/main.c    **** void SystemClock_Config(void)
 531:Src/main.c    **** {
 532:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 533:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 534:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 535:Src/main.c    **** 
 536:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 537:Src/main.c    ****   */
 538:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 539:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 540:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 541:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 542:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 543:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 544:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 545:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 546:Src/main.c    ****   {
 547:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/cc6DDMtp.s 			page 11


 548:Src/main.c    ****   }
 549:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 550:Src/main.c    ****   */
 551:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 552:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 553:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 554:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 555:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 556:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 557:Src/main.c    **** 
 558:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 559:Src/main.c    ****   {
 560:Src/main.c    ****     Error_Handler();
 561:Src/main.c    ****   }
 562:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 563:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 564:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 565:Src/main.c    ****   {
 566:Src/main.c    ****     Error_Handler();
 567:Src/main.c    ****   }
 568:Src/main.c    **** }
 569:Src/main.c    **** 
 570:Src/main.c    **** /**
 571:Src/main.c    ****   * @brief I2C2 Initialization Function
 572:Src/main.c    ****   * @param None
 573:Src/main.c    ****   * @retval None
 574:Src/main.c    ****   */
 575:Src/main.c    **** static void MX_I2C2_Init(void)
 576:Src/main.c    **** {
 577:Src/main.c    **** 
 578:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 0 */
 579:Src/main.c    **** 
 580:Src/main.c    ****   /* USER CODE END I2C2_Init 0 */
 581:Src/main.c    **** 
 582:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 1 */
 583:Src/main.c    **** 
 584:Src/main.c    ****   /* USER CODE END I2C2_Init 1 */
 585:Src/main.c    ****   hi2c2.Instance = I2C2;
 586:Src/main.c    ****   hi2c2.Init.ClockSpeed = 400000;
 587:Src/main.c    ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 588:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 589:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 590:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 591:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 592:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 593:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 594:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 595:Src/main.c    ****   {
 596:Src/main.c    ****     Error_Handler();
 597:Src/main.c    ****   }
 598:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 2 */
 599:Src/main.c    **** 
 600:Src/main.c    ****   /* USER CODE END I2C2_Init 2 */
 601:Src/main.c    **** 
 602:Src/main.c    **** }
 603:Src/main.c    **** 
 604:Src/main.c    **** /**
ARM GAS  /tmp/cc6DDMtp.s 			page 12


 605:Src/main.c    ****   * @brief RTC Initialization Function
 606:Src/main.c    ****   * @param None
 607:Src/main.c    ****   * @retval None
 608:Src/main.c    ****   */
 609:Src/main.c    **** static void MX_RTC_Init(void)
 610:Src/main.c    **** {
 611:Src/main.c    **** 
 612:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 0 */
 613:Src/main.c    **** 
 614:Src/main.c    ****   /* USER CODE END RTC_Init 0 */
 615:Src/main.c    **** 
 616:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 1 */
 617:Src/main.c    **** 
 618:Src/main.c    ****   /* USER CODE END RTC_Init 1 */
 619:Src/main.c    ****   /** Initialize RTC Only 
 620:Src/main.c    ****   */
 621:Src/main.c    ****   hrtc.Instance = RTC;
 622:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 623:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 624:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 625:Src/main.c    ****   {
 626:Src/main.c    ****     Error_Handler();
 627:Src/main.c    ****   }
 628:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 2 */
 629:Src/main.c    **** 
 630:Src/main.c    ****   /* USER CODE END RTC_Init 2 */
 631:Src/main.c    **** 
 632:Src/main.c    **** }
 633:Src/main.c    **** 
 634:Src/main.c    **** /**
 635:Src/main.c    ****   * @brief TIM2 Initialization Function
 636:Src/main.c    ****   * @param None
 637:Src/main.c    ****   * @retval None
 638:Src/main.c    ****   */
 639:Src/main.c    **** static void MX_TIM2_Init(void)
 640:Src/main.c    **** {
 641:Src/main.c    **** 
 642:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 643:Src/main.c    **** 
 644:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 645:Src/main.c    **** 
 646:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 647:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 648:Src/main.c    **** 
 649:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 650:Src/main.c    **** 
 651:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 652:Src/main.c    ****   htim2.Instance = TIM2;
 653:Src/main.c    ****   htim2.Init.Prescaler = 9000;
 654:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 655:Src/main.c    ****   htim2.Init.Period = 60;
 656:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 657:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 658:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 659:Src/main.c    ****   {
 660:Src/main.c    ****     Error_Handler();
 661:Src/main.c    ****   }
ARM GAS  /tmp/cc6DDMtp.s 			page 13


 662:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 663:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 664:Src/main.c    ****   {
 665:Src/main.c    ****     Error_Handler();
 666:Src/main.c    ****   }
 667:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 668:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 669:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 670:Src/main.c    ****   {
 671:Src/main.c    ****     Error_Handler();
 672:Src/main.c    ****   }
 673:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 674:Src/main.c    **** 
 675:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 676:Src/main.c    **** 
 677:Src/main.c    **** }
 678:Src/main.c    **** 
 679:Src/main.c    **** /**
 680:Src/main.c    ****   * @brief TIM3 Initialization Function
 681:Src/main.c    ****   * @param None
 682:Src/main.c    ****   * @retval None
 683:Src/main.c    ****   */
 684:Src/main.c    **** static void MX_TIM3_Init(void)
 685:Src/main.c    **** {
 686:Src/main.c    **** 
 687:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 688:Src/main.c    **** 
 689:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 690:Src/main.c    **** 
 691:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 692:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 693:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 694:Src/main.c    **** 
 695:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 696:Src/main.c    **** 
 697:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 698:Src/main.c    ****   htim3.Instance = TIM3;
 699:Src/main.c    ****   htim3.Init.Prescaler = 16;
 700:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 701:Src/main.c    ****   htim3.Init.Period = 10000;
 702:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 703:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 704:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 705:Src/main.c    ****   {
 706:Src/main.c    ****     Error_Handler();
 707:Src/main.c    ****   }
 708:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 709:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 710:Src/main.c    ****   {
 711:Src/main.c    ****     Error_Handler();
 712:Src/main.c    ****   }
 713:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 714:Src/main.c    ****   {
 715:Src/main.c    ****     Error_Handler();
 716:Src/main.c    ****   }
 717:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 718:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/cc6DDMtp.s 			page 14


 719:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 720:Src/main.c    ****   {
 721:Src/main.c    ****     Error_Handler();
 722:Src/main.c    ****   }
 723:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 724:Src/main.c    ****   sConfigOC.Pulse = 0;
 725:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 726:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 727:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 728:Src/main.c    ****   {
 729:Src/main.c    ****     Error_Handler();
 730:Src/main.c    ****   }
 731:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 732:Src/main.c    ****   {
 733:Src/main.c    ****     Error_Handler();
 734:Src/main.c    ****   }
 735:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 736:Src/main.c    ****   
 737:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 738:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 739:Src/main.c    **** 
 740:Src/main.c    **** }
 741:Src/main.c    **** 
 742:Src/main.c    **** /**
 743:Src/main.c    ****   * @brief TIM4 Initialization Function
 744:Src/main.c    ****   * @param None
 745:Src/main.c    ****   * @retval None
 746:Src/main.c    ****   */
 747:Src/main.c    **** static void MX_TIM4_Init(void)
 748:Src/main.c    **** {
 749:Src/main.c    **** 
 750:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 751:Src/main.c    **** 
 752:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 753:Src/main.c    **** 
 754:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 755:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 756:Src/main.c    **** 
 757:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 758:Src/main.c    **** 
 759:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 760:Src/main.c    ****   htim4.Instance = TIM4;
 761:Src/main.c    ****   htim4.Init.Prescaler = 8;
 762:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 763:Src/main.c    ****   htim4.Init.Period = 5000;
 764:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 765:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 766:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 767:Src/main.c    ****   {
 768:Src/main.c    ****     Error_Handler();
 769:Src/main.c    ****   }
 770:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 771:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 772:Src/main.c    ****   {
 773:Src/main.c    ****     Error_Handler();
 774:Src/main.c    ****   }
 775:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
ARM GAS  /tmp/cc6DDMtp.s 			page 15


 776:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 777:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 778:Src/main.c    ****   {
 779:Src/main.c    ****     Error_Handler();
 780:Src/main.c    ****   }
 781:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 782:Src/main.c    **** 
 783:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 784:Src/main.c    **** 
 785:Src/main.c    **** }
 786:Src/main.c    **** 
 787:Src/main.c    **** /**
 788:Src/main.c    ****   * @brief USART1 Initialization Function
 789:Src/main.c    ****   * @param None
 790:Src/main.c    ****   * @retval None
 791:Src/main.c    ****   */
 792:Src/main.c    **** static void MX_USART1_UART_Init(void)
 793:Src/main.c    **** {
 794:Src/main.c    **** 
 795:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 796:Src/main.c    **** 
 797:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 798:Src/main.c    **** 
 799:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 800:Src/main.c    **** 
 801:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 802:Src/main.c    ****   huart1.Instance = USART1;
 803:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 804:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 805:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 806:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 807:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 808:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 809:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 810:Src/main.c    ****   if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 811:Src/main.c    ****   {
 812:Src/main.c    ****     Error_Handler();
 813:Src/main.c    ****   }
 814:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 815:Src/main.c    **** 
 816:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 817:Src/main.c    **** 
 818:Src/main.c    **** }
 819:Src/main.c    **** 
 820:Src/main.c    **** /**
 821:Src/main.c    ****   * @brief GPIO Initialization Function
 822:Src/main.c    ****   * @param None
 823:Src/main.c    ****   * @retval None
 824:Src/main.c    ****   */
 825:Src/main.c    **** static void MX_GPIO_Init(void)
 826:Src/main.c    **** {
  25              		.loc 1 826 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
ARM GAS  /tmp/cc6DDMtp.s 			page 16


  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 87B0     		sub	sp, sp, #28
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 40
 827:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 827 0
  39 0004 0024     		movs	r4, #0
  40 0006 0294     		str	r4, [sp, #8]
  41 0008 0394     		str	r4, [sp, #12]
  42 000a 0494     		str	r4, [sp, #16]
  43 000c 0594     		str	r4, [sp, #20]
  44              	.LBB2:
 828:Src/main.c    **** 
 829:Src/main.c    ****   /* GPIO Ports Clock Enable */
 830:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  45              		.loc 1 830 0
  46 000e 134B     		ldr	r3, .L3
  47 0010 9A69     		ldr	r2, [r3, #24]
  48 0012 42F00402 		orr	r2, r2, #4
  49 0016 9A61     		str	r2, [r3, #24]
  50 0018 9A69     		ldr	r2, [r3, #24]
  51 001a 02F00402 		and	r2, r2, #4
  52 001e 0092     		str	r2, [sp]
  53 0020 009A     		ldr	r2, [sp]
  54              	.LBE2:
  55              	.LBB3:
 831:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  56              		.loc 1 831 0
  57 0022 9A69     		ldr	r2, [r3, #24]
  58 0024 42F00802 		orr	r2, r2, #8
  59 0028 9A61     		str	r2, [r3, #24]
  60 002a 9B69     		ldr	r3, [r3, #24]
  61 002c 03F00803 		and	r3, r3, #8
  62 0030 0193     		str	r3, [sp, #4]
  63 0032 019B     		ldr	r3, [sp, #4]
  64              	.LBE3:
 832:Src/main.c    **** 
 833:Src/main.c    ****   /*Configure GPIO pin Output Level */
 834:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, UPDATE_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
  65              		.loc 1 834 0
  66 0034 0A4D     		ldr	r5, .L3+4
  67 0036 2246     		mov	r2, r4
  68 0038 0321     		movs	r1, #3
  69 003a 2846     		mov	r0, r5
  70 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
  71              	.LVL0:
 835:Src/main.c    **** 
 836:Src/main.c    ****   /*Configure GPIO pins : UPDATE_LED_Pin ERROR_LED_Pin */
 837:Src/main.c    ****   GPIO_InitStruct.Pin = UPDATE_LED_Pin|ERROR_LED_Pin;
  72              		.loc 1 837 0
  73 0040 0323     		movs	r3, #3
  74 0042 0293     		str	r3, [sp, #8]
 838:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 838 0
ARM GAS  /tmp/cc6DDMtp.s 			page 17


  76 0044 0123     		movs	r3, #1
  77 0046 0393     		str	r3, [sp, #12]
 839:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 839 0
  79 0048 0494     		str	r4, [sp, #16]
 840:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  80              		.loc 1 840 0
  81 004a 0223     		movs	r3, #2
  82 004c 0593     		str	r3, [sp, #20]
 841:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  83              		.loc 1 841 0
  84 004e 02A9     		add	r1, sp, #8
  85 0050 2846     		mov	r0, r5
  86 0052 FFF7FEFF 		bl	HAL_GPIO_Init
  87              	.LVL1:
 842:Src/main.c    **** 
 843:Src/main.c    **** }
  88              		.loc 1 843 0
  89 0056 07B0     		add	sp, sp, #28
  90              	.LCFI2:
  91              		.cfi_def_cfa_offset 12
  92              		@ sp needed
  93 0058 30BD     		pop	{r4, r5, pc}
  94              	.L4:
  95 005a 00BF     		.align	2
  96              	.L3:
  97 005c 00100240 		.word	1073876992
  98 0060 00080140 		.word	1073809408
  99              		.cfi_endproc
 100              	.LFE270:
 102              		.section	.text.error_alert,"ax",%progbits
 103              		.align	1
 104              		.global	error_alert
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu softvfp
 110              	error_alert:
 111              	.LFB243:
 114:Src/main.c    ****     char str[100];
 112              		.loc 1 114 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 104
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              	.LVL2:
 117 0000 30B5     		push	{r4, r5, lr}
 118              	.LCFI3:
 119              		.cfi_def_cfa_offset 12
 120              		.cfi_offset 4, -12
 121              		.cfi_offset 5, -8
 122              		.cfi_offset 14, -4
 123 0002 9BB0     		sub	sp, sp, #108
 124              	.LCFI4:
 125              		.cfi_def_cfa_offset 120
 126 0004 0546     		mov	r5, r0
 116:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM3_IRQn);
 127              		.loc 1 116 0
ARM GAS  /tmp/cc6DDMtp.s 			page 18


 128 0006 1C20     		movs	r0, #28
 129              	.LVL3:
 130 0008 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 131              	.LVL4:
 117:Src/main.c    **** 
 132              		.loc 1 117 0
 133 000c 1D20     		movs	r0, #29
 134 000e FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 135              	.LVL5:
 119:Src/main.c    ****     
 136              		.loc 1 119 0
 137 0012 104C     		ldr	r4, .L7
 138 0014 0122     		movs	r2, #1
 139 0016 0221     		movs	r1, #2
 140 0018 2046     		mov	r0, r4
 141 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 142              	.LVL6:
 121:Src/main.c    ****     HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 143              		.loc 1 121 0
 144 001e 2A46     		mov	r2, r5
 145 0020 0D49     		ldr	r1, .L7+4
 146 0022 01A8     		add	r0, sp, #4
 147 0024 FFF7FEFF 		bl	sprintf
 148              	.LVL7:
 122:Src/main.c    ****     
 149              		.loc 1 122 0
 150 0028 01A8     		add	r0, sp, #4
 151 002a FFF7FEFF 		bl	strlen
 152              	.LVL8:
 153 002e 6423     		movs	r3, #100
 154 0030 82B2     		uxth	r2, r0
 155 0032 01A9     		add	r1, sp, #4
 156 0034 0948     		ldr	r0, .L7+8
 157 0036 FFF7FEFF 		bl	HAL_UART_Transmit
 158              	.LVL9:
 124:Src/main.c    **** 
 159              		.loc 1 124 0
 160 003a 4FF4FA70 		mov	r0, #500
 161 003e FFF7FEFF 		bl	HAL_Delay
 162              	.LVL10:
 126:Src/main.c    ****     
 163              		.loc 1 126 0
 164 0042 0022     		movs	r2, #0
 165 0044 0221     		movs	r1, #2
 166 0046 2046     		mov	r0, r4
 167 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 168              	.LVL11:
 128:Src/main.c    **** }
 169              		.loc 1 128 0
 170 004c FFF7FEFF 		bl	HAL_NVIC_SystemReset
 171              	.LVL12:
 129:Src/main.c    **** 
 172              		.loc 1 129 0
 173 0050 1BB0     		add	sp, sp, #108
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 12
 176              		@ sp needed
ARM GAS  /tmp/cc6DDMtp.s 			page 19


 177 0052 30BD     		pop	{r4, r5, pc}
 178              	.LVL13:
 179              	.L8:
 180              		.align	2
 181              	.L7:
 182 0054 00080140 		.word	1073809408
 183 0058 00000000 		.word	.LC0
 184 005c 00000000 		.word	huart1
 185              		.cfi_endproc
 186              	.LFE243:
 188              		.section	.text.init_servomotors,"ax",%progbits
 189              		.align	1
 190              		.global	init_servomotors
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 194              		.fpu softvfp
 196              	init_servomotors:
 197              	.LFB244:
 133:Src/main.c    ****     servo_status_t r;
 198              		.loc 1 133 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202 0000 10B5     		push	{r4, lr}
 203              	.LCFI6:
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 4, -8
 206              		.cfi_offset 14, -4
 136:Src/main.c    ****     if(r != SERVO_STATUS_OK) error_alert("Cannot init servo_roll");
 207              		.loc 1 136 0
 208 0002 0022     		movs	r2, #0
 209 0004 0E49     		ldr	r1, .L15
 210 0006 0F48     		ldr	r0, .L15+4
 211 0008 FFF7FEFF 		bl	servo_init
 212              	.LVL14:
 137:Src/main.c    **** 
 213              		.loc 1 137 0
 214 000c 78B9     		cbnz	r0, .L13
 215              	.LVL15:
 216              	.L10:
 139:Src/main.c    ****     if(r != SERVO_STATUS_OK) error_alert("Cannot init servo_pitch");
 217              		.loc 1 139 0
 218 000e 0422     		movs	r2, #4
 219 0010 0B49     		ldr	r1, .L15
 220 0012 0D48     		ldr	r0, .L15+8
 221 0014 FFF7FEFF 		bl	servo_init
 222              	.LVL16:
 140:Src/main.c    **** 
 223              		.loc 1 140 0
 224 0018 68B9     		cbnz	r0, .L14
 225              	.LVL17:
 226              	.L11:
 142:Src/main.c    ****     servo_set_offset(&servo_pitch, 90);
 227              		.loc 1 142 0
 228 001a 0C4C     		ldr	r4, .L15+12
 229 001c 2146     		mov	r1, r4
ARM GAS  /tmp/cc6DDMtp.s 			page 20


 230 001e 0948     		ldr	r0, .L15+4
 231 0020 FFF7FEFF 		bl	servo_set_offset
 232              	.LVL18:
 143:Src/main.c    **** 
 233              		.loc 1 143 0
 234 0024 2146     		mov	r1, r4
 235 0026 0848     		ldr	r0, .L15+8
 236 0028 FFF7FEFF 		bl	servo_set_offset
 237              	.LVL19:
 238 002c 10BD     		pop	{r4, pc}
 239              	.LVL20:
 240              	.L13:
 137:Src/main.c    **** 
 241              		.loc 1 137 0 discriminator 1
 242 002e 0848     		ldr	r0, .L15+16
 243              	.LVL21:
 244 0030 FFF7FEFF 		bl	error_alert
 245              	.LVL22:
 246 0034 EBE7     		b	.L10
 247              	.LVL23:
 248              	.L14:
 140:Src/main.c    **** 
 249              		.loc 1 140 0 discriminator 1
 250 0036 0748     		ldr	r0, .L15+20
 251              	.LVL24:
 252 0038 FFF7FEFF 		bl	error_alert
 253              	.LVL25:
 254 003c EDE7     		b	.L11
 255              	.L16:
 256 003e 00BF     		.align	2
 257              	.L15:
 258 0040 00000000 		.word	htim3
 259 0044 00000000 		.word	servo_roll
 260 0048 00000000 		.word	servo_pitch
 261 004c 0000B442 		.word	1119092736
 262 0050 00000000 		.word	.LC1
 263 0054 18000000 		.word	.LC2
 264              		.cfi_endproc
 265              	.LFE244:
 267              		.section	.text.init_servomotors_motion,"ax",%progbits
 268              		.align	1
 269              		.global	init_servomotors_motion
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu softvfp
 275              	init_servomotors_motion:
 276              	.LFB245:
 150:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 277              		.loc 1 150 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281 0000 08B5     		push	{r3, lr}
 282              	.LCFI7:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 3, -8
ARM GAS  /tmp/cc6DDMtp.s 			page 21


 285              		.cfi_offset 14, -4
 151:Src/main.c    **** }
 286              		.loc 1 151 0
 287 0002 0248     		ldr	r0, .L19
 288 0004 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 289              	.LVL26:
 290 0008 08BD     		pop	{r3, pc}
 291              	.L20:
 292 000a 00BF     		.align	2
 293              	.L19:
 294 000c 00000000 		.word	htim3
 295              		.cfi_endproc
 296              	.LFE245:
 298              		.section	.text.servo_update,"ax",%progbits
 299              		.align	1
 300              		.global	servo_update
 301              		.syntax unified
 302              		.thumb
 303              		.thumb_func
 304              		.fpu softvfp
 306              	servo_update:
 307              	.LFB246:
 155:Src/main.c    ****     servo_set_position(&servo_roll, roll_compensation);
 308              		.loc 1 155 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312 0000 08B5     		push	{r3, lr}
 313              	.LCFI8:
 314              		.cfi_def_cfa_offset 8
 315              		.cfi_offset 3, -8
 316              		.cfi_offset 14, -4
 156:Src/main.c    ****     servo_set_position(&servo_pitch, pitch_compensation);
 317              		.loc 1 156 0
 318 0002 054B     		ldr	r3, .L23
 319 0004 1968     		ldr	r1, [r3]	@ float
 320 0006 0548     		ldr	r0, .L23+4
 321 0008 FFF7FEFF 		bl	servo_set_position
 322              	.LVL27:
 157:Src/main.c    **** }
 323              		.loc 1 157 0
 324 000c 044B     		ldr	r3, .L23+8
 325 000e 1968     		ldr	r1, [r3]	@ float
 326 0010 0448     		ldr	r0, .L23+12
 327 0012 FFF7FEFF 		bl	servo_set_position
 328              	.LVL28:
 329 0016 08BD     		pop	{r3, pc}
 330              	.L24:
 331              		.align	2
 332              	.L23:
 333 0018 00000000 		.word	roll_compensation
 334 001c 00000000 		.word	servo_roll
 335 0020 00000000 		.word	pitch_compensation
 336 0024 00000000 		.word	servo_pitch
 337              		.cfi_endproc
 338              	.LFE246:
 340              		.section	.text.test_sensor,"ax",%progbits
ARM GAS  /tmp/cc6DDMtp.s 			page 22


 341              		.align	1
 342              		.global	test_sensor
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 346              		.fpu softvfp
 348              	test_sensor:
 349              	.LFB248:
 186:Src/main.c    ****     uint8_t temp;
 350              		.loc 1 186 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 00B5     		push	{lr}
 355              	.LCFI9:
 356              		.cfi_def_cfa_offset 4
 357              		.cfi_offset 14, -4
 358 0002 85B0     		sub	sp, sp, #20
 359              	.LCFI10:
 360              		.cfi_def_cfa_offset 24
 188:Src/main.c    ****     SD_MPU6050_Result r;
 361              		.loc 1 188 0
 362 0004 04AA     		add	r2, sp, #16
 363 0006 7523     		movs	r3, #117
 364 0008 02F8023D 		strb	r3, [r2, #-2]!
 194:Src/main.c    **** 		{
 365              		.loc 1 194 0
 366 000c 4FF47A73 		mov	r3, #1000
 367 0010 0093     		str	r3, [sp]
 368 0012 0123     		movs	r3, #1
 369 0014 D021     		movs	r1, #208
 370 0016 1048     		ldr	r0, .L32
 371 0018 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 372              	.LVL29:
 373 001c A0B9     		cbnz	r0, .L30
 374              	.L26:
 200:Src/main.c    **** 		{
 375              		.loc 1 200 0
 376 001e 4FF47A73 		mov	r3, #1000
 377 0022 0093     		str	r3, [sp]
 378 0024 0123     		movs	r3, #1
 379 0026 0DF10F02 		add	r2, sp, #15
 380 002a D021     		movs	r1, #208
 381 002c 0A48     		ldr	r0, .L32
 382 002e FFF7FEFF 		bl	HAL_I2C_Master_Receive
 383              	.LVL30:
 384 0032 68B9     		cbnz	r0, .L31
 385              	.L27:
 206:Src/main.c    **** 		{
 386              		.loc 1 206 0
 387 0034 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 388 0038 682B     		cmp	r3, #104
 389 003a 02D0     		beq	.L25
 208:Src/main.c    **** 		}
 390              		.loc 1 208 0
 391 003c 0748     		ldr	r0, .L32+4
 392 003e FFF7FEFF 		bl	error_alert
ARM GAS  /tmp/cc6DDMtp.s 			page 23


 393              	.LVL31:
 394              	.L25:
 211:Src/main.c    **** 
 395              		.loc 1 211 0
 396 0042 05B0     		add	sp, sp, #20
 397              	.LCFI11:
 398              		.cfi_remember_state
 399              		.cfi_def_cfa_offset 4
 400              		@ sp needed
 401 0044 5DF804FB 		ldr	pc, [sp], #4
 402              	.L30:
 403              	.LCFI12:
 404              		.cfi_restore_state
 196:Src/main.c    **** 		}
 405              		.loc 1 196 0
 406 0048 0448     		ldr	r0, .L32+4
 407 004a FFF7FEFF 		bl	error_alert
 408              	.LVL32:
 409 004e E6E7     		b	.L26
 410              	.L31:
 202:Src/main.c    **** 		}
 411              		.loc 1 202 0
 412 0050 0248     		ldr	r0, .L32+4
 413 0052 FFF7FEFF 		bl	error_alert
 414              	.LVL33:
 415 0056 EDE7     		b	.L27
 416              	.L33:
 417              		.align	2
 418              	.L32:
 419 0058 00000000 		.word	hi2c2
 420 005c 00000000 		.word	.LC3
 421              		.cfi_endproc
 422              	.LFE248:
 424              		.global	__aeabi_i2d
 425              		.global	__aeabi_ddiv
 426              		.global	__aeabi_dmul
 427              		.global	__aeabi_d2f
 428              		.global	__aeabi_fmul
 429              		.section	.text.sensor_calc_position,"ax",%progbits
 430              		.align	1
 431              		.global	sensor_calc_position
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu softvfp
 437              	sensor_calc_position:
 438              	.LFB250:
 235:Src/main.c    ****     *pitch = 180 * atan (position_sensor.Accelerometer_X/sqrt(SQUARE(position_sensor.Accelerometer_
 439              		.loc 1 235 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              	.LVL34:
 444 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 445              	.LCFI13:
 446              		.cfi_def_cfa_offset 32
 447              		.cfi_offset 3, -32
ARM GAS  /tmp/cc6DDMtp.s 			page 24


 448              		.cfi_offset 4, -28
 449              		.cfi_offset 5, -24
 450              		.cfi_offset 6, -20
 451              		.cfi_offset 7, -16
 452              		.cfi_offset 8, -12
 453              		.cfi_offset 9, -8
 454              		.cfi_offset 14, -4
 455 0004 0646     		mov	r6, r0
 456 0006 0D46     		mov	r5, r1
 236:Src/main.c    ****     *roll = 180 * atan (position_sensor.Accelerometer_Y/sqrt(SQUARE(position_sensor.Accelerometer_X
 457              		.loc 1 236 0
 458 0008 2D4C     		ldr	r4, .L36+8
 459 000a B4F90C70 		ldrsh	r7, [r4, #12]
 460 000e B4F90E00 		ldrsh	r0, [r4, #14]
 461              	.LVL35:
 462 0012 B4F91030 		ldrsh	r3, [r4, #16]
 463 0016 03FB03F3 		mul	r3, r3, r3
 464 001a 00FB0030 		mla	r0, r0, r0, r3
 465 001e FFF7FEFF 		bl	__aeabi_i2d
 466              	.LVL36:
 467 0022 FFF7FEFF 		bl	sqrt
 468              	.LVL37:
 469 0026 8046     		mov	r8, r0
 470 0028 8946     		mov	r9, r1
 471 002a 3846     		mov	r0, r7
 472 002c FFF7FEFF 		bl	__aeabi_i2d
 473              	.LVL38:
 474 0030 4246     		mov	r2, r8
 475 0032 4B46     		mov	r3, r9
 476 0034 FFF7FEFF 		bl	__aeabi_ddiv
 477              	.LVL39:
 478 0038 FFF7FEFF 		bl	atan
 479              	.LVL40:
 480 003c 0022     		movs	r2, #0
 481 003e 214B     		ldr	r3, .L36+12
 482 0040 FFF7FEFF 		bl	__aeabi_dmul
 483              	.LVL41:
 484 0044 1CA3     		adr	r3, .L36
 485 0046 D3E90023 		ldrd	r2, [r3]
 486 004a FFF7FEFF 		bl	__aeabi_ddiv
 487              	.LVL42:
 488 004e FFF7FEFF 		bl	__aeabi_d2f
 489              	.LVL43:
 490 0052 3060     		str	r0, [r6]	@ float
 237:Src/main.c    ****     *pitch *= sensor_factor;
 491              		.loc 1 237 0
 492 0054 B4F90E70 		ldrsh	r7, [r4, #14]
 493 0058 B4F90C00 		ldrsh	r0, [r4, #12]
 494 005c B4F91030 		ldrsh	r3, [r4, #16]
 495 0060 03FB03F3 		mul	r3, r3, r3
 496 0064 00FB0030 		mla	r0, r0, r0, r3
 497 0068 FFF7FEFF 		bl	__aeabi_i2d
 498              	.LVL44:
 499 006c FFF7FEFF 		bl	sqrt
 500              	.LVL45:
 501 0070 8046     		mov	r8, r0
 502 0072 8946     		mov	r9, r1
ARM GAS  /tmp/cc6DDMtp.s 			page 25


 503 0074 3846     		mov	r0, r7
 504 0076 FFF7FEFF 		bl	__aeabi_i2d
 505              	.LVL46:
 506 007a 4246     		mov	r2, r8
 507 007c 4B46     		mov	r3, r9
 508 007e FFF7FEFF 		bl	__aeabi_ddiv
 509              	.LVL47:
 510 0082 FFF7FEFF 		bl	atan
 511              	.LVL48:
 512 0086 0022     		movs	r2, #0
 513 0088 0E4B     		ldr	r3, .L36+12
 514 008a FFF7FEFF 		bl	__aeabi_dmul
 515              	.LVL49:
 516 008e 0AA3     		adr	r3, .L36
 517 0090 D3E90023 		ldrd	r2, [r3]
 518 0094 FFF7FEFF 		bl	__aeabi_ddiv
 519              	.LVL50:
 520 0098 FFF7FEFF 		bl	__aeabi_d2f
 521              	.LVL51:
 522 009c 2860     		str	r0, [r5]	@ float
 238:Src/main.c    ****     *roll *= sensor_factor;
 523              		.loc 1 238 0
 524 009e 0A4C     		ldr	r4, .L36+16
 525 00a0 2168     		ldr	r1, [r4]	@ float
 526 00a2 3068     		ldr	r0, [r6]	@ float
 527 00a4 FFF7FEFF 		bl	__aeabi_fmul
 528              	.LVL52:
 529 00a8 3060     		str	r0, [r6]	@ float
 239:Src/main.c    **** }
 530              		.loc 1 239 0
 531 00aa 2168     		ldr	r1, [r4]	@ float
 532 00ac 2868     		ldr	r0, [r5]	@ float
 533 00ae FFF7FEFF 		bl	__aeabi_fmul
 534              	.LVL53:
 535 00b2 2860     		str	r0, [r5]	@ float
 536 00b4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 537              	.LVL54:
 538              	.L37:
 539              		.align	3
 540              	.L36:
 541 00b8 182D4454 		.word	1413754136
 542 00bc FB210940 		.word	1074340347
 543 00c0 00000000 		.word	position_sensor
 544 00c4 00806640 		.word	1080459264
 545 00c8 00000000 		.word	sensor_factor
 546              		.cfi_endproc
 547              	.LFE250:
 549              		.section	.text.init_position_sensor,"ax",%progbits
 550              		.align	1
 551              		.global	init_position_sensor
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu softvfp
 557              	init_position_sensor:
 558              	.LFB247:
 162:Src/main.c    ****     sensor_roll = 0;
ARM GAS  /tmp/cc6DDMtp.s 			page 26


 559              		.loc 1 162 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563 0000 00B5     		push	{lr}
 564              	.LCFI14:
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 14, -4
 567 0002 83B0     		sub	sp, sp, #12
 568              	.LCFI15:
 569              		.cfi_def_cfa_offset 16
 163:Src/main.c    ****     sensor_pitch = 0;
 570              		.loc 1 163 0
 571 0004 0023     		movs	r3, #0
 572 0006 104A     		ldr	r2, .L42
 573 0008 1360     		str	r3, [r2]	@ float
 164:Src/main.c    ****     sensor_factor = DEFAULT_FACTOR;
 574              		.loc 1 164 0
 575 000a 104A     		ldr	r2, .L42+4
 576 000c 1360     		str	r3, [r2]	@ float
 165:Src/main.c    **** 
 577              		.loc 1 165 0
 578 000e 104A     		ldr	r2, .L42+8
 579 0010 104B     		ldr	r3, .L42+12
 580 0012 1A60     		str	r2, [r3]	@ float
 167:Src/main.c    ****     
 581              		.loc 1 167 0
 582 0014 4FF4FA70 		mov	r0, #500
 583 0018 FFF7FEFF 		bl	HAL_Delay
 584              	.LVL55:
 170:Src/main.c    ****     
 585              		.loc 1 170 0
 586 001c 0022     		movs	r2, #0
 587 001e 0092     		str	r2, [sp]
 588 0020 1346     		mov	r3, r2
 589 0022 0D49     		ldr	r1, .L42+16
 590 0024 0D48     		ldr	r0, .L42+20
 591 0026 FFF7FEFF 		bl	SD_MPU6050_Init
 592              	.LVL56:
 172:Src/main.c    ****     {
 593              		.loc 1 172 0
 594 002a 48B9     		cbnz	r0, .L41
 595              	.LVL57:
 596              	.L39:
 177:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim4);
 597              		.loc 1 177 0
 598 002c 0649     		ldr	r1, .L42
 599 002e 0748     		ldr	r0, .L42+4
 600 0030 FFF7FEFF 		bl	sensor_calc_position
 601              	.LVL58:
 178:Src/main.c    **** }
 602              		.loc 1 178 0
 603 0034 0A48     		ldr	r0, .L42+24
 604 0036 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 605              	.LVL59:
 179:Src/main.c    **** 
 606              		.loc 1 179 0
ARM GAS  /tmp/cc6DDMtp.s 			page 27


 607 003a 03B0     		add	sp, sp, #12
 608              	.LCFI16:
 609              		.cfi_remember_state
 610              		.cfi_def_cfa_offset 4
 611              		@ sp needed
 612 003c 5DF804FB 		ldr	pc, [sp], #4
 613              	.LVL60:
 614              	.L41:
 615              	.LCFI17:
 616              		.cfi_restore_state
 174:Src/main.c    ****     }
 617              		.loc 1 174 0
 618 0040 0848     		ldr	r0, .L42+28
 619              	.LVL61:
 620 0042 FFF7FEFF 		bl	error_alert
 621              	.LVL62:
 622 0046 F1E7     		b	.L39
 623              	.L43:
 624              		.align	2
 625              	.L42:
 626 0048 00000000 		.word	sensor_roll
 627 004c 00000000 		.word	sensor_pitch
 628 0050 3333B33F 		.word	1068708659
 629 0054 00000000 		.word	sensor_factor
 630 0058 00000000 		.word	position_sensor
 631 005c 00000000 		.word	hi2c2
 632 0060 00000000 		.word	htim4
 633 0064 00000000 		.word	.LC4
 634              		.cfi_endproc
 635              	.LFE247:
 637              		.section	.text.update_position_sensor,"ax",%progbits
 638              		.align	1
 639              		.global	update_position_sensor
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 643              		.fpu softvfp
 645              	update_position_sensor:
 646              	.LFB249:
 214:Src/main.c    ****     HAL_GPIO_WritePin(UPDATE_LED_GPIO_Port, UPDATE_LED_Pin, GPIO_PIN_SET);
 647              		.loc 1 214 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651 0000 38B5     		push	{r3, r4, r5, lr}
 652              	.LCFI18:
 653              		.cfi_def_cfa_offset 16
 654              		.cfi_offset 3, -16
 655              		.cfi_offset 4, -12
 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 215:Src/main.c    ****     
 658              		.loc 1 215 0
 659 0002 0122     		movs	r2, #1
 660 0004 1146     		mov	r1, r2
 661 0006 1548     		ldr	r0, .L48
 662 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/cc6DDMtp.s 			page 28


 663              	.LVL63:
 217:Src/main.c    ****     SD_MPU6050_Result r;
 664              		.loc 1 217 0
 665 000c FFF7FEFF 		bl	test_sensor
 666              	.LVL64:
 219:Src/main.c    ****     if(r != SD_MPU6050_Result_Ok)
 667              		.loc 1 219 0
 668 0010 1349     		ldr	r1, .L48+4
 669 0012 1448     		ldr	r0, .L48+8
 670 0014 FFF7FEFF 		bl	SD_MPU6050_ReadAccelerometer
 671              	.LVL65:
 220:Src/main.c    ****     {
 672              		.loc 1 220 0
 673 0018 D8B9     		cbnz	r0, .L47
 674              	.LVL66:
 675              	.L45:
 225:Src/main.c    ****     roll_compensation = -maf_filter(&roll_filter, sensor_roll);
 676              		.loc 1 225 0
 677 001a 134D     		ldr	r5, .L48+12
 678 001c 134C     		ldr	r4, .L48+16
 679 001e 2946     		mov	r1, r5
 680 0020 2046     		mov	r0, r4
 681 0022 FFF7FEFF 		bl	sensor_calc_position
 682              	.LVL67:
 226:Src/main.c    ****     pitch_compensation = -maf_filter(&pitch_filter, sensor_pitch);
 683              		.loc 1 226 0
 684 0026 2968     		ldr	r1, [r5]	@ float
 685 0028 1148     		ldr	r0, .L48+20
 686 002a FFF7FEFF 		bl	maf_filter
 687              	.LVL68:
 688 002e 00F10040 		add	r0, r0, #-2147483648
 689 0032 104B     		ldr	r3, .L48+24
 690 0034 1860     		str	r0, [r3]	@ float
 227:Src/main.c    **** 
 691              		.loc 1 227 0
 692 0036 2168     		ldr	r1, [r4]	@ float
 693 0038 0F48     		ldr	r0, .L48+28
 694 003a FFF7FEFF 		bl	maf_filter
 695              	.LVL69:
 696 003e 00F10040 		add	r0, r0, #-2147483648
 697 0042 0E4B     		ldr	r3, .L48+32
 698 0044 1860     		str	r0, [r3]	@ float
 229:Src/main.c    **** }
 699              		.loc 1 229 0
 700 0046 0022     		movs	r2, #0
 701 0048 0121     		movs	r1, #1
 702 004a 0448     		ldr	r0, .L48
 703 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 704              	.LVL70:
 705 0050 38BD     		pop	{r3, r4, r5, pc}
 706              	.LVL71:
 707              	.L47:
 222:Src/main.c    ****     }
 708              		.loc 1 222 0
 709 0052 0B48     		ldr	r0, .L48+36
 710              	.LVL72:
 711 0054 FFF7FEFF 		bl	error_alert
ARM GAS  /tmp/cc6DDMtp.s 			page 29


 712              	.LVL73:
 713 0058 DFE7     		b	.L45
 714              	.L49:
 715 005a 00BF     		.align	2
 716              	.L48:
 717 005c 00080140 		.word	1073809408
 718 0060 00000000 		.word	position_sensor
 719 0064 00000000 		.word	hi2c2
 720 0068 00000000 		.word	sensor_roll
 721 006c 00000000 		.word	sensor_pitch
 722 0070 00000000 		.word	roll_filter
 723 0074 00000000 		.word	roll_compensation
 724 0078 00000000 		.word	pitch_filter
 725 007c 00000000 		.word	pitch_compensation
 726 0080 00000000 		.word	.LC5
 727              		.cfi_endproc
 728              	.LFE249:
 730              		.section	.text.change_smoothing,"ax",%progbits
 731              		.align	1
 732              		.global	change_smoothing
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu softvfp
 738              	change_smoothing:
 739              	.LFB251:
 244:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM3_IRQn);
 740              		.loc 1 244 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              	.LVL74:
 745 0000 70B5     		push	{r4, r5, r6, lr}
 746              	.LCFI19:
 747              		.cfi_def_cfa_offset 16
 748              		.cfi_offset 4, -16
 749              		.cfi_offset 5, -12
 750              		.cfi_offset 6, -8
 751              		.cfi_offset 14, -4
 752 0002 0546     		mov	r5, r0
 245:Src/main.c    ****     HAL_NVIC_DisableIRQ(TIM4_IRQn);
 753              		.loc 1 245 0
 754 0004 1D20     		movs	r0, #29
 755              	.LVL75:
 756 0006 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 757              	.LVL76:
 246:Src/main.c    ****     
 758              		.loc 1 246 0
 759 000a 1E20     		movs	r0, #30
 760 000c FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 761              	.LVL77:
 248:Src/main.c    ****     servo_set_position(&servo_pitch, 0);
 762              		.loc 1 248 0
 763 0010 0024     		movs	r4, #0
 764 0012 2146     		mov	r1, r4
 765 0014 0F48     		ldr	r0, .L52
 766 0016 FFF7FEFF 		bl	servo_set_position
ARM GAS  /tmp/cc6DDMtp.s 			page 30


 767              	.LVL78:
 249:Src/main.c    **** 
 768              		.loc 1 249 0
 769 001a 2146     		mov	r1, r4
 770 001c 0E48     		ldr	r0, .L52+4
 771 001e FFF7FEFF 		bl	servo_set_position
 772              	.LVL79:
 251:Src/main.c    ****     
 773              		.loc 1 251 0
 774 0022 0E4C     		ldr	r4, .L52+8
 775 0024 2560     		str	r5, [r4]
 253:Src/main.c    ****     delete_maf(&pitch_filter);
 776              		.loc 1 253 0
 777 0026 0E4E     		ldr	r6, .L52+12
 778 0028 3046     		mov	r0, r6
 779 002a FFF7FEFF 		bl	delete_maf
 780              	.LVL80:
 254:Src/main.c    **** 
 781              		.loc 1 254 0
 782 002e 0D4D     		ldr	r5, .L52+16
 783              	.LVL81:
 784 0030 2846     		mov	r0, r5
 785 0032 FFF7FEFF 		bl	delete_maf
 786              	.LVL82:
 256:Src/main.c    ****     init_maf(&pitch_filter, smoothing);
 787              		.loc 1 256 0
 788 0036 2168     		ldr	r1, [r4]
 789 0038 3046     		mov	r0, r6
 790 003a FFF7FEFF 		bl	init_maf
 791              	.LVL83:
 257:Src/main.c    ****     
 792              		.loc 1 257 0
 793 003e 2168     		ldr	r1, [r4]
 794 0040 2846     		mov	r0, r5
 795 0042 FFF7FEFF 		bl	init_maf
 796              	.LVL84:
 259:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 797              		.loc 1 259 0
 798 0046 1E20     		movs	r0, #30
 799 0048 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 800              	.LVL85:
 260:Src/main.c    **** }
 801              		.loc 1 260 0
 802 004c 1D20     		movs	r0, #29
 803 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 804              	.LVL86:
 805 0052 70BD     		pop	{r4, r5, r6, pc}
 806              	.L53:
 807              		.align	2
 808              	.L52:
 809 0054 00000000 		.word	servo_roll
 810 0058 00000000 		.word	servo_pitch
 811 005c 00000000 		.word	smoothing
 812 0060 00000000 		.word	roll_filter
 813 0064 00000000 		.word	pitch_filter
 814              		.cfi_endproc
 815              	.LFE251:
ARM GAS  /tmp/cc6DDMtp.s 			page 31


 817              		.section	.text.init_uart_messaging,"ax",%progbits
 818              		.align	1
 819              		.global	init_uart_messaging
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
 823              		.fpu softvfp
 825              	init_uart_messaging:
 826              	.LFB253:
 271:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 827              		.loc 1 271 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 0
 830              		@ frame_needed = 0, uses_anonymous_args = 0
 831 0000 08B5     		push	{r3, lr}
 832              	.LCFI20:
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 3, -8
 835              		.cfi_offset 14, -4
 272:Src/main.c    **** }
 836              		.loc 1 272 0
 837 0002 0248     		ldr	r0, .L56
 838 0004 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 839              	.LVL87:
 840 0008 08BD     		pop	{r3, pc}
 841              	.L57:
 842 000a 00BF     		.align	2
 843              	.L56:
 844 000c 00000000 		.word	htim2
 845              		.cfi_endproc
 846              	.LFE253:
 848              		.section	.text.init_system,"ax",%progbits
 849              		.align	1
 850              		.global	init_system
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu softvfp
 856              	init_system:
 857              	.LFB242:
 101:Src/main.c    ****     smoothing = DEFAULT_SMOOTHING;
 858              		.loc 1 101 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862 0000 08B5     		push	{r3, lr}
 863              	.LCFI21:
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 3, -8
 866              		.cfi_offset 14, -4
 102:Src/main.c    ****     if(init_maf(&roll_filter, smoothing) == 0) error_alert("Cannot init MAF");
 867              		.loc 1 102 0
 868 0002 1421     		movs	r1, #20
 869 0004 0E4B     		ldr	r3, .L64
 870 0006 1960     		str	r1, [r3]
 103:Src/main.c    ****     if(init_maf(&pitch_filter, smoothing) == 0) error_alert("Cannot init MAF");
 871              		.loc 1 103 0
ARM GAS  /tmp/cc6DDMtp.s 			page 32


 872 0008 0E48     		ldr	r0, .L64+4
 873 000a FFF7FEFF 		bl	init_maf
 874              	.LVL88:
 875 000e 70B1     		cbz	r0, .L62
 876              	.L59:
 104:Src/main.c    **** 
 877              		.loc 1 104 0
 878 0010 0B4B     		ldr	r3, .L64
 879 0012 1968     		ldr	r1, [r3]
 880 0014 0C48     		ldr	r0, .L64+8
 881 0016 FFF7FEFF 		bl	init_maf
 882              	.LVL89:
 883 001a 60B1     		cbz	r0, .L63
 884              	.L60:
 106:Src/main.c    ****     init_servomotors();
 885              		.loc 1 106 0
 886 001c FFF7FEFF 		bl	init_position_sensor
 887              	.LVL90:
 107:Src/main.c    ****     init_uart_messaging();
 888              		.loc 1 107 0
 889 0020 FFF7FEFF 		bl	init_servomotors
 890              	.LVL91:
 108:Src/main.c    ****     init_servomotors_motion();
 891              		.loc 1 108 0
 892 0024 FFF7FEFF 		bl	init_uart_messaging
 893              	.LVL92:
 109:Src/main.c    ****     init_mailbox();
 894              		.loc 1 109 0
 895 0028 FFF7FEFF 		bl	init_servomotors_motion
 896              	.LVL93:
 897 002c 08BD     		pop	{r3, pc}
 898              	.L62:
 103:Src/main.c    ****     if(init_maf(&pitch_filter, smoothing) == 0) error_alert("Cannot init MAF");
 899              		.loc 1 103 0 discriminator 1
 900 002e 0748     		ldr	r0, .L64+12
 901 0030 FFF7FEFF 		bl	error_alert
 902              	.LVL94:
 903 0034 ECE7     		b	.L59
 904              	.L63:
 104:Src/main.c    **** 
 905              		.loc 1 104 0 discriminator 1
 906 0036 0548     		ldr	r0, .L64+12
 907 0038 FFF7FEFF 		bl	error_alert
 908              	.LVL95:
 909 003c EEE7     		b	.L60
 910              	.L65:
 911 003e 00BF     		.align	2
 912              	.L64:
 913 0040 00000000 		.word	smoothing
 914 0044 00000000 		.word	roll_filter
 915 0048 00000000 		.word	pitch_filter
 916 004c 00000000 		.word	.LC6
 917              		.cfi_endproc
 918              	.LFE242:
 920              		.section	.text.send_value_pack,"ax",%progbits
 921              		.align	1
 922              		.global	send_value_pack
ARM GAS  /tmp/cc6DDMtp.s 			page 33


 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 926              		.fpu softvfp
 928              	send_value_pack:
 929              	.LFB254:
 276:Src/main.c    ****     char value_pack_str[100];
 930              		.loc 1 276 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 112
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              	.LVL96:
 935 0000 10B5     		push	{r4, lr}
 936              	.LCFI22:
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 4, -8
 939              		.cfi_offset 14, -4
 940 0002 9CB0     		sub	sp, sp, #112
 941              	.LCFI23:
 942              		.cfi_def_cfa_offset 120
 943 0004 0446     		mov	r4, r0
 944 0006 0846     		mov	r0, r1
 945              	.LVL97:
 279:Src/main.c    **** 
 946              		.loc 1 279 0
 947 0008 6946     		mov	r1, sp
 948              	.LVL98:
 949 000a FFF7FEFF 		bl	float_to_string
 950              	.LVL99:
 281:Src/main.c    ****     {
 951              		.loc 1 281 0
 952 000e 012C     		cmp	r4, #1
 953 0010 06D0     		beq	.L70
 287:Src/main.c    ****     }
 954              		.loc 1 287 0
 955 0012 6A46     		mov	r2, sp
 956 0014 0549     		ldr	r1, .L71
 957 0016 03A8     		add	r0, sp, #12
 958 0018 FFF7FEFF 		bl	sprintf
 959              	.LVL100:
 960              	.L66:
 289:Src/main.c    **** 
 961              		.loc 1 289 0
 962 001c 1CB0     		add	sp, sp, #112
 963              	.LCFI24:
 964              		.cfi_remember_state
 965              		.cfi_def_cfa_offset 8
 966              		@ sp needed
 967 001e 10BD     		pop	{r4, pc}
 968              	.L70:
 969              	.LCFI25:
 970              		.cfi_restore_state
 283:Src/main.c    ****     }
 971              		.loc 1 283 0
 972 0020 6A46     		mov	r2, sp
 973 0022 0349     		ldr	r1, .L71+4
 974 0024 03A8     		add	r0, sp, #12
ARM GAS  /tmp/cc6DDMtp.s 			page 34


 975 0026 FFF7FEFF 		bl	sprintf
 976              	.LVL101:
 977 002a F7E7     		b	.L66
 978              	.L72:
 979              		.align	2
 980              	.L71:
 981 002c 34000000 		.word	.LC8
 982 0030 00000000 		.word	.LC7
 983              		.cfi_endproc
 984              	.LFE254:
 986              		.global	__aeabi_f2iz
 987              		.section	.text.send_angle_pack,"ax",%progbits
 988              		.align	1
 989              		.global	send_angle_pack
 990              		.syntax unified
 991              		.thumb
 992              		.thumb_func
 993              		.fpu softvfp
 995              	send_angle_pack:
 996              	.LFB255:
 292:Src/main.c    ****     char angle_pack_str[100];
 997              		.loc 1 292 0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 104
 1000              		@ frame_needed = 0, uses_anonymous_args = 0
 1001              	.LVL102:
 1002 0000 30B5     		push	{r4, r5, lr}
 1003              	.LCFI26:
 1004              		.cfi_def_cfa_offset 12
 1005              		.cfi_offset 4, -12
 1006              		.cfi_offset 5, -8
 1007              		.cfi_offset 14, -4
 1008 0002 9BB0     		sub	sp, sp, #108
 1009              	.LCFI27:
 1010              		.cfi_def_cfa_offset 120
 1011 0004 0C46     		mov	r4, r1
 296:Src/main.c    ****     {
 1012              		.loc 1 296 0
 1013 0006 0128     		cmp	r0, #1
 1014 0008 17D0     		beq	.L77
 302:Src/main.c    ****     }
 1015              		.loc 1 302 0
 1016 000a 1046     		mov	r0, r2
 1017              	.LVL103:
 1018 000c FFF7FEFF 		bl	__aeabi_f2iz
 1019              	.LVL104:
 1020 0010 0546     		mov	r5, r0
 1021 0012 2046     		mov	r0, r4
 1022 0014 FFF7FEFF 		bl	__aeabi_f2iz
 1023              	.LVL105:
 1024 0018 2B46     		mov	r3, r5
 1025 001a 0246     		mov	r2, r0
 1026 001c 0E49     		ldr	r1, .L78
 1027 001e 01A8     		add	r0, sp, #4
 1028 0020 FFF7FEFF 		bl	sprintf
 1029              	.LVL106:
 1030              	.L75:
ARM GAS  /tmp/cc6DDMtp.s 			page 35


 326:Src/main.c    **** }
 1031              		.loc 1 326 0
 1032 0024 01A8     		add	r0, sp, #4
 1033 0026 FFF7FEFF 		bl	strlen
 1034              	.LVL107:
 1035 002a 6423     		movs	r3, #100
 1036 002c 82B2     		uxth	r2, r0
 1037 002e 01A9     		add	r1, sp, #4
 1038 0030 0A48     		ldr	r0, .L78+4
 1039 0032 FFF7FEFF 		bl	HAL_UART_Transmit
 1040              	.LVL108:
 327:Src/main.c    **** 
 1041              		.loc 1 327 0
 1042 0036 1BB0     		add	sp, sp, #108
 1043              	.LCFI28:
 1044              		.cfi_remember_state
 1045              		.cfi_def_cfa_offset 12
 1046              		@ sp needed
 1047 0038 30BD     		pop	{r4, r5, pc}
 1048              	.LVL109:
 1049              	.L77:
 1050              	.LCFI29:
 1051              		.cfi_restore_state
 298:Src/main.c    ****     }
 1052              		.loc 1 298 0
 1053 003a 1046     		mov	r0, r2
 1054              	.LVL110:
 1055 003c FFF7FEFF 		bl	__aeabi_f2iz
 1056              	.LVL111:
 1057 0040 0546     		mov	r5, r0
 1058 0042 2046     		mov	r0, r4
 1059 0044 FFF7FEFF 		bl	__aeabi_f2iz
 1060              	.LVL112:
 1061 0048 2B46     		mov	r3, r5
 1062 004a 0246     		mov	r2, r0
 1063 004c 0449     		ldr	r1, .L78+8
 1064 004e 01A8     		add	r0, sp, #4
 1065 0050 FFF7FEFF 		bl	sprintf
 1066              	.LVL113:
 1067 0054 E6E7     		b	.L75
 1068              	.L79:
 1069 0056 00BF     		.align	2
 1070              	.L78:
 1071 0058 3C000000 		.word	.LC10
 1072 005c 00000000 		.word	huart1
 1073 0060 00000000 		.word	.LC9
 1074              		.cfi_endproc
 1075              	.LFE255:
 1077              		.section	.text.uart_message_update,"ax",%progbits
 1078              		.align	1
 1079              		.global	uart_message_update
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu softvfp
 1085              	uart_message_update:
 1086              	.LFB252:
ARM GAS  /tmp/cc6DDMtp.s 			page 36


 265:Src/main.c    ****     send_angle_pack(SENSOR_ANGLE_PACK, sensor_pitch, sensor_roll);
 1087              		.loc 1 265 0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091 0000 08B5     		push	{r3, lr}
 1092              	.LCFI30:
 1093              		.cfi_def_cfa_offset 8
 1094              		.cfi_offset 3, -8
 1095              		.cfi_offset 14, -4
 266:Src/main.c    ****     send_angle_pack(SERVO_ANGLE_PACK, pitch_compensation, roll_compensation);
 1096              		.loc 1 266 0
 1097 0002 074B     		ldr	r3, .L82
 1098 0004 1A68     		ldr	r2, [r3]	@ float
 1099 0006 074B     		ldr	r3, .L82+4
 1100 0008 1968     		ldr	r1, [r3]	@ float
 1101 000a 0120     		movs	r0, #1
 1102 000c FFF7FEFF 		bl	send_angle_pack
 1103              	.LVL114:
 267:Src/main.c    **** }
 1104              		.loc 1 267 0
 1105 0010 054B     		ldr	r3, .L82+8
 1106 0012 1A68     		ldr	r2, [r3]	@ float
 1107 0014 054B     		ldr	r3, .L82+12
 1108 0016 1968     		ldr	r1, [r3]	@ float
 1109 0018 0020     		movs	r0, #0
 1110 001a FFF7FEFF 		bl	send_angle_pack
 1111              	.LVL115:
 1112 001e 08BD     		pop	{r3, pc}
 1113              	.L83:
 1114              		.align	2
 1115              	.L82:
 1116 0020 00000000 		.word	sensor_roll
 1117 0024 00000000 		.word	sensor_pitch
 1118 0028 00000000 		.word	roll_compensation
 1119 002c 00000000 		.word	pitch_compensation
 1120              		.cfi_endproc
 1121              	.LFE252:
 1123              		.section	.text.send_echo_pack,"ax",%progbits
 1124              		.align	1
 1125              		.global	send_echo_pack
 1126              		.syntax unified
 1127              		.thumb
 1128              		.thumb_func
 1129              		.fpu softvfp
 1131              	send_echo_pack:
 1132              	.LFB256:
 330:Src/main.c    ****     char echo_pack_str[100];
 1133              		.loc 1 330 0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 104
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 1137              	.LVL116:
 1138 0000 00B5     		push	{lr}
 1139              	.LCFI31:
 1140              		.cfi_def_cfa_offset 4
 1141              		.cfi_offset 14, -4
ARM GAS  /tmp/cc6DDMtp.s 			page 37


 1142 0002 9BB0     		sub	sp, sp, #108
 1143              	.LCFI32:
 1144              		.cfi_def_cfa_offset 112
 332:Src/main.c    ****     HAL_UART_Transmit(&huart1, echo_pack_str, strlen(echo_pack_str), 100);
 1145              		.loc 1 332 0
 1146 0004 0246     		mov	r2, r0
 1147 0006 0849     		ldr	r1, .L86
 1148 0008 01A8     		add	r0, sp, #4
 1149              	.LVL117:
 1150 000a FFF7FEFF 		bl	sprintf
 1151              	.LVL118:
 333:Src/main.c    **** }
 1152              		.loc 1 333 0
 1153 000e 01A8     		add	r0, sp, #4
 1154 0010 FFF7FEFF 		bl	strlen
 1155              	.LVL119:
 1156 0014 6423     		movs	r3, #100
 1157 0016 82B2     		uxth	r2, r0
 1158 0018 01A9     		add	r1, sp, #4
 1159 001a 0448     		ldr	r0, .L86+4
 1160 001c FFF7FEFF 		bl	HAL_UART_Transmit
 1161              	.LVL120:
 334:Src/main.c    **** 
 1162              		.loc 1 334 0
 1163 0020 1BB0     		add	sp, sp, #108
 1164              	.LCFI33:
 1165              		.cfi_def_cfa_offset 4
 1166              		@ sp needed
 1167 0022 5DF804FB 		ldr	pc, [sp], #4
 1168              	.L87:
 1169 0026 00BF     		.align	2
 1170              	.L86:
 1171 0028 00000000 		.word	.LC11
 1172 002c 00000000 		.word	huart1
 1173              		.cfi_endproc
 1174              	.LFE256:
 1176              		.section	.text.send_message_pack,"ax",%progbits
 1177              		.align	1
 1178              		.global	send_message_pack
 1179              		.syntax unified
 1180              		.thumb
 1181              		.thumb_func
 1182              		.fpu softvfp
 1184              	send_message_pack:
 1185              	.LFB257:
 337:Src/main.c    ****     char message_pack_str[100];
 1186              		.loc 1 337 0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 104
 1189              		@ frame_needed = 0, uses_anonymous_args = 0
 1190              	.LVL121:
 1191 0000 00B5     		push	{lr}
 1192              	.LCFI34:
 1193              		.cfi_def_cfa_offset 4
 1194              		.cfi_offset 14, -4
 1195 0002 9BB0     		sub	sp, sp, #108
 1196              	.LCFI35:
ARM GAS  /tmp/cc6DDMtp.s 			page 38


 1197              		.cfi_def_cfa_offset 112
 339:Src/main.c    ****     HAL_UART_Transmit(&huart1, message_pack_str, strlen(message_pack_str), 100);
 1198              		.loc 1 339 0
 1199 0004 0246     		mov	r2, r0
 1200 0006 0849     		ldr	r1, .L90
 1201 0008 01A8     		add	r0, sp, #4
 1202              	.LVL122:
 1203 000a FFF7FEFF 		bl	sprintf
 1204              	.LVL123:
 340:Src/main.c    **** }
 1205              		.loc 1 340 0
 1206 000e 01A8     		add	r0, sp, #4
 1207 0010 FFF7FEFF 		bl	strlen
 1208              	.LVL124:
 1209 0014 6423     		movs	r3, #100
 1210 0016 82B2     		uxth	r2, r0
 1211 0018 01A9     		add	r1, sp, #4
 1212 001a 0448     		ldr	r0, .L90+4
 1213 001c FFF7FEFF 		bl	HAL_UART_Transmit
 1214              	.LVL125:
 341:Src/main.c    **** 
 1215              		.loc 1 341 0
 1216 0020 1BB0     		add	sp, sp, #108
 1217              	.LCFI36:
 1218              		.cfi_def_cfa_offset 4
 1219              		@ sp needed
 1220 0022 5DF804FB 		ldr	pc, [sp], #4
 1221              	.L91:
 1222 0026 00BF     		.align	2
 1223              	.L90:
 1224 0028 00000000 		.word	.LC12
 1225 002c 00000000 		.word	huart1
 1226              		.cfi_endproc
 1227              	.LFE257:
 1229              		.section	.text.init_mailbox,"ax",%progbits
 1230              		.align	1
 1231              		.global	init_mailbox
 1232              		.syntax unified
 1233              		.thumb
 1234              		.thumb_func
 1235              		.fpu softvfp
 1237              	init_mailbox:
 1238              	.LFB258:
 348:Src/main.c    **** }
 1239              		.loc 1 348 0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 1244 0000 7047     		bx	lr
 1245              		.cfi_endproc
 1246              	.LFE258:
 1248              		.section	.text.mailbox_listen,"ax",%progbits
 1249              		.align	1
 1250              		.global	mailbox_listen
 1251              		.syntax unified
 1252              		.thumb
ARM GAS  /tmp/cc6DDMtp.s 			page 39


 1253              		.thumb_func
 1254              		.fpu softvfp
 1256              	mailbox_listen:
 1257              	.LFB260:
 369:Src/main.c    ****     HAL_UART_Receive_IT(&huart1, mailbox_buffer, 50);
 1258              		.loc 1 369 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 369:Src/main.c    ****     HAL_UART_Receive_IT(&huart1, mailbox_buffer, 50);
 1262              		.loc 1 369 0
 1263 0000 08B5     		push	{r3, lr}
 1264              	.LCFI37:
 1265              		.cfi_def_cfa_offset 8
 1266              		.cfi_offset 3, -8
 1267              		.cfi_offset 14, -4
 370:Src/main.c    **** }
 1268              		.loc 1 370 0
 1269 0002 3222     		movs	r2, #50
 1270 0004 0249     		ldr	r1, .L95
 1271 0006 0348     		ldr	r0, .L95+4
 1272 0008 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1273              	.LVL126:
 1274 000c 08BD     		pop	{r3, pc}
 1275              	.L96:
 1276 000e 00BF     		.align	2
 1277              	.L95:
 1278 0010 00000000 		.word	mailbox_buffer
 1279 0014 00000000 		.word	huart1
 1280              		.cfi_endproc
 1281              	.LFE260:
 1283              		.section	.text.mailbox_message_received,"ax",%progbits
 1284              		.align	1
 1285              		.global	mailbox_message_received
 1286              		.syntax unified
 1287              		.thumb
 1288              		.thumb_func
 1289              		.fpu softvfp
 1291              	mailbox_message_received:
 1292              	.LFB261:
 374:Src/main.c    ****     if(strcmp(message, "pause") == 0)
 1293              		.loc 1 374 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              	.LVL127:
 1298 0000 10B5     		push	{r4, lr}
 1299              	.LCFI38:
 1300              		.cfi_def_cfa_offset 8
 1301              		.cfi_offset 4, -8
 1302              		.cfi_offset 14, -4
 1303 0002 0446     		mov	r4, r0
 375:Src/main.c    ****     {
 1304              		.loc 1 375 0
 1305 0004 0B49     		ldr	r1, .L103
 1306 0006 FFF7FEFF 		bl	strcmp
 1307              	.LVL128:
ARM GAS  /tmp/cc6DDMtp.s 			page 40


 1308 000a 28B1     		cbz	r0, .L101
 380:Src/main.c    ****     {
 1309              		.loc 1 380 0
 1310 000c 0A49     		ldr	r1, .L103+4
 1311 000e 2046     		mov	r0, r4
 1312 0010 FFF7FEFF 		bl	strcmp
 1313              	.LVL129:
 1314 0014 38B1     		cbz	r0, .L102
 1315              	.L97:
 1316 0016 10BD     		pop	{r4, pc}
 1317              	.LVL130:
 1318              	.L101:
 377:Src/main.c    ****         HAL_NVIC_DisableIRQ(TIM4_IRQn);
 1319              		.loc 1 377 0
 1320 0018 1D20     		movs	r0, #29
 1321 001a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1322              	.LVL131:
 378:Src/main.c    ****     }
 1323              		.loc 1 378 0
 1324 001e 1E20     		movs	r0, #30
 1325 0020 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1326              	.LVL132:
 1327 0024 10BD     		pop	{r4, pc}
 1328              	.LVL133:
 1329              	.L102:
 382:Src/main.c    ****         HAL_NVIC_EnableIRQ(TIM3_IRQn);
 1330              		.loc 1 382 0
 1331 0026 1E20     		movs	r0, #30
 1332 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1333              	.LVL134:
 383:Src/main.c    ****     }
 1334              		.loc 1 383 0
 1335 002c 1D20     		movs	r0, #29
 1336 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1337              	.LVL135:
 467:Src/main.c    **** 
 1338              		.loc 1 467 0
 1339 0032 F0E7     		b	.L97
 1340              	.L104:
 1341              		.align	2
 1342              	.L103:
 1343 0034 00000000 		.word	.LC13
 1344 0038 08000000 		.word	.LC14
 1345              		.cfi_endproc
 1346              	.LFE261:
 1348              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1349              		.align	1
 1350              		.global	HAL_UART_RxCpltCallback
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1354              		.fpu softvfp
 1356              	HAL_UART_RxCpltCallback:
 1357              	.LFB259:
 352:Src/main.c    ****   for(int i = 0; i < 50; i++)
 1358              		.loc 1 352 0
 1359              		.cfi_startproc
ARM GAS  /tmp/cc6DDMtp.s 			page 41


 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 1362              	.LVL136:
 1363 0000 08B5     		push	{r3, lr}
 1364              	.LCFI39:
 1365              		.cfi_def_cfa_offset 8
 1366              		.cfi_offset 3, -8
 1367              		.cfi_offset 14, -4
 1368              	.LVL137:
 1369              	.LBB4:
 353:Src/main.c    ****   {
 1370              		.loc 1 353 0
 1371 0002 0023     		movs	r3, #0
 1372              	.LVL138:
 1373              	.L106:
 353:Src/main.c    ****   {
 1374              		.loc 1 353 0 is_stmt 0 discriminator 1
 1375 0004 312B     		cmp	r3, #49
 1376 0006 0BDC     		bgt	.L111
 355:Src/main.c    ****       { 
 1377              		.loc 1 355 0 is_stmt 1
 1378 0008 094A     		ldr	r2, .L113
 1379 000a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1380 000c 0A2A     		cmp	r2, #10
 1381 000e 01D0     		beq	.L112
 353:Src/main.c    ****   {
 1382              		.loc 1 353 0 discriminator 2
 1383 0010 0133     		adds	r3, r3, #1
 1384              	.LVL139:
 1385 0012 F7E7     		b	.L106
 1386              	.L112:
 357:Src/main.c    ****           //send_echo_pack(mailbox_buffer);
 1387              		.loc 1 357 0
 1388 0014 0648     		ldr	r0, .L113
 1389              	.LVL140:
 1390 0016 0022     		movs	r2, #0
 1391 0018 C254     		strb	r2, [r0, r3]
 359:Src/main.c    ****           return;
 1392              		.loc 1 359 0
 1393 001a FFF7FEFF 		bl	mailbox_message_received
 1394              	.LVL141:
 360:Src/main.c    ****       }
 1395              		.loc 1 360 0
 1396 001e 08BD     		pop	{r3, pc}
 1397              	.LVL142:
 1398              	.L111:
 1399              	.LBE4:
 364:Src/main.c    ****   mailbox_message_received(mailbox_buffer);
 1400              		.loc 1 364 0
 1401 0020 0348     		ldr	r0, .L113
 1402              	.LVL143:
 1403 0022 0023     		movs	r3, #0
 1404              	.LVL144:
 1405 0024 80F83130 		strb	r3, [r0, #49]
 365:Src/main.c    **** }
 1406              		.loc 1 365 0
 1407 0028 FFF7FEFF 		bl	mailbox_message_received
ARM GAS  /tmp/cc6DDMtp.s 			page 42


 1408              	.LVL145:
 1409 002c 08BD     		pop	{r3, pc}
 1410              	.L114:
 1411 002e 00BF     		.align	2
 1412              	.L113:
 1413 0030 00000000 		.word	mailbox_buffer
 1414              		.cfi_endproc
 1415              	.LFE259:
 1417              		.section	.text.Error_Handler,"ax",%progbits
 1418              		.align	1
 1419              		.global	Error_Handler
 1420              		.syntax unified
 1421              		.thumb
 1422              		.thumb_func
 1423              		.fpu softvfp
 1425              	Error_Handler:
 1426              	.LFB271:
 844:Src/main.c    **** 
 845:Src/main.c    **** /* USER CODE BEGIN 4 */
 846:Src/main.c    **** 
 847:Src/main.c    **** /* USER CODE END 4 */
 848:Src/main.c    **** 
 849:Src/main.c    **** /**
 850:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 851:Src/main.c    ****   * @retval None
 852:Src/main.c    ****   */
 853:Src/main.c    **** void Error_Handler(void)
 854:Src/main.c    **** {
 1427              		.loc 1 854 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431 0000 08B5     		push	{r3, lr}
 1432              	.LCFI40:
 1433              		.cfi_def_cfa_offset 8
 1434              		.cfi_offset 3, -8
 1435              		.cfi_offset 14, -4
 855:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 856:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 857:Src/main.c    ****   error_alert("HAL Error_Handler call");
 1436              		.loc 1 857 0
 1437 0002 0248     		ldr	r0, .L117
 1438 0004 FFF7FEFF 		bl	error_alert
 1439              	.LVL146:
 1440 0008 08BD     		pop	{r3, pc}
 1441              	.L118:
 1442 000a 00BF     		.align	2
 1443              	.L117:
 1444 000c 00000000 		.word	.LC15
 1445              		.cfi_endproc
 1446              	.LFE271:
 1448              		.section	.text.MX_I2C2_Init,"ax",%progbits
 1449              		.align	1
 1450              		.syntax unified
 1451              		.thumb
 1452              		.thumb_func
 1453              		.fpu softvfp
ARM GAS  /tmp/cc6DDMtp.s 			page 43


 1455              	MX_I2C2_Init:
 1456              	.LFB264:
 576:Src/main.c    **** 
 1457              		.loc 1 576 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 0
 1460              		@ frame_needed = 0, uses_anonymous_args = 0
 1461 0000 08B5     		push	{r3, lr}
 1462              	.LCFI41:
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 3, -8
 1465              		.cfi_offset 14, -4
 585:Src/main.c    ****   hi2c2.Init.ClockSpeed = 400000;
 1466              		.loc 1 585 0
 1467 0002 0B48     		ldr	r0, .L123
 1468 0004 0B4B     		ldr	r3, .L123+4
 1469 0006 0360     		str	r3, [r0]
 586:Src/main.c    ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1470              		.loc 1 586 0
 1471 0008 0B4B     		ldr	r3, .L123+8
 1472 000a 4360     		str	r3, [r0, #4]
 587:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 1473              		.loc 1 587 0
 1474 000c 0023     		movs	r3, #0
 1475 000e 8360     		str	r3, [r0, #8]
 588:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1476              		.loc 1 588 0
 1477 0010 C360     		str	r3, [r0, #12]
 589:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1478              		.loc 1 589 0
 1479 0012 4FF48042 		mov	r2, #16384
 1480 0016 0261     		str	r2, [r0, #16]
 590:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 1481              		.loc 1 590 0
 1482 0018 4361     		str	r3, [r0, #20]
 591:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1483              		.loc 1 591 0
 1484 001a 8361     		str	r3, [r0, #24]
 592:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1485              		.loc 1 592 0
 1486 001c C361     		str	r3, [r0, #28]
 593:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1487              		.loc 1 593 0
 1488 001e 0362     		str	r3, [r0, #32]
 594:Src/main.c    ****   {
 1489              		.loc 1 594 0
 1490 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1491              	.LVL147:
 1492 0024 00B9     		cbnz	r0, .L122
 1493              	.L119:
 1494 0026 08BD     		pop	{r3, pc}
 1495              	.L122:
 596:Src/main.c    ****   }
 1496              		.loc 1 596 0
 1497 0028 FFF7FEFF 		bl	Error_Handler
 1498              	.LVL148:
 602:Src/main.c    **** 
ARM GAS  /tmp/cc6DDMtp.s 			page 44


 1499              		.loc 1 602 0
 1500 002c FBE7     		b	.L119
 1501              	.L124:
 1502 002e 00BF     		.align	2
 1503              	.L123:
 1504 0030 00000000 		.word	hi2c2
 1505 0034 00580040 		.word	1073764352
 1506 0038 801A0600 		.word	400000
 1507              		.cfi_endproc
 1508              	.LFE264:
 1510              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1511              		.align	1
 1512              		.syntax unified
 1513              		.thumb
 1514              		.thumb_func
 1515              		.fpu softvfp
 1517              	MX_TIM2_Init:
 1518              	.LFB266:
 640:Src/main.c    **** 
 1519              		.loc 1 640 0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 24
 1522              		@ frame_needed = 0, uses_anonymous_args = 0
 1523 0000 00B5     		push	{lr}
 1524              	.LCFI42:
 1525              		.cfi_def_cfa_offset 4
 1526              		.cfi_offset 14, -4
 1527 0002 87B0     		sub	sp, sp, #28
 1528              	.LCFI43:
 1529              		.cfi_def_cfa_offset 32
 646:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1530              		.loc 1 646 0
 1531 0004 0023     		movs	r3, #0
 1532 0006 0293     		str	r3, [sp, #8]
 1533 0008 0393     		str	r3, [sp, #12]
 1534 000a 0493     		str	r3, [sp, #16]
 1535 000c 0593     		str	r3, [sp, #20]
 647:Src/main.c    **** 
 1536              		.loc 1 647 0
 1537 000e 0093     		str	r3, [sp]
 1538 0010 0193     		str	r3, [sp, #4]
 652:Src/main.c    ****   htim2.Init.Prescaler = 9000;
 1539              		.loc 1 652 0
 1540 0012 1648     		ldr	r0, .L133
 1541 0014 4FF08042 		mov	r2, #1073741824
 1542 0018 0260     		str	r2, [r0]
 653:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1543              		.loc 1 653 0
 1544 001a 42F22832 		movw	r2, #9000
 1545 001e 4260     		str	r2, [r0, #4]
 654:Src/main.c    ****   htim2.Init.Period = 60;
 1546              		.loc 1 654 0
 1547 0020 8360     		str	r3, [r0, #8]
 655:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1548              		.loc 1 655 0
 1549 0022 3C22     		movs	r2, #60
 1550 0024 C260     		str	r2, [r0, #12]
ARM GAS  /tmp/cc6DDMtp.s 			page 45


 656:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1551              		.loc 1 656 0
 1552 0026 0361     		str	r3, [r0, #16]
 657:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1553              		.loc 1 657 0
 1554 0028 8361     		str	r3, [r0, #24]
 658:Src/main.c    ****   {
 1555              		.loc 1 658 0
 1556 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1557              	.LVL149:
 1558 002e 98B9     		cbnz	r0, .L130
 1559              	.L126:
 662:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1560              		.loc 1 662 0
 1561 0030 06A9     		add	r1, sp, #24
 1562 0032 4FF48053 		mov	r3, #4096
 1563 0036 41F8103D 		str	r3, [r1, #-16]!
 663:Src/main.c    ****   {
 1564              		.loc 1 663 0
 1565 003a 0C48     		ldr	r0, .L133
 1566 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1567              	.LVL150:
 1568 0040 68B9     		cbnz	r0, .L131
 1569              	.L127:
 667:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1570              		.loc 1 667 0
 1571 0042 0023     		movs	r3, #0
 1572 0044 0093     		str	r3, [sp]
 668:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1573              		.loc 1 668 0
 1574 0046 0193     		str	r3, [sp, #4]
 669:Src/main.c    ****   {
 1575              		.loc 1 669 0
 1576 0048 6946     		mov	r1, sp
 1577 004a 0848     		ldr	r0, .L133
 1578 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1579              	.LVL151:
 1580 0050 40B9     		cbnz	r0, .L132
 1581              	.L125:
 677:Src/main.c    **** 
 1582              		.loc 1 677 0
 1583 0052 07B0     		add	sp, sp, #28
 1584              	.LCFI44:
 1585              		.cfi_remember_state
 1586              		.cfi_def_cfa_offset 4
 1587              		@ sp needed
 1588 0054 5DF804FB 		ldr	pc, [sp], #4
 1589              	.L130:
 1590              	.LCFI45:
 1591              		.cfi_restore_state
 660:Src/main.c    ****   }
 1592              		.loc 1 660 0
 1593 0058 FFF7FEFF 		bl	Error_Handler
 1594              	.LVL152:
 1595 005c E8E7     		b	.L126
 1596              	.L131:
 665:Src/main.c    ****   }
ARM GAS  /tmp/cc6DDMtp.s 			page 46


 1597              		.loc 1 665 0
 1598 005e FFF7FEFF 		bl	Error_Handler
 1599              	.LVL153:
 1600 0062 EEE7     		b	.L127
 1601              	.L132:
 671:Src/main.c    ****   }
 1602              		.loc 1 671 0
 1603 0064 FFF7FEFF 		bl	Error_Handler
 1604              	.LVL154:
 677:Src/main.c    **** 
 1605              		.loc 1 677 0
 1606 0068 F3E7     		b	.L125
 1607              	.L134:
 1608 006a 00BF     		.align	2
 1609              	.L133:
 1610 006c 00000000 		.word	htim2
 1611              		.cfi_endproc
 1612              	.LFE266:
 1614              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1615              		.align	1
 1616              		.syntax unified
 1617              		.thumb
 1618              		.thumb_func
 1619              		.fpu softvfp
 1621              	MX_TIM3_Init:
 1622              	.LFB267:
 685:Src/main.c    **** 
 1623              		.loc 1 685 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 56
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627 0000 00B5     		push	{lr}
 1628              	.LCFI46:
 1629              		.cfi_def_cfa_offset 4
 1630              		.cfi_offset 14, -4
 1631 0002 8FB0     		sub	sp, sp, #60
 1632              	.LCFI47:
 1633              		.cfi_def_cfa_offset 64
 691:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1634              		.loc 1 691 0
 1635 0004 0023     		movs	r3, #0
 1636 0006 0A93     		str	r3, [sp, #40]
 1637 0008 0B93     		str	r3, [sp, #44]
 1638 000a 0C93     		str	r3, [sp, #48]
 1639 000c 0D93     		str	r3, [sp, #52]
 692:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1640              		.loc 1 692 0
 1641 000e 0893     		str	r3, [sp, #32]
 1642 0010 0993     		str	r3, [sp, #36]
 693:Src/main.c    **** 
 1643              		.loc 1 693 0
 1644 0012 0193     		str	r3, [sp, #4]
 1645 0014 0293     		str	r3, [sp, #8]
 1646 0016 0393     		str	r3, [sp, #12]
 1647 0018 0493     		str	r3, [sp, #16]
 1648 001a 0593     		str	r3, [sp, #20]
 1649 001c 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/cc6DDMtp.s 			page 47


 1650 001e 0793     		str	r3, [sp, #28]
 698:Src/main.c    ****   htim3.Init.Prescaler = 16;
 1651              		.loc 1 698 0
 1652 0020 2648     		ldr	r0, .L149
 1653 0022 274A     		ldr	r2, .L149+4
 1654 0024 0260     		str	r2, [r0]
 699:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1655              		.loc 1 699 0
 1656 0026 1022     		movs	r2, #16
 1657 0028 4260     		str	r2, [r0, #4]
 700:Src/main.c    ****   htim3.Init.Period = 10000;
 1658              		.loc 1 700 0
 1659 002a 8360     		str	r3, [r0, #8]
 701:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1660              		.loc 1 701 0
 1661 002c 42F21072 		movw	r2, #10000
 1662 0030 C260     		str	r2, [r0, #12]
 702:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1663              		.loc 1 702 0
 1664 0032 0361     		str	r3, [r0, #16]
 703:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1665              		.loc 1 703 0
 1666 0034 8361     		str	r3, [r0, #24]
 704:Src/main.c    ****   {
 1667              		.loc 1 704 0
 1668 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1669              	.LVL155:
 1670 003a 60BB     		cbnz	r0, .L143
 1671              	.L136:
 708:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1672              		.loc 1 708 0
 1673 003c 0EA9     		add	r1, sp, #56
 1674 003e 4FF48053 		mov	r3, #4096
 1675 0042 41F8103D 		str	r3, [r1, #-16]!
 709:Src/main.c    ****   {
 1676              		.loc 1 709 0
 1677 0046 1D48     		ldr	r0, .L149
 1678 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1679              	.LVL156:
 1680 004c 30BB     		cbnz	r0, .L144
 1681              	.L137:
 713:Src/main.c    ****   {
 1682              		.loc 1 713 0
 1683 004e 1B48     		ldr	r0, .L149
 1684 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1685              	.LVL157:
 1686 0054 28BB     		cbnz	r0, .L145
 1687              	.L138:
 717:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1688              		.loc 1 717 0
 1689 0056 0023     		movs	r3, #0
 1690 0058 0893     		str	r3, [sp, #32]
 718:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1691              		.loc 1 718 0
 1692 005a 0993     		str	r3, [sp, #36]
 719:Src/main.c    ****   {
 1693              		.loc 1 719 0
ARM GAS  /tmp/cc6DDMtp.s 			page 48


 1694 005c 08A9     		add	r1, sp, #32
 1695 005e 1748     		ldr	r0, .L149
 1696 0060 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1697              	.LVL158:
 1698 0064 00BB     		cbnz	r0, .L146
 1699              	.L139:
 723:Src/main.c    ****   sConfigOC.Pulse = 0;
 1700              		.loc 1 723 0
 1701 0066 6023     		movs	r3, #96
 1702 0068 0193     		str	r3, [sp, #4]
 724:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1703              		.loc 1 724 0
 1704 006a 0022     		movs	r2, #0
 1705 006c 0292     		str	r2, [sp, #8]
 725:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1706              		.loc 1 725 0
 1707 006e 0392     		str	r2, [sp, #12]
 726:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1708              		.loc 1 726 0
 1709 0070 0592     		str	r2, [sp, #20]
 727:Src/main.c    ****   {
 1710              		.loc 1 727 0
 1711 0072 01A9     		add	r1, sp, #4
 1712 0074 1148     		ldr	r0, .L149
 1713 0076 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1714              	.LVL159:
 1715 007a C0B9     		cbnz	r0, .L147
 1716              	.L140:
 731:Src/main.c    ****   {
 1717              		.loc 1 731 0
 1718 007c 0422     		movs	r2, #4
 1719 007e 0DEB0201 		add	r1, sp, r2
 1720 0082 0E48     		ldr	r0, .L149
 1721 0084 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1722              	.LVL160:
 1723 0088 A0B9     		cbnz	r0, .L148
 1724              	.L141:
 738:Src/main.c    **** 
 1725              		.loc 1 738 0
 1726 008a 0C48     		ldr	r0, .L149
 1727 008c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1728              	.LVL161:
 740:Src/main.c    **** 
 1729              		.loc 1 740 0
 1730 0090 0FB0     		add	sp, sp, #60
 1731              	.LCFI48:
 1732              		.cfi_remember_state
 1733              		.cfi_def_cfa_offset 4
 1734              		@ sp needed
 1735 0092 5DF804FB 		ldr	pc, [sp], #4
 1736              	.L143:
 1737              	.LCFI49:
 1738              		.cfi_restore_state
 706:Src/main.c    ****   }
 1739              		.loc 1 706 0
 1740 0096 FFF7FEFF 		bl	Error_Handler
 1741              	.LVL162:
ARM GAS  /tmp/cc6DDMtp.s 			page 49


 1742 009a CFE7     		b	.L136
 1743              	.L144:
 711:Src/main.c    ****   }
 1744              		.loc 1 711 0
 1745 009c FFF7FEFF 		bl	Error_Handler
 1746              	.LVL163:
 1747 00a0 D5E7     		b	.L137
 1748              	.L145:
 715:Src/main.c    ****   }
 1749              		.loc 1 715 0
 1750 00a2 FFF7FEFF 		bl	Error_Handler
 1751              	.LVL164:
 1752 00a6 D6E7     		b	.L138
 1753              	.L146:
 721:Src/main.c    ****   }
 1754              		.loc 1 721 0
 1755 00a8 FFF7FEFF 		bl	Error_Handler
 1756              	.LVL165:
 1757 00ac DBE7     		b	.L139
 1758              	.L147:
 729:Src/main.c    ****   }
 1759              		.loc 1 729 0
 1760 00ae FFF7FEFF 		bl	Error_Handler
 1761              	.LVL166:
 1762 00b2 E3E7     		b	.L140
 1763              	.L148:
 733:Src/main.c    ****   }
 1764              		.loc 1 733 0
 1765 00b4 FFF7FEFF 		bl	Error_Handler
 1766              	.LVL167:
 1767 00b8 E7E7     		b	.L141
 1768              	.L150:
 1769 00ba 00BF     		.align	2
 1770              	.L149:
 1771 00bc 00000000 		.word	htim3
 1772 00c0 00040040 		.word	1073742848
 1773              		.cfi_endproc
 1774              	.LFE267:
 1776              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1777              		.align	1
 1778              		.syntax unified
 1779              		.thumb
 1780              		.thumb_func
 1781              		.fpu softvfp
 1783              	MX_USART1_UART_Init:
 1784              	.LFB269:
 793:Src/main.c    **** 
 1785              		.loc 1 793 0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 1789 0000 08B5     		push	{r3, lr}
 1790              	.LCFI50:
 1791              		.cfi_def_cfa_offset 8
 1792              		.cfi_offset 3, -8
 1793              		.cfi_offset 14, -4
 802:Src/main.c    ****   huart1.Init.BaudRate = 115200;
ARM GAS  /tmp/cc6DDMtp.s 			page 50


 1794              		.loc 1 802 0
 1795 0002 0B48     		ldr	r0, .L155
 1796 0004 0B4B     		ldr	r3, .L155+4
 1797 0006 0360     		str	r3, [r0]
 803:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1798              		.loc 1 803 0
 1799 0008 4FF4E133 		mov	r3, #115200
 1800 000c 4360     		str	r3, [r0, #4]
 804:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1801              		.loc 1 804 0
 1802 000e 0021     		movs	r1, #0
 1803 0010 8160     		str	r1, [r0, #8]
 805:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 1804              		.loc 1 805 0
 1805 0012 C160     		str	r1, [r0, #12]
 806:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1806              		.loc 1 806 0
 1807 0014 0161     		str	r1, [r0, #16]
 807:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1808              		.loc 1 807 0
 1809 0016 0C23     		movs	r3, #12
 1810 0018 4361     		str	r3, [r0, #20]
 808:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1811              		.loc 1 808 0
 1812 001a 8161     		str	r1, [r0, #24]
 809:Src/main.c    ****   if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 1813              		.loc 1 809 0
 1814 001c C161     		str	r1, [r0, #28]
 810:Src/main.c    ****   {
 1815              		.loc 1 810 0
 1816 001e 0A46     		mov	r2, r1
 1817 0020 FFF7FEFF 		bl	HAL_MultiProcessor_Init
 1818              	.LVL168:
 1819 0024 00B9     		cbnz	r0, .L154
 1820              	.L151:
 1821 0026 08BD     		pop	{r3, pc}
 1822              	.L154:
 812:Src/main.c    ****   }
 1823              		.loc 1 812 0
 1824 0028 FFF7FEFF 		bl	Error_Handler
 1825              	.LVL169:
 818:Src/main.c    **** 
 1826              		.loc 1 818 0
 1827 002c FBE7     		b	.L151
 1828              	.L156:
 1829 002e 00BF     		.align	2
 1830              	.L155:
 1831 0030 00000000 		.word	huart1
 1832 0034 00380140 		.word	1073821696
 1833              		.cfi_endproc
 1834              	.LFE269:
 1836              		.section	.text.MX_RTC_Init,"ax",%progbits
 1837              		.align	1
 1838              		.syntax unified
 1839              		.thumb
 1840              		.thumb_func
 1841              		.fpu softvfp
ARM GAS  /tmp/cc6DDMtp.s 			page 51


 1843              	MX_RTC_Init:
 1844              	.LFB265:
 610:Src/main.c    **** 
 1845              		.loc 1 610 0
 1846              		.cfi_startproc
 1847              		@ args = 0, pretend = 0, frame = 0
 1848              		@ frame_needed = 0, uses_anonymous_args = 0
 1849 0000 08B5     		push	{r3, lr}
 1850              	.LCFI51:
 1851              		.cfi_def_cfa_offset 8
 1852              		.cfi_offset 3, -8
 1853              		.cfi_offset 14, -4
 621:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 1854              		.loc 1 621 0
 1855 0002 0848     		ldr	r0, .L161
 1856 0004 084B     		ldr	r3, .L161+4
 1857 0006 0360     		str	r3, [r0]
 622:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 1858              		.loc 1 622 0
 1859 0008 4FF0FF33 		mov	r3, #-1
 1860 000c 4360     		str	r3, [r0, #4]
 623:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 1861              		.loc 1 623 0
 1862 000e 4FF48073 		mov	r3, #256
 1863 0012 8360     		str	r3, [r0, #8]
 624:Src/main.c    ****   {
 1864              		.loc 1 624 0
 1865 0014 FFF7FEFF 		bl	HAL_RTC_Init
 1866              	.LVL170:
 1867 0018 00B9     		cbnz	r0, .L160
 1868              	.L157:
 1869 001a 08BD     		pop	{r3, pc}
 1870              	.L160:
 626:Src/main.c    ****   }
 1871              		.loc 1 626 0
 1872 001c FFF7FEFF 		bl	Error_Handler
 1873              	.LVL171:
 632:Src/main.c    **** 
 1874              		.loc 1 632 0
 1875 0020 FBE7     		b	.L157
 1876              	.L162:
 1877 0022 00BF     		.align	2
 1878              	.L161:
 1879 0024 00000000 		.word	hrtc
 1880 0028 00280040 		.word	1073752064
 1881              		.cfi_endproc
 1882              	.LFE265:
 1884              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1885              		.align	1
 1886              		.syntax unified
 1887              		.thumb
 1888              		.thumb_func
 1889              		.fpu softvfp
 1891              	MX_TIM4_Init:
 1892              	.LFB268:
 748:Src/main.c    **** 
 1893              		.loc 1 748 0
ARM GAS  /tmp/cc6DDMtp.s 			page 52


 1894              		.cfi_startproc
 1895              		@ args = 0, pretend = 0, frame = 24
 1896              		@ frame_needed = 0, uses_anonymous_args = 0
 1897 0000 00B5     		push	{lr}
 1898              	.LCFI52:
 1899              		.cfi_def_cfa_offset 4
 1900              		.cfi_offset 14, -4
 1901 0002 87B0     		sub	sp, sp, #28
 1902              	.LCFI53:
 1903              		.cfi_def_cfa_offset 32
 754:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1904              		.loc 1 754 0
 1905 0004 0023     		movs	r3, #0
 1906 0006 0293     		str	r3, [sp, #8]
 1907 0008 0393     		str	r3, [sp, #12]
 1908 000a 0493     		str	r3, [sp, #16]
 1909 000c 0593     		str	r3, [sp, #20]
 755:Src/main.c    **** 
 1910              		.loc 1 755 0
 1911 000e 0093     		str	r3, [sp]
 1912 0010 0193     		str	r3, [sp, #4]
 760:Src/main.c    ****   htim4.Init.Prescaler = 8;
 1913              		.loc 1 760 0
 1914 0012 1548     		ldr	r0, .L171
 1915 0014 154A     		ldr	r2, .L171+4
 1916 0016 0260     		str	r2, [r0]
 761:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1917              		.loc 1 761 0
 1918 0018 0822     		movs	r2, #8
 1919 001a 4260     		str	r2, [r0, #4]
 762:Src/main.c    ****   htim4.Init.Period = 5000;
 1920              		.loc 1 762 0
 1921 001c 8360     		str	r3, [r0, #8]
 763:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1922              		.loc 1 763 0
 1923 001e 41F28832 		movw	r2, #5000
 1924 0022 C260     		str	r2, [r0, #12]
 764:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1925              		.loc 1 764 0
 1926 0024 0361     		str	r3, [r0, #16]
 765:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 1927              		.loc 1 765 0
 1928 0026 8361     		str	r3, [r0, #24]
 766:Src/main.c    ****   {
 1929              		.loc 1 766 0
 1930 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1931              	.LVL172:
 1932 002c 98B9     		cbnz	r0, .L168
 1933              	.L164:
 770:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 1934              		.loc 1 770 0
 1935 002e 06A9     		add	r1, sp, #24
 1936 0030 4FF48053 		mov	r3, #4096
 1937 0034 41F8103D 		str	r3, [r1, #-16]!
 771:Src/main.c    ****   {
 1938              		.loc 1 771 0
 1939 0038 0B48     		ldr	r0, .L171
ARM GAS  /tmp/cc6DDMtp.s 			page 53


 1940 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1941              	.LVL173:
 1942 003e 68B9     		cbnz	r0, .L169
 1943              	.L165:
 775:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1944              		.loc 1 775 0
 1945 0040 0023     		movs	r3, #0
 1946 0042 0093     		str	r3, [sp]
 776:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 1947              		.loc 1 776 0
 1948 0044 0193     		str	r3, [sp, #4]
 777:Src/main.c    ****   {
 1949              		.loc 1 777 0
 1950 0046 6946     		mov	r1, sp
 1951 0048 0748     		ldr	r0, .L171
 1952 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1953              	.LVL174:
 1954 004e 40B9     		cbnz	r0, .L170
 1955              	.L163:
 785:Src/main.c    **** 
 1956              		.loc 1 785 0
 1957 0050 07B0     		add	sp, sp, #28
 1958              	.LCFI54:
 1959              		.cfi_remember_state
 1960              		.cfi_def_cfa_offset 4
 1961              		@ sp needed
 1962 0052 5DF804FB 		ldr	pc, [sp], #4
 1963              	.L168:
 1964              	.LCFI55:
 1965              		.cfi_restore_state
 768:Src/main.c    ****   }
 1966              		.loc 1 768 0
 1967 0056 FFF7FEFF 		bl	Error_Handler
 1968              	.LVL175:
 1969 005a E8E7     		b	.L164
 1970              	.L169:
 773:Src/main.c    ****   }
 1971              		.loc 1 773 0
 1972 005c FFF7FEFF 		bl	Error_Handler
 1973              	.LVL176:
 1974 0060 EEE7     		b	.L165
 1975              	.L170:
 779:Src/main.c    ****   }
 1976              		.loc 1 779 0
 1977 0062 FFF7FEFF 		bl	Error_Handler
 1978              	.LVL177:
 785:Src/main.c    **** 
 1979              		.loc 1 785 0
 1980 0066 F3E7     		b	.L163
 1981              	.L172:
 1982              		.align	2
 1983              	.L171:
 1984 0068 00000000 		.word	htim4
 1985 006c 00080040 		.word	1073743872
 1986              		.cfi_endproc
 1987              	.LFE268:
 1989              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /tmp/cc6DDMtp.s 			page 54


 1990              		.align	1
 1991              		.global	SystemClock_Config
 1992              		.syntax unified
 1993              		.thumb
 1994              		.thumb_func
 1995              		.fpu softvfp
 1997              	SystemClock_Config:
 1998              	.LFB263:
 531:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1999              		.loc 1 531 0
 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 80
 2002              		@ frame_needed = 0, uses_anonymous_args = 0
 2003 0000 00B5     		push	{lr}
 2004              	.LCFI56:
 2005              		.cfi_def_cfa_offset 4
 2006              		.cfi_offset 14, -4
 2007 0002 95B0     		sub	sp, sp, #84
 2008              	.LCFI57:
 2009              		.cfi_def_cfa_offset 88
 532:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2010              		.loc 1 532 0
 2011 0004 2822     		movs	r2, #40
 2012 0006 0021     		movs	r1, #0
 2013 0008 0DEB0200 		add	r0, sp, r2
 2014 000c FFF7FEFF 		bl	memset
 2015              	.LVL178:
 533:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2016              		.loc 1 533 0
 2017 0010 0023     		movs	r3, #0
 2018 0012 0593     		str	r3, [sp, #20]
 2019 0014 0693     		str	r3, [sp, #24]
 2020 0016 0793     		str	r3, [sp, #28]
 2021 0018 0893     		str	r3, [sp, #32]
 2022 001a 0993     		str	r3, [sp, #36]
 534:Src/main.c    **** 
 2023              		.loc 1 534 0
 2024 001c 0193     		str	r3, [sp, #4]
 2025 001e 0293     		str	r3, [sp, #8]
 2026 0020 0393     		str	r3, [sp, #12]
 2027 0022 0493     		str	r3, [sp, #16]
 538:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2028              		.loc 1 538 0
 2029 0024 0A23     		movs	r3, #10
 2030 0026 0A93     		str	r3, [sp, #40]
 539:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2031              		.loc 1 539 0
 2032 0028 0123     		movs	r3, #1
 2033 002a 0E93     		str	r3, [sp, #56]
 540:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 2034              		.loc 1 540 0
 2035 002c 1022     		movs	r2, #16
 2036 002e 0F92     		str	r2, [sp, #60]
 541:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2037              		.loc 1 541 0
 2038 0030 1093     		str	r3, [sp, #64]
 542:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
ARM GAS  /tmp/cc6DDMtp.s 			page 55


 2039              		.loc 1 542 0
 2040 0032 0223     		movs	r3, #2
 2041 0034 1193     		str	r3, [sp, #68]
 545:Src/main.c    ****   {
 2042              		.loc 1 545 0
 2043 0036 0AA8     		add	r0, sp, #40
 2044 0038 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2045              	.LVL179:
 2046 003c B8B9     		cbnz	r0, .L178
 2047              	.L174:
 551:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2048              		.loc 1 551 0
 2049 003e 0F23     		movs	r3, #15
 2050 0040 0593     		str	r3, [sp, #20]
 553:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2051              		.loc 1 553 0
 2052 0042 0223     		movs	r3, #2
 2053 0044 0693     		str	r3, [sp, #24]
 554:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2054              		.loc 1 554 0
 2055 0046 0021     		movs	r1, #0
 2056 0048 0791     		str	r1, [sp, #28]
 555:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2057              		.loc 1 555 0
 2058 004a 0891     		str	r1, [sp, #32]
 556:Src/main.c    **** 
 2059              		.loc 1 556 0
 2060 004c 0991     		str	r1, [sp, #36]
 558:Src/main.c    ****   {
 2061              		.loc 1 558 0
 2062 004e 05A8     		add	r0, sp, #20
 2063 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2064              	.LVL180:
 2065 0054 70B9     		cbnz	r0, .L179
 2066              	.L175:
 562:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 2067              		.loc 1 562 0
 2068 0056 0123     		movs	r3, #1
 2069 0058 0193     		str	r3, [sp, #4]
 563:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 2070              		.loc 1 563 0
 2071 005a 4FF40073 		mov	r3, #512
 2072 005e 0293     		str	r3, [sp, #8]
 564:Src/main.c    ****   {
 2073              		.loc 1 564 0
 2074 0060 01A8     		add	r0, sp, #4
 2075 0062 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2076              	.LVL181:
 2077 0066 40B9     		cbnz	r0, .L180
 2078              	.L173:
 568:Src/main.c    **** 
 2079              		.loc 1 568 0
 2080 0068 15B0     		add	sp, sp, #84
 2081              	.LCFI58:
 2082              		.cfi_remember_state
 2083              		.cfi_def_cfa_offset 4
 2084              		@ sp needed
ARM GAS  /tmp/cc6DDMtp.s 			page 56


 2085 006a 5DF804FB 		ldr	pc, [sp], #4
 2086              	.L178:
 2087              	.LCFI59:
 2088              		.cfi_restore_state
 547:Src/main.c    ****   }
 2089              		.loc 1 547 0
 2090 006e FFF7FEFF 		bl	Error_Handler
 2091              	.LVL182:
 2092 0072 E4E7     		b	.L174
 2093              	.L179:
 560:Src/main.c    ****   }
 2094              		.loc 1 560 0
 2095 0074 FFF7FEFF 		bl	Error_Handler
 2096              	.LVL183:
 2097 0078 EDE7     		b	.L175
 2098              	.L180:
 566:Src/main.c    ****   }
 2099              		.loc 1 566 0
 2100 007a FFF7FEFF 		bl	Error_Handler
 2101              	.LVL184:
 568:Src/main.c    **** 
 2102              		.loc 1 568 0
 2103 007e F3E7     		b	.L173
 2104              		.cfi_endproc
 2105              	.LFE263:
 2107              		.section	.text.main,"ax",%progbits
 2108              		.align	1
 2109              		.global	main
 2110              		.syntax unified
 2111              		.thumb
 2112              		.thumb_func
 2113              		.fpu softvfp
 2115              	main:
 2116              	.LFB262:
 476:Src/main.c    ****   /* USER CODE BEGIN 1 */
 2117              		.loc 1 476 0
 2118              		.cfi_startproc
 2119              		@ Volatile: function does not return.
 2120              		@ args = 0, pretend = 0, frame = 0
 2121              		@ frame_needed = 0, uses_anonymous_args = 0
 2122 0000 08B5     		push	{r3, lr}
 2123              	.LCFI60:
 2124              		.cfi_def_cfa_offset 8
 2125              		.cfi_offset 3, -8
 2126              		.cfi_offset 14, -4
 485:Src/main.c    **** 
 2127              		.loc 1 485 0
 2128 0002 FFF7FEFF 		bl	HAL_Init
 2129              	.LVL185:
 492:Src/main.c    **** 
 2130              		.loc 1 492 0
 2131 0006 FFF7FEFF 		bl	SystemClock_Config
 2132              	.LVL186:
 499:Src/main.c    ****   MX_I2C2_Init();
 2133              		.loc 1 499 0
 2134 000a FFF7FEFF 		bl	MX_GPIO_Init
 2135              	.LVL187:
ARM GAS  /tmp/cc6DDMtp.s 			page 57


 500:Src/main.c    ****   MX_TIM2_Init();
 2136              		.loc 1 500 0
 2137 000e FFF7FEFF 		bl	MX_I2C2_Init
 2138              	.LVL188:
 501:Src/main.c    ****   MX_TIM3_Init();
 2139              		.loc 1 501 0
 2140 0012 FFF7FEFF 		bl	MX_TIM2_Init
 2141              	.LVL189:
 502:Src/main.c    ****   MX_USART1_UART_Init();
 2142              		.loc 1 502 0
 2143 0016 FFF7FEFF 		bl	MX_TIM3_Init
 2144              	.LVL190:
 503:Src/main.c    ****   MX_RTC_Init();
 2145              		.loc 1 503 0
 2146 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 2147              	.LVL191:
 504:Src/main.c    ****   MX_TIM4_Init();
 2148              		.loc 1 504 0
 2149 001e FFF7FEFF 		bl	MX_RTC_Init
 2150              	.LVL192:
 505:Src/main.c    ****   /* USER CODE BEGIN 2 */
 2151              		.loc 1 505 0
 2152 0022 FFF7FEFF 		bl	MX_TIM4_Init
 2153              	.LVL193:
 508:Src/main.c    ****   
 2154              		.loc 1 508 0
 2155 0026 FFF7FEFF 		bl	init_system
 2156              	.LVL194:
 2157              	.L182:
 518:Src/main.c    ****     /* USER CODE END WHILE */
 2158              		.loc 1 518 0 discriminator 1
 2159 002a FFF7FEFF 		bl	mailbox_listen
 2160              	.LVL195:
 2161 002e FCE7     		b	.L182
 2162              		.cfi_endproc
 2163              	.LFE262:
 2165              		.comm	mailbox_buffer,50,4
 2166              		.comm	pitch_filter,28,4
 2167              		.comm	roll_filter,28,4
 2168              		.comm	servo_pitch,20,4
 2169              		.comm	servo_roll,20,4
 2170              		.comm	smoothing,4,4
 2171              		.comm	pitch_compensation,4,4
 2172              		.comm	roll_compensation,4,4
 2173              		.comm	sensor_factor,4,4
 2174              		.comm	sensor_pitch,4,4
 2175              		.comm	sensor_roll,4,4
 2176              		.comm	position_sensor,28,4
 2177              		.comm	huart1,64,4
 2178              		.comm	htim4,64,4
 2179              		.comm	htim3,64,4
 2180              		.comm	htim2,64,4
 2181              		.comm	hrtc,20,4
 2182              		.comm	hi2c2,84,4
 2183              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 2184              		.align	2
 2185              	.LC15:
ARM GAS  /tmp/cc6DDMtp.s 			page 58


 2186 0000 48414C20 		.ascii	"HAL Error_Handler call\000"
 2186      4572726F 
 2186      725F4861 
 2186      6E646C65 
 2186      72206361 
 2187              		.section	.rodata.error_alert.str1.4,"aMS",%progbits,1
 2188              		.align	2
 2189              	.LC0:
 2190 0000 7B227479 		.ascii	"{\"type\":\"error\",\"text\":\"%s\"}\012\015\000"
 2190      7065223A 
 2190      22657272 
 2190      6F72222C 
 2190      22746578 
 2191              		.section	.rodata.init_position_sensor.str1.4,"aMS",%progbits,1
 2192              		.align	2
 2193              	.LC4:
 2194 0000 43616E6E 		.ascii	"Cannot init MPU6050\000"
 2194      6F742069 
 2194      6E697420 
 2194      4D505536 
 2194      30353000 
 2195              		.section	.rodata.init_servomotors.str1.4,"aMS",%progbits,1
 2196              		.align	2
 2197              	.LC1:
 2198 0000 43616E6E 		.ascii	"Cannot init servo_roll\000"
 2198      6F742069 
 2198      6E697420 
 2198      73657276 
 2198      6F5F726F 
 2199 0017 00       		.space	1
 2200              	.LC2:
 2201 0018 43616E6E 		.ascii	"Cannot init servo_pitch\000"
 2201      6F742069 
 2201      6E697420 
 2201      73657276 
 2201      6F5F7069 
 2202              		.section	.rodata.init_system.str1.4,"aMS",%progbits,1
 2203              		.align	2
 2204              	.LC6:
 2205 0000 43616E6E 		.ascii	"Cannot init MAF\000"
 2205      6F742069 
 2205      6E697420 
 2205      4D414600 
 2206              		.section	.rodata.mailbox_message_received.str1.4,"aMS",%progbits,1
 2207              		.align	2
 2208              	.LC13:
 2209 0000 70617573 		.ascii	"pause\000"
 2209      6500
 2210 0006 0000     		.space	2
 2211              	.LC14:
 2212 0008 72657375 		.ascii	"resume\000"
 2212      6D6500
 2213              		.section	.rodata.send_angle_pack.str1.4,"aMS",%progbits,1
 2214              		.align	2
 2215              	.LC9:
 2216 0000 7B227479 		.ascii	"{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d, \"tar"
 2216      7065223A 
ARM GAS  /tmp/cc6DDMtp.s 			page 59


 2216      22616E67 
 2216      6C65222C 
 2216      22706974 
 2217 002a 67657422 		.ascii	"get\":\"sensor\"}\012\000"
 2217      3A227365 
 2217      6E736F72 
 2217      227D0A00 
 2218 003a 0000     		.space	2
 2219              	.LC10:
 2220 003c 7B227479 		.ascii	"{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d, \"tar"
 2220      7065223A 
 2220      22616E67 
 2220      6C65222C 
 2220      22706974 
 2221 0066 67657422 		.ascii	"get\":\"servo\"}\012\000"
 2221      3A227365 
 2221      72766F22 
 2221      7D0A00
 2222              		.section	.rodata.send_echo_pack.str1.4,"aMS",%progbits,1
 2223              		.align	2
 2224              	.LC11:
 2225 0000 7B227479 		.ascii	"{\"type\":\"echo\",\"text\":\"%s\"}\012\000"
 2225      7065223A 
 2225      22656368 
 2225      6F222C22 
 2225      74657874 
 2226              		.section	.rodata.send_message_pack.str1.4,"aMS",%progbits,1
 2227              		.align	2
 2228              	.LC12:
 2229 0000 7B227479 		.ascii	"{\"type\":\"message\",\"text\":\"%s\"}\012\000"
 2229      7065223A 
 2229      226D6573 
 2229      73616765 
 2229      222C2274 
 2230              		.section	.rodata.send_value_pack.str1.4,"aMS",%progbits,1
 2231              		.align	2
 2232              	.LC7:
 2233 0000 7B227479 		.ascii	"{\"type\":\"value\", \"target\",\"smoothing\", \"va"
 2233      7065223A 
 2233      2276616C 
 2233      7565222C 
 2233      20227461 
 2234 002a 6C756522 		.ascii	"lue\":%s}\012\000"
 2234      3A25737D 
 2234      0A00
 2235              	.LC8:
 2236 0034 7B227479 		.ascii	"{\"type\":\"value\", \"target\",\"factor\", \"value"
 2236      7065223A 
 2236      2276616C 
 2236      7565222C 
 2236      20227461 
 2237 005e 223A2573 		.ascii	"\":%s}\012\000"
 2237      7D0A00
 2238              		.section	.rodata.test_sensor.str1.4,"aMS",%progbits,1
 2239              		.align	2
 2240              	.LC3:
 2241 0000 4D505536 		.ascii	"MPU6050 connection fail\000"
ARM GAS  /tmp/cc6DDMtp.s 			page 60


 2241      30353020 
 2241      636F6E6E 
 2241      65637469 
 2241      6F6E2066 
 2242              		.section	.rodata.update_position_sensor.str1.4,"aMS",%progbits,1
 2243              		.align	2
 2244              	.LC5:
 2245 0000 43616E6E 		.ascii	"Cannot read MPU6050 Read Acce\000"
 2245      6F742072 
 2245      65616420 
 2245      4D505536 
 2245      30353020 
 2246              		.text
 2247              	.Letext0:
 2248              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2249              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2250              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 2251              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2252              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2253              		.file 7 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2254              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2255              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2256              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2257              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2258              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2259              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 2260              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 2261              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2262              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 2263              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2264              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h"
 2265              		.file 19 "Inc/main.h"
 2266              		.file 20 "/usr/include/newlib/sys/lock.h"
 2267              		.file 21 "/usr/include/newlib/sys/_types.h"
 2268              		.file 22 "/usr/include/newlib/sys/reent.h"
 2269              		.file 23 "/usr/include/newlib/math.h"
 2270              		.file 24 "stm32-servomotor/servomotor.h"
 2271              		.file 25 "stm32-mpu6050/mpu6050.h"
 2272              		.file 26 "/usr/include/newlib/stdlib.h"
 2273              		.file 27 "signals/c/moving-average/moving_average.h"
 2274              		.file 28 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2275              		.file 29 "/usr/include/newlib/string.h"
 2276              		.file 30 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 2277              		.file 31 "/usr/include/newlib/stdio.h"
 2278              		.file 32 "Inc/float_to_string.h"
ARM GAS  /tmp/cc6DDMtp.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc6DDMtp.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc6DDMtp.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc6DDMtp.s:97     .text.MX_GPIO_Init:000000000000005c $d
     /tmp/cc6DDMtp.s:103    .text.error_alert:0000000000000000 $t
     /tmp/cc6DDMtp.s:110    .text.error_alert:0000000000000000 error_alert
     /tmp/cc6DDMtp.s:182    .text.error_alert:0000000000000054 $d
                            *COM*:0000000000000040 huart1
     /tmp/cc6DDMtp.s:189    .text.init_servomotors:0000000000000000 $t
     /tmp/cc6DDMtp.s:196    .text.init_servomotors:0000000000000000 init_servomotors
     /tmp/cc6DDMtp.s:258    .text.init_servomotors:0000000000000040 $d
                            *COM*:0000000000000040 htim3
                            *COM*:0000000000000014 servo_roll
                            *COM*:0000000000000014 servo_pitch
     /tmp/cc6DDMtp.s:268    .text.init_servomotors_motion:0000000000000000 $t
     /tmp/cc6DDMtp.s:275    .text.init_servomotors_motion:0000000000000000 init_servomotors_motion
     /tmp/cc6DDMtp.s:294    .text.init_servomotors_motion:000000000000000c $d
     /tmp/cc6DDMtp.s:299    .text.servo_update:0000000000000000 $t
     /tmp/cc6DDMtp.s:306    .text.servo_update:0000000000000000 servo_update
     /tmp/cc6DDMtp.s:333    .text.servo_update:0000000000000018 $d
                            *COM*:0000000000000004 roll_compensation
                            *COM*:0000000000000004 pitch_compensation
     /tmp/cc6DDMtp.s:341    .text.test_sensor:0000000000000000 $t
     /tmp/cc6DDMtp.s:348    .text.test_sensor:0000000000000000 test_sensor
     /tmp/cc6DDMtp.s:419    .text.test_sensor:0000000000000058 $d
                            *COM*:0000000000000054 hi2c2
     /tmp/cc6DDMtp.s:430    .text.sensor_calc_position:0000000000000000 $t
     /tmp/cc6DDMtp.s:437    .text.sensor_calc_position:0000000000000000 sensor_calc_position
     /tmp/cc6DDMtp.s:541    .text.sensor_calc_position:00000000000000b8 $d
                            *COM*:000000000000001c position_sensor
                            *COM*:0000000000000004 sensor_factor
     /tmp/cc6DDMtp.s:550    .text.init_position_sensor:0000000000000000 $t
     /tmp/cc6DDMtp.s:557    .text.init_position_sensor:0000000000000000 init_position_sensor
     /tmp/cc6DDMtp.s:626    .text.init_position_sensor:0000000000000048 $d
                            *COM*:0000000000000004 sensor_roll
                            *COM*:0000000000000004 sensor_pitch
                            *COM*:0000000000000040 htim4
     /tmp/cc6DDMtp.s:638    .text.update_position_sensor:0000000000000000 $t
     /tmp/cc6DDMtp.s:645    .text.update_position_sensor:0000000000000000 update_position_sensor
     /tmp/cc6DDMtp.s:717    .text.update_position_sensor:000000000000005c $d
                            *COM*:000000000000001c roll_filter
                            *COM*:000000000000001c pitch_filter
     /tmp/cc6DDMtp.s:731    .text.change_smoothing:0000000000000000 $t
     /tmp/cc6DDMtp.s:738    .text.change_smoothing:0000000000000000 change_smoothing
     /tmp/cc6DDMtp.s:809    .text.change_smoothing:0000000000000054 $d
                            *COM*:0000000000000004 smoothing
     /tmp/cc6DDMtp.s:818    .text.init_uart_messaging:0000000000000000 $t
     /tmp/cc6DDMtp.s:825    .text.init_uart_messaging:0000000000000000 init_uart_messaging
     /tmp/cc6DDMtp.s:844    .text.init_uart_messaging:000000000000000c $d
                            *COM*:0000000000000040 htim2
     /tmp/cc6DDMtp.s:849    .text.init_system:0000000000000000 $t
     /tmp/cc6DDMtp.s:856    .text.init_system:0000000000000000 init_system
     /tmp/cc6DDMtp.s:913    .text.init_system:0000000000000040 $d
     /tmp/cc6DDMtp.s:921    .text.send_value_pack:0000000000000000 $t
     /tmp/cc6DDMtp.s:928    .text.send_value_pack:0000000000000000 send_value_pack
     /tmp/cc6DDMtp.s:981    .text.send_value_pack:000000000000002c $d
ARM GAS  /tmp/cc6DDMtp.s 			page 62


     /tmp/cc6DDMtp.s:988    .text.send_angle_pack:0000000000000000 $t
     /tmp/cc6DDMtp.s:995    .text.send_angle_pack:0000000000000000 send_angle_pack
     /tmp/cc6DDMtp.s:1071   .text.send_angle_pack:0000000000000058 $d
     /tmp/cc6DDMtp.s:1078   .text.uart_message_update:0000000000000000 $t
     /tmp/cc6DDMtp.s:1085   .text.uart_message_update:0000000000000000 uart_message_update
     /tmp/cc6DDMtp.s:1116   .text.uart_message_update:0000000000000020 $d
     /tmp/cc6DDMtp.s:1124   .text.send_echo_pack:0000000000000000 $t
     /tmp/cc6DDMtp.s:1131   .text.send_echo_pack:0000000000000000 send_echo_pack
     /tmp/cc6DDMtp.s:1171   .text.send_echo_pack:0000000000000028 $d
     /tmp/cc6DDMtp.s:1177   .text.send_message_pack:0000000000000000 $t
     /tmp/cc6DDMtp.s:1184   .text.send_message_pack:0000000000000000 send_message_pack
     /tmp/cc6DDMtp.s:1224   .text.send_message_pack:0000000000000028 $d
     /tmp/cc6DDMtp.s:1230   .text.init_mailbox:0000000000000000 $t
     /tmp/cc6DDMtp.s:1237   .text.init_mailbox:0000000000000000 init_mailbox
     /tmp/cc6DDMtp.s:1249   .text.mailbox_listen:0000000000000000 $t
     /tmp/cc6DDMtp.s:1256   .text.mailbox_listen:0000000000000000 mailbox_listen
     /tmp/cc6DDMtp.s:1278   .text.mailbox_listen:0000000000000010 $d
                            *COM*:0000000000000032 mailbox_buffer
     /tmp/cc6DDMtp.s:1284   .text.mailbox_message_received:0000000000000000 $t
     /tmp/cc6DDMtp.s:1291   .text.mailbox_message_received:0000000000000000 mailbox_message_received
     /tmp/cc6DDMtp.s:1343   .text.mailbox_message_received:0000000000000034 $d
     /tmp/cc6DDMtp.s:1349   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc6DDMtp.s:1356   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc6DDMtp.s:1413   .text.HAL_UART_RxCpltCallback:0000000000000030 $d
     /tmp/cc6DDMtp.s:1418   .text.Error_Handler:0000000000000000 $t
     /tmp/cc6DDMtp.s:1425   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc6DDMtp.s:1444   .text.Error_Handler:000000000000000c $d
     /tmp/cc6DDMtp.s:1449   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/cc6DDMtp.s:1455   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/cc6DDMtp.s:1504   .text.MX_I2C2_Init:0000000000000030 $d
     /tmp/cc6DDMtp.s:1511   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc6DDMtp.s:1517   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cc6DDMtp.s:1610   .text.MX_TIM2_Init:000000000000006c $d
     /tmp/cc6DDMtp.s:1615   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cc6DDMtp.s:1621   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cc6DDMtp.s:1771   .text.MX_TIM3_Init:00000000000000bc $d
     /tmp/cc6DDMtp.s:1777   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc6DDMtp.s:1783   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc6DDMtp.s:1831   .text.MX_USART1_UART_Init:0000000000000030 $d
     /tmp/cc6DDMtp.s:1837   .text.MX_RTC_Init:0000000000000000 $t
     /tmp/cc6DDMtp.s:1843   .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/cc6DDMtp.s:1879   .text.MX_RTC_Init:0000000000000024 $d
                            *COM*:0000000000000014 hrtc
     /tmp/cc6DDMtp.s:1885   .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/cc6DDMtp.s:1891   .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/cc6DDMtp.s:1984   .text.MX_TIM4_Init:0000000000000068 $d
     /tmp/cc6DDMtp.s:1990   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc6DDMtp.s:1997   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc6DDMtp.s:2108   .text.main:0000000000000000 $t
     /tmp/cc6DDMtp.s:2115   .text.main:0000000000000000 main
     /tmp/cc6DDMtp.s:2184   .rodata.Error_Handler.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2188   .rodata.error_alert.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2192   .rodata.init_position_sensor.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2196   .rodata.init_servomotors.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2203   .rodata.init_system.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2207   .rodata.mailbox_message_received.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2214   .rodata.send_angle_pack.str1.4:0000000000000000 $d
ARM GAS  /tmp/cc6DDMtp.s 			page 63


     /tmp/cc6DDMtp.s:2223   .rodata.send_echo_pack.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2227   .rodata.send_message_pack.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2231   .rodata.send_value_pack.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2239   .rodata.test_sensor.str1.4:0000000000000000 $d
     /tmp/cc6DDMtp.s:2243   .rodata.update_position_sensor.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_DisableIRQ
sprintf
strlen
HAL_UART_Transmit
HAL_Delay
HAL_NVIC_SystemReset
servo_init
servo_set_offset
HAL_TIM_Base_Start_IT
servo_set_position
HAL_I2C_Master_Transmit
HAL_I2C_Master_Receive
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
__aeabi_fmul
sqrt
atan
SD_MPU6050_Init
SD_MPU6050_ReadAccelerometer
maf_filter
delete_maf
init_maf
HAL_NVIC_EnableIRQ
float_to_string
__aeabi_f2iz
HAL_UART_Receive_IT
strcmp
HAL_I2C_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_MultiProcessor_Init
HAL_RTC_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init

ARM GAS  /tmp/cc2n0PMc.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB256:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdio.h>
  27:Src/main.c    **** #include <string.h>
  28:Src/main.c    **** #include <math.h>
  29:Src/main.c    **** #include <float.h>
  30:Src/main.c    **** #include <servomotor.h>
  31:Src/main.c    **** #include <mpu6050.h>
  32:Src/main.c    **** /* USER CODE END Includes */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/cc2n0PMc.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* USER CODE END PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PD */
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** I2C_HandleTypeDef hi2c2;
  49:Src/main.c    **** 
  50:Src/main.c    **** RTC_HandleTypeDef hrtc;
  51:Src/main.c    **** 
  52:Src/main.c    **** TIM_HandleTypeDef htim2;
  53:Src/main.c    **** TIM_HandleTypeDef htim3;
  54:Src/main.c    **** 
  55:Src/main.c    **** UART_HandleTypeDef huart1;
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE BEGIN PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** servo_t servo_roll;
  60:Src/main.c    **** servo_t servo_pitch;
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PV */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  65:Src/main.c    **** void SystemClock_Config(void);
  66:Src/main.c    **** static void MX_GPIO_Init(void);
  67:Src/main.c    **** static void MX_I2C2_Init(void);
  68:Src/main.c    **** static void MX_TIM2_Init(void);
  69:Src/main.c    **** static void MX_TIM3_Init(void);
  70:Src/main.c    **** static void MX_USART1_UART_Init(void);
  71:Src/main.c    **** static void MX_RTC_Init(void);
  72:Src/main.c    **** /* USER CODE BEGIN PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** // Servomotors
  75:Src/main.c    **** void init_servomotors();
  76:Src/main.c    **** void servo_update();
  77:Src/main.c    **** 
  78:Src/main.c    **** // Messaging
  79:Src/main.c    **** void init_uart_messaging();
  80:Src/main.c    **** void uart_message_update();
  81:Src/main.c    **** 
  82:Src/main.c    **** void send_angle_pack(long pitch, long roll);
  83:Src/main.c    **** void send_message_pack(char *msg);
  84:Src/main.c    **** 
  85:Src/main.c    **** /* USER CODE END PFP */
  86:Src/main.c    **** 
  87:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  88:Src/main.c    **** /* USER CODE BEGIN 0 */
  89:Src/main.c    **** 
  90:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  91:Src/main.c    **** {
ARM GAS  /tmp/cc2n0PMc.s 			page 3


  92:Src/main.c    ****     if(htim->Instance == TIM3) //PWM servomotor timer
  93:Src/main.c    ****     {
  94:Src/main.c    ****         //servo_update();
  95:Src/main.c    ****     }
  96:Src/main.c    ****     else if(htim->Instance == TIM2) //UART message timer
  97:Src/main.c    ****     {
  98:Src/main.c    ****         //uart_message_update();
  99:Src/main.c    ****     }
 100:Src/main.c    **** }
 101:Src/main.c    **** 
 102:Src/main.c    **** void init_servomotors()
 103:Src/main.c    **** {
 104:Src/main.c    ****     servo_init(&servo_roll, &htim3, TIM_CHANNEL_1);
 105:Src/main.c    ****     servo_init(&servo_pitch, &htim3, TIM_CHANNEL_2);
 106:Src/main.c    ****     servo_set_offset(&servo_roll, 0);
 107:Src/main.c    ****     servo_set_offset(&servo_roll, 0);
 108:Src/main.c    ****     servo_set_position(&servo_roll, 0);
 109:Src/main.c    ****     servo_set_position(&servo_pitch, 0);
 110:Src/main.c    **** }
 111:Src/main.c    **** 
 112:Src/main.c    **** void servo_update()
 113:Src/main.c    **** {  
 114:Src/main.c    **** }
 115:Src/main.c    **** 
 116:Src/main.c    **** 
 117:Src/main.c    **** void uart_message_update()
 118:Src/main.c    **** {
 119:Src/main.c    **** }
 120:Src/main.c    **** 
 121:Src/main.c    **** void init_uart_messaging()
 122:Src/main.c    **** {
 123:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 124:Src/main.c    **** }
 125:Src/main.c    **** 
 126:Src/main.c    **** void send_angle_pack(long pitch, long roll)
 127:Src/main.c    **** {
 128:Src/main.c    ****     char str[100];
 129:Src/main.c    ****     sprintf(str, "{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d}\n\r", pitch, roll);
 130:Src/main.c    ****     HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 131:Src/main.c    **** }
 132:Src/main.c    **** 
 133:Src/main.c    **** void send_message_pack(char *msg)
 134:Src/main.c    **** {
 135:Src/main.c    ****     char str[100];
 136:Src/main.c    ****     sprintf(str, "{\"type\":\"message\",\"text\":\"%s\"}\n\r", msg);
 137:Src/main.c    ****     HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 138:Src/main.c    **** }
 139:Src/main.c    **** 
 140:Src/main.c    **** /* USER CODE END 0 */
 141:Src/main.c    **** 
 142:Src/main.c    **** /**
 143:Src/main.c    ****   * @brief  The application entry point.
 144:Src/main.c    ****   * @retval int
 145:Src/main.c    ****   */
 146:Src/main.c    **** int main(void)
 147:Src/main.c    **** {
 148:Src/main.c    ****   /* USER CODE BEGIN 1 */
ARM GAS  /tmp/cc2n0PMc.s 			page 4


 149:Src/main.c    **** 
 150:Src/main.c    ****   /* USER CODE END 1 */
 151:Src/main.c    ****   
 152:Src/main.c    **** 
 153:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 156:Src/main.c    ****   HAL_Init();
 157:Src/main.c    **** 
 158:Src/main.c    ****   /* USER CODE BEGIN Init */
 159:Src/main.c    **** 
 160:Src/main.c    ****   /* USER CODE END Init */
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* Configure the system clock */
 163:Src/main.c    ****   SystemClock_Config();
 164:Src/main.c    **** 
 165:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 166:Src/main.c    **** 
 167:Src/main.c    ****   /* USER CODE END SysInit */
 168:Src/main.c    **** 
 169:Src/main.c    ****   /* Initialize all configured peripherals */
 170:Src/main.c    ****   MX_GPIO_Init();
 171:Src/main.c    ****   MX_I2C2_Init();
 172:Src/main.c    ****   MX_TIM2_Init();
 173:Src/main.c    ****   MX_TIM3_Init();
 174:Src/main.c    ****   MX_USART1_UART_Init();
 175:Src/main.c    ****   MX_RTC_Init();
 176:Src/main.c    ****   /* USER CODE BEGIN 2 */
 177:Src/main.c    **** 
 178:Src/main.c    ****   // Init timers
 179:Src/main.c    ****   //init_uart_messaging();
 180:Src/main.c    ****   init_servomotors();
 181:Src/main.c    ****   /* USER CODE END 2 */ 
 182:Src/main.c    **** 
 183:Src/main.c    ****   /* Infinite loop */
 184:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 185:Src/main.c    ****   long a = 0;
 186:Src/main.c    ****   while (1)
 187:Src/main.c    ****   {
 188:Src/main.c    ****     servo_set_position(&servo_roll, 0);
 189:Src/main.c    ****     send_message_pack("0 deg");
 190:Src/main.c    ****     HAL_Delay(2000);
 191:Src/main.c    ****     
 192:Src/main.c    ****     servo_set_position(&servo_roll, 90);
 193:Src/main.c    ****     send_message_pack("90 deg");
 194:Src/main.c    ****     HAL_Delay(2000);
 195:Src/main.c    ****     
 196:Src/main.c    ****     servo_set_position(&servo_roll, 180);
 197:Src/main.c    ****     send_message_pack("180 deg");
 198:Src/main.c    ****     HAL_Delay(2000);
 199:Src/main.c    **** 
 200:Src/main.c    ****     /* USER CODE END WHILE */
 201:Src/main.c    ****     /* USER CODE BEGIN 3 */
 202:Src/main.c    ****   }
 203:Src/main.c    ****   /* USER CODE END 3 */
 204:Src/main.c    **** }
 205:Src/main.c    **** 
ARM GAS  /tmp/cc2n0PMc.s 			page 5


 206:Src/main.c    **** /**
 207:Src/main.c    ****   * @brief System Clock Configuration
 208:Src/main.c    ****   * @retval None
 209:Src/main.c    ****   */
 210:Src/main.c    **** void SystemClock_Config(void)
 211:Src/main.c    **** {
 212:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 213:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 214:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 215:Src/main.c    **** 
 216:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 217:Src/main.c    ****   */
 218:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 219:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 220:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 221:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 222:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 223:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 224:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 225:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 226:Src/main.c    ****   {
 227:Src/main.c    ****     Error_Handler();
 228:Src/main.c    ****   }
 229:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 230:Src/main.c    ****   */
 231:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 232:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 233:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 234:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 235:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 236:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 237:Src/main.c    **** 
 238:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 239:Src/main.c    ****   {
 240:Src/main.c    ****     Error_Handler();
 241:Src/main.c    ****   }
 242:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 243:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 244:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 245:Src/main.c    ****   {
 246:Src/main.c    ****     Error_Handler();
 247:Src/main.c    ****   }
 248:Src/main.c    **** }
 249:Src/main.c    **** 
 250:Src/main.c    **** /**
 251:Src/main.c    ****   * @brief I2C2 Initialization Function
 252:Src/main.c    ****   * @param None
 253:Src/main.c    ****   * @retval None
 254:Src/main.c    ****   */
 255:Src/main.c    **** static void MX_I2C2_Init(void)
 256:Src/main.c    **** {
 257:Src/main.c    **** 
 258:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 0 */
 259:Src/main.c    **** 
 260:Src/main.c    ****   /* USER CODE END I2C2_Init 0 */
 261:Src/main.c    **** 
 262:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 1 */
ARM GAS  /tmp/cc2n0PMc.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****   /* USER CODE END I2C2_Init 1 */
 265:Src/main.c    ****   hi2c2.Instance = I2C2;
 266:Src/main.c    ****   hi2c2.Init.ClockSpeed = 400000;
 267:Src/main.c    ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 268:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 269:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 270:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 271:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 272:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 273:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 274:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 275:Src/main.c    ****   {
 276:Src/main.c    ****     Error_Handler();
 277:Src/main.c    ****   }
 278:Src/main.c    ****   /* USER CODE BEGIN I2C2_Init 2 */
 279:Src/main.c    **** 
 280:Src/main.c    ****   /* USER CODE END I2C2_Init 2 */
 281:Src/main.c    **** 
 282:Src/main.c    **** }
 283:Src/main.c    **** 
 284:Src/main.c    **** /**
 285:Src/main.c    ****   * @brief RTC Initialization Function
 286:Src/main.c    ****   * @param None
 287:Src/main.c    ****   * @retval None
 288:Src/main.c    ****   */
 289:Src/main.c    **** static void MX_RTC_Init(void)
 290:Src/main.c    **** {
 291:Src/main.c    **** 
 292:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 0 */
 293:Src/main.c    **** 
 294:Src/main.c    ****   /* USER CODE END RTC_Init 0 */
 295:Src/main.c    **** 
 296:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 1 */
 297:Src/main.c    **** 
 298:Src/main.c    ****   /* USER CODE END RTC_Init 1 */
 299:Src/main.c    ****   /** Initialize RTC Only 
 300:Src/main.c    ****   */
 301:Src/main.c    ****   hrtc.Instance = RTC;
 302:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 303:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 304:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 305:Src/main.c    ****   {
 306:Src/main.c    ****     Error_Handler();
 307:Src/main.c    ****   }
 308:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 2 */
 309:Src/main.c    **** 
 310:Src/main.c    ****   /* USER CODE END RTC_Init 2 */
 311:Src/main.c    **** 
 312:Src/main.c    **** }
 313:Src/main.c    **** 
 314:Src/main.c    **** /**
 315:Src/main.c    ****   * @brief TIM2 Initialization Function
 316:Src/main.c    ****   * @param None
 317:Src/main.c    ****   * @retval None
 318:Src/main.c    ****   */
 319:Src/main.c    **** static void MX_TIM2_Init(void)
ARM GAS  /tmp/cc2n0PMc.s 			page 7


 320:Src/main.c    **** {
 321:Src/main.c    **** 
 322:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 323:Src/main.c    **** 
 324:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 325:Src/main.c    **** 
 326:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 327:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 328:Src/main.c    **** 
 329:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 330:Src/main.c    **** 
 331:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 332:Src/main.c    ****   htim2.Instance = TIM2;
 333:Src/main.c    ****   htim2.Init.Prescaler = 9000;
 334:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 335:Src/main.c    ****   htim2.Init.Period = 60;
 336:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 337:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 338:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 339:Src/main.c    ****   {
 340:Src/main.c    ****     Error_Handler();
 341:Src/main.c    ****   }
 342:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 343:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 344:Src/main.c    ****   {
 345:Src/main.c    ****     Error_Handler();
 346:Src/main.c    ****   }
 347:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 348:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 349:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 350:Src/main.c    ****   {
 351:Src/main.c    ****     Error_Handler();
 352:Src/main.c    ****   }
 353:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 354:Src/main.c    **** 
 355:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 356:Src/main.c    **** 
 357:Src/main.c    **** }
 358:Src/main.c    **** 
 359:Src/main.c    **** /**
 360:Src/main.c    ****   * @brief TIM3 Initialization Function
 361:Src/main.c    ****   * @param None
 362:Src/main.c    ****   * @retval None
 363:Src/main.c    ****   */
 364:Src/main.c    **** static void MX_TIM3_Init(void)
 365:Src/main.c    **** {
 366:Src/main.c    **** 
 367:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 368:Src/main.c    **** 
 369:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 370:Src/main.c    **** 
 371:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 372:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 373:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 374:Src/main.c    **** 
 375:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 376:Src/main.c    **** 
ARM GAS  /tmp/cc2n0PMc.s 			page 8


 377:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 378:Src/main.c    ****   htim3.Instance = TIM3;
 379:Src/main.c    ****   htim3.Init.Prescaler = 16;
 380:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 381:Src/main.c    ****   htim3.Init.Period = 10000;
 382:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 383:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 384:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 385:Src/main.c    ****   {
 386:Src/main.c    ****     Error_Handler();
 387:Src/main.c    ****   }
 388:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 389:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 390:Src/main.c    ****   {
 391:Src/main.c    ****     Error_Handler();
 392:Src/main.c    ****   }
 393:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 394:Src/main.c    ****   {
 395:Src/main.c    ****     Error_Handler();
 396:Src/main.c    ****   }
 397:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 398:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 399:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 400:Src/main.c    ****   {
 401:Src/main.c    ****     Error_Handler();
 402:Src/main.c    ****   }
 403:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 404:Src/main.c    ****   sConfigOC.Pulse = 0;
 405:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 406:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 407:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 408:Src/main.c    ****   {
 409:Src/main.c    ****     Error_Handler();
 410:Src/main.c    ****   }
 411:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 412:Src/main.c    ****   {
 413:Src/main.c    ****     Error_Handler();
 414:Src/main.c    ****   }
 415:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 416:Src/main.c    ****   
 417:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 418:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 419:Src/main.c    **** 
 420:Src/main.c    **** }
 421:Src/main.c    **** 
 422:Src/main.c    **** /**
 423:Src/main.c    ****   * @brief USART1 Initialization Function
 424:Src/main.c    ****   * @param None
 425:Src/main.c    ****   * @retval None
 426:Src/main.c    ****   */
 427:Src/main.c    **** static void MX_USART1_UART_Init(void)
 428:Src/main.c    **** {
 429:Src/main.c    **** 
 430:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 431:Src/main.c    **** 
 432:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 433:Src/main.c    **** 
ARM GAS  /tmp/cc2n0PMc.s 			page 9


 434:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 435:Src/main.c    **** 
 436:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 437:Src/main.c    ****   huart1.Instance = USART1;
 438:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 439:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 440:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 441:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 442:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 443:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 444:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 445:Src/main.c    ****   if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 446:Src/main.c    ****   {
 447:Src/main.c    ****     Error_Handler();
 448:Src/main.c    ****   }
 449:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 450:Src/main.c    **** 
 451:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 452:Src/main.c    **** 
 453:Src/main.c    **** }
 454:Src/main.c    **** 
 455:Src/main.c    **** /**
 456:Src/main.c    ****   * @brief GPIO Initialization Function
 457:Src/main.c    ****   * @param None
 458:Src/main.c    ****   * @retval None
 459:Src/main.c    ****   */
 460:Src/main.c    **** static void MX_GPIO_Init(void)
 461:Src/main.c    **** {
  25              		.loc 1 461 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 82B0     		sub	sp, sp, #8
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              	.LBB2:
 462:Src/main.c    **** 
 463:Src/main.c    ****   /* GPIO Ports Clock Enable */
 464:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  34              		.loc 1 464 0
  35 0002 0A4B     		ldr	r3, .L3
  36 0004 9A69     		ldr	r2, [r3, #24]
  37 0006 42F00402 		orr	r2, r2, #4
  38 000a 9A61     		str	r2, [r3, #24]
  39 000c 9A69     		ldr	r2, [r3, #24]
  40 000e 02F00402 		and	r2, r2, #4
  41 0012 0092     		str	r2, [sp]
  42 0014 009A     		ldr	r2, [sp]
  43              	.LBE2:
  44              	.LBB3:
 465:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  45              		.loc 1 465 0
  46 0016 9A69     		ldr	r2, [r3, #24]
  47 0018 42F00802 		orr	r2, r2, #8
  48 001c 9A61     		str	r2, [r3, #24]
  49 001e 9B69     		ldr	r3, [r3, #24]
ARM GAS  /tmp/cc2n0PMc.s 			page 10


  50 0020 03F00803 		and	r3, r3, #8
  51 0024 0193     		str	r3, [sp, #4]
  52 0026 019B     		ldr	r3, [sp, #4]
  53              	.LBE3:
 466:Src/main.c    **** 
 467:Src/main.c    **** }
  54              		.loc 1 467 0
  55 0028 02B0     		add	sp, sp, #8
  56              	.LCFI1:
  57              		.cfi_def_cfa_offset 0
  58              		@ sp needed
  59 002a 7047     		bx	lr
  60              	.L4:
  61              		.align	2
  62              	.L3:
  63 002c 00100240 		.word	1073876992
  64              		.cfi_endproc
  65              	.LFE256:
  67              		.section	.text.MX_I2C2_Init,"ax",%progbits
  68              		.align	1
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  72              		.fpu softvfp
  74              	MX_I2C2_Init:
  75              	.LFB251:
 256:Src/main.c    **** 
  76              		.loc 1 256 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80 0000 08B5     		push	{r3, lr}
  81              	.LCFI2:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 3, -8
  84              		.cfi_offset 14, -4
 265:Src/main.c    ****   hi2c2.Init.ClockSpeed = 400000;
  85              		.loc 1 265 0
  86 0002 0948     		ldr	r0, .L7
  87 0004 094B     		ldr	r3, .L7+4
  88 0006 0360     		str	r3, [r0]
 266:Src/main.c    ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  89              		.loc 1 266 0
  90 0008 094B     		ldr	r3, .L7+8
  91 000a 4360     		str	r3, [r0, #4]
 267:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
  92              		.loc 1 267 0
  93 000c 0023     		movs	r3, #0
  94 000e 8360     		str	r3, [r0, #8]
 268:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  95              		.loc 1 268 0
  96 0010 C360     		str	r3, [r0, #12]
 269:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  97              		.loc 1 269 0
  98 0012 4FF48042 		mov	r2, #16384
  99 0016 0261     		str	r2, [r0, #16]
 270:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
ARM GAS  /tmp/cc2n0PMc.s 			page 11


 100              		.loc 1 270 0
 101 0018 4361     		str	r3, [r0, #20]
 271:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 102              		.loc 1 271 0
 103 001a 8361     		str	r3, [r0, #24]
 272:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 104              		.loc 1 272 0
 105 001c C361     		str	r3, [r0, #28]
 273:Src/main.c    ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 106              		.loc 1 273 0
 107 001e 0362     		str	r3, [r0, #32]
 274:Src/main.c    ****   {
 108              		.loc 1 274 0
 109 0020 FFF7FEFF 		bl	HAL_I2C_Init
 110              	.LVL0:
 111 0024 08BD     		pop	{r3, pc}
 112              	.L8:
 113 0026 00BF     		.align	2
 114              	.L7:
 115 0028 00000000 		.word	hi2c2
 116 002c 00580040 		.word	1073764352
 117 0030 801A0600 		.word	400000
 118              		.cfi_endproc
 119              	.LFE251:
 121              		.section	.text.MX_TIM2_Init,"ax",%progbits
 122              		.align	1
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu softvfp
 128              	MX_TIM2_Init:
 129              	.LFB253:
 320:Src/main.c    **** 
 130              		.loc 1 320 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 24
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134 0000 30B5     		push	{r4, r5, lr}
 135              	.LCFI3:
 136              		.cfi_def_cfa_offset 12
 137              		.cfi_offset 4, -12
 138              		.cfi_offset 5, -8
 139              		.cfi_offset 14, -4
 140 0002 87B0     		sub	sp, sp, #28
 141              	.LCFI4:
 142              		.cfi_def_cfa_offset 40
 326:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 143              		.loc 1 326 0
 144 0004 0024     		movs	r4, #0
 145 0006 0294     		str	r4, [sp, #8]
 146 0008 0394     		str	r4, [sp, #12]
 147 000a 0494     		str	r4, [sp, #16]
 148 000c 0594     		str	r4, [sp, #20]
 327:Src/main.c    **** 
 149              		.loc 1 327 0
 150 000e 0094     		str	r4, [sp]
 151 0010 0194     		str	r4, [sp, #4]
ARM GAS  /tmp/cc2n0PMc.s 			page 12


 332:Src/main.c    ****   htim2.Init.Prescaler = 9000;
 152              		.loc 1 332 0
 153 0012 0F4D     		ldr	r5, .L11
 154 0014 4FF08043 		mov	r3, #1073741824
 155 0018 2B60     		str	r3, [r5]
 333:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 156              		.loc 1 333 0
 157 001a 42F22833 		movw	r3, #9000
 158 001e 6B60     		str	r3, [r5, #4]
 334:Src/main.c    ****   htim2.Init.Period = 60;
 159              		.loc 1 334 0
 160 0020 AC60     		str	r4, [r5, #8]
 335:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 161              		.loc 1 335 0
 162 0022 3C23     		movs	r3, #60
 163 0024 EB60     		str	r3, [r5, #12]
 336:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 164              		.loc 1 336 0
 165 0026 2C61     		str	r4, [r5, #16]
 337:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 166              		.loc 1 337 0
 167 0028 AC61     		str	r4, [r5, #24]
 338:Src/main.c    ****   {
 168              		.loc 1 338 0
 169 002a 2846     		mov	r0, r5
 170 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 171              	.LVL1:
 342:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 172              		.loc 1 342 0
 173 0030 4FF48053 		mov	r3, #4096
 174 0034 0293     		str	r3, [sp, #8]
 343:Src/main.c    ****   {
 175              		.loc 1 343 0
 176 0036 02A9     		add	r1, sp, #8
 177 0038 2846     		mov	r0, r5
 178 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 179              	.LVL2:
 347:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 180              		.loc 1 347 0
 181 003e 0094     		str	r4, [sp]
 348:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 182              		.loc 1 348 0
 183 0040 0194     		str	r4, [sp, #4]
 349:Src/main.c    ****   {
 184              		.loc 1 349 0
 185 0042 6946     		mov	r1, sp
 186 0044 2846     		mov	r0, r5
 187 0046 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 188              	.LVL3:
 357:Src/main.c    **** 
 189              		.loc 1 357 0
 190 004a 07B0     		add	sp, sp, #28
 191              	.LCFI5:
 192              		.cfi_def_cfa_offset 12
 193              		@ sp needed
 194 004c 30BD     		pop	{r4, r5, pc}
 195              	.L12:
ARM GAS  /tmp/cc2n0PMc.s 			page 13


 196 004e 00BF     		.align	2
 197              	.L11:
 198 0050 00000000 		.word	htim2
 199              		.cfi_endproc
 200              	.LFE253:
 202              		.section	.text.MX_TIM3_Init,"ax",%progbits
 203              		.align	1
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu softvfp
 209              	MX_TIM3_Init:
 210              	.LFB254:
 365:Src/main.c    **** 
 211              		.loc 1 365 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 56
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215 0000 30B5     		push	{r4, r5, lr}
 216              	.LCFI6:
 217              		.cfi_def_cfa_offset 12
 218              		.cfi_offset 4, -12
 219              		.cfi_offset 5, -8
 220              		.cfi_offset 14, -4
 221 0002 8FB0     		sub	sp, sp, #60
 222              	.LCFI7:
 223              		.cfi_def_cfa_offset 72
 371:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 224              		.loc 1 371 0
 225 0004 0024     		movs	r4, #0
 226 0006 0A94     		str	r4, [sp, #40]
 227 0008 0B94     		str	r4, [sp, #44]
 228 000a 0C94     		str	r4, [sp, #48]
 229 000c 0D94     		str	r4, [sp, #52]
 372:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 230              		.loc 1 372 0
 231 000e 0894     		str	r4, [sp, #32]
 232 0010 0994     		str	r4, [sp, #36]
 373:Src/main.c    **** 
 233              		.loc 1 373 0
 234 0012 0194     		str	r4, [sp, #4]
 235 0014 0294     		str	r4, [sp, #8]
 236 0016 0394     		str	r4, [sp, #12]
 237 0018 0494     		str	r4, [sp, #16]
 238 001a 0594     		str	r4, [sp, #20]
 239 001c 0694     		str	r4, [sp, #24]
 240 001e 0794     		str	r4, [sp, #28]
 378:Src/main.c    ****   htim3.Init.Prescaler = 16;
 241              		.loc 1 378 0
 242 0020 194D     		ldr	r5, .L15
 243 0022 1A4B     		ldr	r3, .L15+4
 244 0024 2B60     		str	r3, [r5]
 379:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 245              		.loc 1 379 0
 246 0026 1023     		movs	r3, #16
 247 0028 6B60     		str	r3, [r5, #4]
 380:Src/main.c    ****   htim3.Init.Period = 10000;
ARM GAS  /tmp/cc2n0PMc.s 			page 14


 248              		.loc 1 380 0
 249 002a AC60     		str	r4, [r5, #8]
 381:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 250              		.loc 1 381 0
 251 002c 42F21073 		movw	r3, #10000
 252 0030 EB60     		str	r3, [r5, #12]
 382:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 253              		.loc 1 382 0
 254 0032 2C61     		str	r4, [r5, #16]
 383:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 255              		.loc 1 383 0
 256 0034 AC61     		str	r4, [r5, #24]
 384:Src/main.c    ****   {
 257              		.loc 1 384 0
 258 0036 2846     		mov	r0, r5
 259 0038 FFF7FEFF 		bl	HAL_TIM_Base_Init
 260              	.LVL4:
 388:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 261              		.loc 1 388 0
 262 003c 4FF48053 		mov	r3, #4096
 263 0040 0A93     		str	r3, [sp, #40]
 389:Src/main.c    ****   {
 264              		.loc 1 389 0
 265 0042 0AA9     		add	r1, sp, #40
 266 0044 2846     		mov	r0, r5
 267 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 268              	.LVL5:
 393:Src/main.c    ****   {
 269              		.loc 1 393 0
 270 004a 2846     		mov	r0, r5
 271 004c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 272              	.LVL6:
 397:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 273              		.loc 1 397 0
 274 0050 0894     		str	r4, [sp, #32]
 398:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 275              		.loc 1 398 0
 276 0052 0994     		str	r4, [sp, #36]
 399:Src/main.c    ****   {
 277              		.loc 1 399 0
 278 0054 08A9     		add	r1, sp, #32
 279 0056 2846     		mov	r0, r5
 280 0058 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 281              	.LVL7:
 403:Src/main.c    ****   sConfigOC.Pulse = 0;
 282              		.loc 1 403 0
 283 005c 6023     		movs	r3, #96
 284 005e 0193     		str	r3, [sp, #4]
 404:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 285              		.loc 1 404 0
 286 0060 0294     		str	r4, [sp, #8]
 405:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 287              		.loc 1 405 0
 288 0062 0394     		str	r4, [sp, #12]
 406:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 289              		.loc 1 406 0
 290 0064 0594     		str	r4, [sp, #20]
ARM GAS  /tmp/cc2n0PMc.s 			page 15


 407:Src/main.c    ****   {
 291              		.loc 1 407 0
 292 0066 2246     		mov	r2, r4
 293 0068 01A9     		add	r1, sp, #4
 294 006a 2846     		mov	r0, r5
 295 006c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 296              	.LVL8:
 411:Src/main.c    ****   {
 297              		.loc 1 411 0
 298 0070 0422     		movs	r2, #4
 299 0072 0DEB0201 		add	r1, sp, r2
 300 0076 2846     		mov	r0, r5
 301 0078 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 302              	.LVL9:
 418:Src/main.c    **** 
 303              		.loc 1 418 0
 304 007c 2846     		mov	r0, r5
 305 007e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 306              	.LVL10:
 420:Src/main.c    **** 
 307              		.loc 1 420 0
 308 0082 0FB0     		add	sp, sp, #60
 309              	.LCFI8:
 310              		.cfi_def_cfa_offset 12
 311              		@ sp needed
 312 0084 30BD     		pop	{r4, r5, pc}
 313              	.L16:
 314 0086 00BF     		.align	2
 315              	.L15:
 316 0088 00000000 		.word	htim3
 317 008c 00040040 		.word	1073742848
 318              		.cfi_endproc
 319              	.LFE254:
 321              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 322              		.align	1
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu softvfp
 328              	MX_USART1_UART_Init:
 329              	.LFB255:
 428:Src/main.c    **** 
 330              		.loc 1 428 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334 0000 08B5     		push	{r3, lr}
 335              	.LCFI9:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 3, -8
 338              		.cfi_offset 14, -4
 437:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 339              		.loc 1 437 0
 340 0002 0948     		ldr	r0, .L19
 341 0004 094B     		ldr	r3, .L19+4
 342 0006 0360     		str	r3, [r0]
 438:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
ARM GAS  /tmp/cc2n0PMc.s 			page 16


 343              		.loc 1 438 0
 344 0008 4FF4E133 		mov	r3, #115200
 345 000c 4360     		str	r3, [r0, #4]
 439:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 346              		.loc 1 439 0
 347 000e 0021     		movs	r1, #0
 348 0010 8160     		str	r1, [r0, #8]
 440:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 349              		.loc 1 440 0
 350 0012 C160     		str	r1, [r0, #12]
 441:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 351              		.loc 1 441 0
 352 0014 0161     		str	r1, [r0, #16]
 442:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 353              		.loc 1 442 0
 354 0016 0C23     		movs	r3, #12
 355 0018 4361     		str	r3, [r0, #20]
 443:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 356              		.loc 1 443 0
 357 001a 8161     		str	r1, [r0, #24]
 444:Src/main.c    ****   if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 358              		.loc 1 444 0
 359 001c C161     		str	r1, [r0, #28]
 445:Src/main.c    ****   {
 360              		.loc 1 445 0
 361 001e 0A46     		mov	r2, r1
 362 0020 FFF7FEFF 		bl	HAL_MultiProcessor_Init
 363              	.LVL11:
 364 0024 08BD     		pop	{r3, pc}
 365              	.L20:
 366 0026 00BF     		.align	2
 367              	.L19:
 368 0028 00000000 		.word	huart1
 369 002c 00380140 		.word	1073821696
 370              		.cfi_endproc
 371              	.LFE255:
 373              		.section	.text.MX_RTC_Init,"ax",%progbits
 374              		.align	1
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu softvfp
 380              	MX_RTC_Init:
 381              	.LFB252:
 290:Src/main.c    **** 
 382              		.loc 1 290 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 0
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386 0000 08B5     		push	{r3, lr}
 387              	.LCFI10:
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 3, -8
 390              		.cfi_offset 14, -4
 301:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 391              		.loc 1 301 0
 392 0002 0648     		ldr	r0, .L23
ARM GAS  /tmp/cc2n0PMc.s 			page 17


 393 0004 064B     		ldr	r3, .L23+4
 394 0006 0360     		str	r3, [r0]
 302:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 395              		.loc 1 302 0
 396 0008 4FF0FF33 		mov	r3, #-1
 397 000c 4360     		str	r3, [r0, #4]
 303:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 398              		.loc 1 303 0
 399 000e 4FF48073 		mov	r3, #256
 400 0012 8360     		str	r3, [r0, #8]
 304:Src/main.c    ****   {
 401              		.loc 1 304 0
 402 0014 FFF7FEFF 		bl	HAL_RTC_Init
 403              	.LVL12:
 404 0018 08BD     		pop	{r3, pc}
 405              	.L24:
 406 001a 00BF     		.align	2
 407              	.L23:
 408 001c 00000000 		.word	hrtc
 409 0020 00280040 		.word	1073752064
 410              		.cfi_endproc
 411              	.LFE252:
 413              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 414              		.align	1
 415              		.global	HAL_TIM_PeriodElapsedCallback
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 419              		.fpu softvfp
 421              	HAL_TIM_PeriodElapsedCallback:
 422              	.LFB242:
  91:Src/main.c    ****     if(htim->Instance == TIM3) //PWM servomotor timer
 423              		.loc 1 91 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              		@ link register save eliminated.
 428              	.LVL13:
 429 0000 7047     		bx	lr
 430              		.cfi_endproc
 431              	.LFE242:
 433              		.section	.text.init_servomotors,"ax",%progbits
 434              		.align	1
 435              		.global	init_servomotors
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu softvfp
 441              	init_servomotors:
 442              	.LFB243:
 103:Src/main.c    ****     servo_init(&servo_roll, &htim3, TIM_CHANNEL_1);
 443              		.loc 1 103 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 103:Src/main.c    ****     servo_init(&servo_roll, &htim3, TIM_CHANNEL_1);
 447              		.loc 1 103 0
ARM GAS  /tmp/cc2n0PMc.s 			page 18


 448 0000 70B5     		push	{r4, r5, r6, lr}
 449              	.LCFI11:
 450              		.cfi_def_cfa_offset 16
 451              		.cfi_offset 4, -16
 452              		.cfi_offset 5, -12
 453              		.cfi_offset 6, -8
 454              		.cfi_offset 14, -4
 104:Src/main.c    ****     servo_init(&servo_pitch, &htim3, TIM_CHANNEL_2);
 455              		.loc 1 104 0
 456 0002 0F4C     		ldr	r4, .L28
 457 0004 0F4D     		ldr	r5, .L28+4
 458 0006 0022     		movs	r2, #0
 459 0008 2146     		mov	r1, r4
 460 000a 2846     		mov	r0, r5
 461 000c FFF7FEFF 		bl	servo_init
 462              	.LVL14:
 105:Src/main.c    ****     servo_set_offset(&servo_roll, 0);
 463              		.loc 1 105 0
 464 0010 0D4E     		ldr	r6, .L28+8
 465 0012 0422     		movs	r2, #4
 466 0014 2146     		mov	r1, r4
 467 0016 3046     		mov	r0, r6
 468 0018 FFF7FEFF 		bl	servo_init
 469              	.LVL15:
 106:Src/main.c    ****     servo_set_offset(&servo_roll, 0);
 470              		.loc 1 106 0
 471 001c 0024     		movs	r4, #0
 472 001e 2146     		mov	r1, r4
 473 0020 2846     		mov	r0, r5
 474 0022 FFF7FEFF 		bl	servo_set_offset
 475              	.LVL16:
 107:Src/main.c    ****     servo_set_position(&servo_roll, 0);
 476              		.loc 1 107 0
 477 0026 2146     		mov	r1, r4
 478 0028 2846     		mov	r0, r5
 479 002a FFF7FEFF 		bl	servo_set_offset
 480              	.LVL17:
 108:Src/main.c    ****     servo_set_position(&servo_pitch, 0);
 481              		.loc 1 108 0
 482 002e 2146     		mov	r1, r4
 483 0030 2846     		mov	r0, r5
 484 0032 FFF7FEFF 		bl	servo_set_position
 485              	.LVL18:
 109:Src/main.c    **** }
 486              		.loc 1 109 0
 487 0036 2146     		mov	r1, r4
 488 0038 3046     		mov	r0, r6
 489 003a FFF7FEFF 		bl	servo_set_position
 490              	.LVL19:
 491 003e 70BD     		pop	{r4, r5, r6, pc}
 492              	.L29:
 493              		.align	2
 494              	.L28:
 495 0040 00000000 		.word	htim3
 496 0044 00000000 		.word	servo_roll
 497 0048 00000000 		.word	servo_pitch
 498              		.cfi_endproc
ARM GAS  /tmp/cc2n0PMc.s 			page 19


 499              	.LFE243:
 501              		.section	.text.servo_update,"ax",%progbits
 502              		.align	1
 503              		.global	servo_update
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu softvfp
 509              	servo_update:
 510              	.LFB244:
 113:Src/main.c    **** }
 511              		.loc 1 113 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 0, uses_anonymous_args = 0
 515              		@ link register save eliminated.
 516 0000 7047     		bx	lr
 517              		.cfi_endproc
 518              	.LFE244:
 520              		.section	.text.uart_message_update,"ax",%progbits
 521              		.align	1
 522              		.global	uart_message_update
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu softvfp
 528              	uart_message_update:
 529              	.LFB245:
 118:Src/main.c    **** }
 530              		.loc 1 118 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 535 0000 7047     		bx	lr
 536              		.cfi_endproc
 537              	.LFE245:
 539              		.section	.text.init_uart_messaging,"ax",%progbits
 540              		.align	1
 541              		.global	init_uart_messaging
 542              		.syntax unified
 543              		.thumb
 544              		.thumb_func
 545              		.fpu softvfp
 547              	init_uart_messaging:
 548              	.LFB246:
 122:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 549              		.loc 1 122 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 0
 552              		@ frame_needed = 0, uses_anonymous_args = 0
 122:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 553              		.loc 1 122 0
 554 0000 08B5     		push	{r3, lr}
 555              	.LCFI12:
 556              		.cfi_def_cfa_offset 8
 557              		.cfi_offset 3, -8
ARM GAS  /tmp/cc2n0PMc.s 			page 20


 558              		.cfi_offset 14, -4
 123:Src/main.c    **** }
 559              		.loc 1 123 0
 560 0002 0248     		ldr	r0, .L34
 561 0004 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 562              	.LVL20:
 563 0008 08BD     		pop	{r3, pc}
 564              	.L35:
 565 000a 00BF     		.align	2
 566              	.L34:
 567 000c 00000000 		.word	htim2
 568              		.cfi_endproc
 569              	.LFE246:
 571              		.section	.text.send_angle_pack,"ax",%progbits
 572              		.align	1
 573              		.global	send_angle_pack
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu softvfp
 579              	send_angle_pack:
 580              	.LFB247:
 127:Src/main.c    ****     char str[100];
 581              		.loc 1 127 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 104
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              	.LVL21:
 586 0000 00B5     		push	{lr}
 587              	.LCFI13:
 588              		.cfi_def_cfa_offset 4
 589              		.cfi_offset 14, -4
 590 0002 9BB0     		sub	sp, sp, #108
 591              	.LCFI14:
 592              		.cfi_def_cfa_offset 112
 129:Src/main.c    ****     HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 593              		.loc 1 129 0
 594 0004 0B46     		mov	r3, r1
 595 0006 0246     		mov	r2, r0
 596 0008 0749     		ldr	r1, .L38
 597              	.LVL22:
 598 000a 01A8     		add	r0, sp, #4
 599              	.LVL23:
 600 000c FFF7FEFF 		bl	sprintf
 601              	.LVL24:
 130:Src/main.c    **** }
 602              		.loc 1 130 0
 603 0010 01A8     		add	r0, sp, #4
 604 0012 FFF7FEFF 		bl	strlen
 605              	.LVL25:
 606 0016 6423     		movs	r3, #100
 607 0018 82B2     		uxth	r2, r0
 608 001a 01A9     		add	r1, sp, #4
 609 001c 0348     		ldr	r0, .L38+4
 610 001e FFF7FEFF 		bl	HAL_UART_Transmit
 611              	.LVL26:
 131:Src/main.c    **** 
ARM GAS  /tmp/cc2n0PMc.s 			page 21


 612              		.loc 1 131 0
 613 0022 1BB0     		add	sp, sp, #108
 614              	.LCFI15:
 615              		.cfi_def_cfa_offset 4
 616              		@ sp needed
 617 0024 5DF804FB 		ldr	pc, [sp], #4
 618              	.L39:
 619              		.align	2
 620              	.L38:
 621 0028 00000000 		.word	.LC0
 622 002c 00000000 		.word	huart1
 623              		.cfi_endproc
 624              	.LFE247:
 626              		.section	.text.send_message_pack,"ax",%progbits
 627              		.align	1
 628              		.global	send_message_pack
 629              		.syntax unified
 630              		.thumb
 631              		.thumb_func
 632              		.fpu softvfp
 634              	send_message_pack:
 635              	.LFB248:
 134:Src/main.c    ****     char str[100];
 636              		.loc 1 134 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 104
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640              	.LVL27:
 641 0000 00B5     		push	{lr}
 642              	.LCFI16:
 643              		.cfi_def_cfa_offset 4
 644              		.cfi_offset 14, -4
 645 0002 9BB0     		sub	sp, sp, #108
 646              	.LCFI17:
 647              		.cfi_def_cfa_offset 112
 136:Src/main.c    ****     HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 648              		.loc 1 136 0
 649 0004 0246     		mov	r2, r0
 650 0006 0849     		ldr	r1, .L42
 651 0008 01A8     		add	r0, sp, #4
 652              	.LVL28:
 653 000a FFF7FEFF 		bl	sprintf
 654              	.LVL29:
 137:Src/main.c    **** }
 655              		.loc 1 137 0
 656 000e 01A8     		add	r0, sp, #4
 657 0010 FFF7FEFF 		bl	strlen
 658              	.LVL30:
 659 0014 6423     		movs	r3, #100
 660 0016 82B2     		uxth	r2, r0
 661 0018 01A9     		add	r1, sp, #4
 662 001a 0448     		ldr	r0, .L42+4
 663 001c FFF7FEFF 		bl	HAL_UART_Transmit
 664              	.LVL31:
 138:Src/main.c    **** 
 665              		.loc 1 138 0
 666 0020 1BB0     		add	sp, sp, #108
ARM GAS  /tmp/cc2n0PMc.s 			page 22


 667              	.LCFI18:
 668              		.cfi_def_cfa_offset 4
 669              		@ sp needed
 670 0022 5DF804FB 		ldr	pc, [sp], #4
 671              	.L43:
 672 0026 00BF     		.align	2
 673              	.L42:
 674 0028 00000000 		.word	.LC1
 675 002c 00000000 		.word	huart1
 676              		.cfi_endproc
 677              	.LFE248:
 679              		.section	.text.SystemClock_Config,"ax",%progbits
 680              		.align	1
 681              		.global	SystemClock_Config
 682              		.syntax unified
 683              		.thumb
 684              		.thumb_func
 685              		.fpu softvfp
 687              	SystemClock_Config:
 688              	.LFB250:
 211:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 689              		.loc 1 211 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 80
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693 0000 70B5     		push	{r4, r5, r6, lr}
 694              	.LCFI19:
 695              		.cfi_def_cfa_offset 16
 696              		.cfi_offset 4, -16
 697              		.cfi_offset 5, -12
 698              		.cfi_offset 6, -8
 699              		.cfi_offset 14, -4
 700 0002 94B0     		sub	sp, sp, #80
 701              	.LCFI20:
 702              		.cfi_def_cfa_offset 96
 212:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 703              		.loc 1 212 0
 704 0004 2822     		movs	r2, #40
 705 0006 0021     		movs	r1, #0
 706 0008 0DEB0200 		add	r0, sp, r2
 707 000c FFF7FEFF 		bl	memset
 708              	.LVL32:
 213:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 709              		.loc 1 213 0
 710 0010 0024     		movs	r4, #0
 711 0012 0594     		str	r4, [sp, #20]
 712 0014 0694     		str	r4, [sp, #24]
 713 0016 0794     		str	r4, [sp, #28]
 714 0018 0894     		str	r4, [sp, #32]
 715 001a 0994     		str	r4, [sp, #36]
 214:Src/main.c    **** 
 716              		.loc 1 214 0
 717 001c 0194     		str	r4, [sp, #4]
 718 001e 0294     		str	r4, [sp, #8]
 719 0020 0394     		str	r4, [sp, #12]
 720 0022 0494     		str	r4, [sp, #16]
 218:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/cc2n0PMc.s 			page 23


 721              		.loc 1 218 0
 722 0024 0A23     		movs	r3, #10
 723 0026 0A93     		str	r3, [sp, #40]
 219:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 724              		.loc 1 219 0
 725 0028 0125     		movs	r5, #1
 726 002a 0E95     		str	r5, [sp, #56]
 220:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 727              		.loc 1 220 0
 728 002c 1023     		movs	r3, #16
 729 002e 0F93     		str	r3, [sp, #60]
 221:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 730              		.loc 1 221 0
 731 0030 1095     		str	r5, [sp, #64]
 222:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 732              		.loc 1 222 0
 733 0032 0226     		movs	r6, #2
 734 0034 1196     		str	r6, [sp, #68]
 225:Src/main.c    ****   {
 735              		.loc 1 225 0
 736 0036 0AA8     		add	r0, sp, #40
 737 0038 FFF7FEFF 		bl	HAL_RCC_OscConfig
 738              	.LVL33:
 231:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 739              		.loc 1 231 0
 740 003c 0F23     		movs	r3, #15
 741 003e 0593     		str	r3, [sp, #20]
 233:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 742              		.loc 1 233 0
 743 0040 0696     		str	r6, [sp, #24]
 234:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 744              		.loc 1 234 0
 745 0042 0794     		str	r4, [sp, #28]
 235:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 746              		.loc 1 235 0
 747 0044 0894     		str	r4, [sp, #32]
 236:Src/main.c    **** 
 748              		.loc 1 236 0
 749 0046 0994     		str	r4, [sp, #36]
 238:Src/main.c    ****   {
 750              		.loc 1 238 0
 751 0048 2146     		mov	r1, r4
 752 004a 05A8     		add	r0, sp, #20
 753 004c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 754              	.LVL34:
 242:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 755              		.loc 1 242 0
 756 0050 0195     		str	r5, [sp, #4]
 243:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 757              		.loc 1 243 0
 758 0052 4FF40073 		mov	r3, #512
 759 0056 0293     		str	r3, [sp, #8]
 244:Src/main.c    ****   {
 760              		.loc 1 244 0
 761 0058 01A8     		add	r0, sp, #4
 762 005a FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 763              	.LVL35:
ARM GAS  /tmp/cc2n0PMc.s 			page 24


 248:Src/main.c    **** 
 764              		.loc 1 248 0
 765 005e 14B0     		add	sp, sp, #80
 766              	.LCFI21:
 767              		.cfi_def_cfa_offset 16
 768              		@ sp needed
 769 0060 70BD     		pop	{r4, r5, r6, pc}
 770              		.cfi_endproc
 771              	.LFE250:
 773              		.section	.text.main,"ax",%progbits
 774              		.align	1
 775              		.global	main
 776              		.syntax unified
 777              		.thumb
 778              		.thumb_func
 779              		.fpu softvfp
 781              	main:
 782              	.LFB249:
 147:Src/main.c    ****   /* USER CODE BEGIN 1 */
 783              		.loc 1 147 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 0
 786              		@ frame_needed = 0, uses_anonymous_args = 0
 787 0000 10B5     		push	{r4, lr}
 788              	.LCFI22:
 789              		.cfi_def_cfa_offset 8
 790              		.cfi_offset 4, -8
 791              		.cfi_offset 14, -4
 156:Src/main.c    **** 
 792              		.loc 1 156 0
 793 0002 FFF7FEFF 		bl	HAL_Init
 794              	.LVL36:
 163:Src/main.c    **** 
 795              		.loc 1 163 0
 796 0006 FFF7FEFF 		bl	SystemClock_Config
 797              	.LVL37:
 170:Src/main.c    ****   MX_I2C2_Init();
 798              		.loc 1 170 0
 799 000a FFF7FEFF 		bl	MX_GPIO_Init
 800              	.LVL38:
 171:Src/main.c    ****   MX_TIM2_Init();
 801              		.loc 1 171 0
 802 000e FFF7FEFF 		bl	MX_I2C2_Init
 803              	.LVL39:
 172:Src/main.c    ****   MX_TIM3_Init();
 804              		.loc 1 172 0
 805 0012 FFF7FEFF 		bl	MX_TIM2_Init
 806              	.LVL40:
 173:Src/main.c    ****   MX_USART1_UART_Init();
 807              		.loc 1 173 0
 808 0016 FFF7FEFF 		bl	MX_TIM3_Init
 809              	.LVL41:
 174:Src/main.c    ****   MX_RTC_Init();
 810              		.loc 1 174 0
 811 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 812              	.LVL42:
 175:Src/main.c    ****   /* USER CODE BEGIN 2 */
ARM GAS  /tmp/cc2n0PMc.s 			page 25


 813              		.loc 1 175 0
 814 001e FFF7FEFF 		bl	MX_RTC_Init
 815              	.LVL43:
 180:Src/main.c    ****   /* USER CODE END 2 */ 
 816              		.loc 1 180 0
 817 0022 FFF7FEFF 		bl	init_servomotors
 818              	.LVL44:
 819              	.L47:
 188:Src/main.c    ****     send_message_pack("0 deg");
 820              		.loc 1 188 0 discriminator 1
 821 0026 114C     		ldr	r4, .L49
 822 0028 0021     		movs	r1, #0
 823 002a 2046     		mov	r0, r4
 824 002c FFF7FEFF 		bl	servo_set_position
 825              	.LVL45:
 189:Src/main.c    ****     HAL_Delay(2000);
 826              		.loc 1 189 0 discriminator 1
 827 0030 0F48     		ldr	r0, .L49+4
 828 0032 FFF7FEFF 		bl	send_message_pack
 829              	.LVL46:
 190:Src/main.c    ****     
 830              		.loc 1 190 0 discriminator 1
 831 0036 4FF4FA60 		mov	r0, #2000
 832 003a FFF7FEFF 		bl	HAL_Delay
 833              	.LVL47:
 192:Src/main.c    ****     send_message_pack("90 deg");
 834              		.loc 1 192 0 discriminator 1
 835 003e 0D49     		ldr	r1, .L49+8
 836 0040 2046     		mov	r0, r4
 837 0042 FFF7FEFF 		bl	servo_set_position
 838              	.LVL48:
 193:Src/main.c    ****     HAL_Delay(2000);
 839              		.loc 1 193 0 discriminator 1
 840 0046 0C48     		ldr	r0, .L49+12
 841 0048 FFF7FEFF 		bl	send_message_pack
 842              	.LVL49:
 194:Src/main.c    ****     
 843              		.loc 1 194 0 discriminator 1
 844 004c 4FF4FA60 		mov	r0, #2000
 845 0050 FFF7FEFF 		bl	HAL_Delay
 846              	.LVL50:
 196:Src/main.c    ****     send_message_pack("180 deg");
 847              		.loc 1 196 0 discriminator 1
 848 0054 0949     		ldr	r1, .L49+16
 849 0056 2046     		mov	r0, r4
 850 0058 FFF7FEFF 		bl	servo_set_position
 851              	.LVL51:
 197:Src/main.c    ****     HAL_Delay(2000);
 852              		.loc 1 197 0 discriminator 1
 853 005c 0848     		ldr	r0, .L49+20
 854 005e FFF7FEFF 		bl	send_message_pack
 855              	.LVL52:
 198:Src/main.c    **** 
 856              		.loc 1 198 0 discriminator 1
 857 0062 4FF4FA60 		mov	r0, #2000
 858 0066 FFF7FEFF 		bl	HAL_Delay
 859              	.LVL53:
ARM GAS  /tmp/cc2n0PMc.s 			page 26


 860 006a DCE7     		b	.L47
 861              	.L50:
 862              		.align	2
 863              	.L49:
 864 006c 00000000 		.word	servo_roll
 865 0070 00000000 		.word	.LC2
 866 0074 0000B442 		.word	1119092736
 867 0078 08000000 		.word	.LC3
 868 007c 00003443 		.word	1127481344
 869 0080 10000000 		.word	.LC4
 870              		.cfi_endproc
 871              	.LFE249:
 873              		.section	.text.Error_Handler,"ax",%progbits
 874              		.align	1
 875              		.global	Error_Handler
 876              		.syntax unified
 877              		.thumb
 878              		.thumb_func
 879              		.fpu softvfp
 881              	Error_Handler:
 882              	.LFB257:
 468:Src/main.c    **** 
 469:Src/main.c    **** /* USER CODE BEGIN 4 */
 470:Src/main.c    **** 
 471:Src/main.c    **** /* USER CODE END 4 */
 472:Src/main.c    **** 
 473:Src/main.c    **** /**
 474:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 475:Src/main.c    ****   * @retval None
 476:Src/main.c    ****   */
 477:Src/main.c    **** void Error_Handler(void)
 478:Src/main.c    **** {
 883              		.loc 1 478 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 888 0000 7047     		bx	lr
 889              		.cfi_endproc
 890              	.LFE257:
 892              		.comm	servo_pitch,20,4
 893              		.comm	servo_roll,20,4
 894              		.comm	huart1,64,4
 895              		.comm	htim3,64,4
 896              		.comm	htim2,64,4
 897              		.comm	hrtc,20,4
 898              		.comm	hi2c2,84,4
 899              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 900              		.align	2
 901              	.LC2:
 902 0000 30206465 		.ascii	"0 deg\000"
 902      6700
 903 0006 0000     		.space	2
 904              	.LC3:
 905 0008 39302064 		.ascii	"90 deg\000"
 905      656700
 906 000f 00       		.space	1
ARM GAS  /tmp/cc2n0PMc.s 			page 27


 907              	.LC4:
 908 0010 31383020 		.ascii	"180 deg\000"
 908      64656700 
 909              		.section	.rodata.send_angle_pack.str1.4,"aMS",%progbits,1
 910              		.align	2
 911              	.LC0:
 912 0000 7B227479 		.ascii	"{\"type\":\"angle\",\"pitch\":%d,\"roll\":%d}\012\015"
 912      7065223A 
 912      22616E67 
 912      6C65222C 
 912      22706974 
 913 0027 00       		.ascii	"\000"
 914              		.section	.rodata.send_message_pack.str1.4,"aMS",%progbits,1
 915              		.align	2
 916              	.LC1:
 917 0000 7B227479 		.ascii	"{\"type\":\"message\",\"text\":\"%s\"}\012\015\000"
 917      7065223A 
 917      226D6573 
 917      73616765 
 917      222C2274 
 918              		.text
 919              	.Letext0:
 920              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 921              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 922              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 923              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 924              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 925              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 926              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 927              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 928              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 929              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 930              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 931              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 932              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 933              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 934              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h"
 935              		.file 17 "/usr/include/newlib/sys/lock.h"
 936              		.file 18 "/usr/include/newlib/sys/_types.h"
 937              		.file 19 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 938              		.file 20 "/usr/include/newlib/sys/reent.h"
 939              		.file 21 "/usr/include/newlib/math.h"
 940              		.file 22 "stm32-servomotor/servomotor.h"
 941              		.file 23 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 942              		.file 24 "Inc/main.h"
 943              		.file 25 "/usr/include/newlib/stdio.h"
 944              		.file 26 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cc2n0PMc.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc2n0PMc.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc2n0PMc.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc2n0PMc.s:63     .text.MX_GPIO_Init:000000000000002c $d
     /tmp/cc2n0PMc.s:68     .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/cc2n0PMc.s:74     .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/cc2n0PMc.s:115    .text.MX_I2C2_Init:0000000000000028 $d
                            *COM*:0000000000000054 hi2c2
     /tmp/cc2n0PMc.s:122    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc2n0PMc.s:128    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cc2n0PMc.s:198    .text.MX_TIM2_Init:0000000000000050 $d
                            *COM*:0000000000000040 htim2
     /tmp/cc2n0PMc.s:203    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cc2n0PMc.s:209    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cc2n0PMc.s:316    .text.MX_TIM3_Init:0000000000000088 $d
                            *COM*:0000000000000040 htim3
     /tmp/cc2n0PMc.s:322    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc2n0PMc.s:328    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc2n0PMc.s:368    .text.MX_USART1_UART_Init:0000000000000028 $d
                            *COM*:0000000000000040 huart1
     /tmp/cc2n0PMc.s:374    .text.MX_RTC_Init:0000000000000000 $t
     /tmp/cc2n0PMc.s:380    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/cc2n0PMc.s:408    .text.MX_RTC_Init:000000000000001c $d
                            *COM*:0000000000000014 hrtc
     /tmp/cc2n0PMc.s:414    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc2n0PMc.s:421    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc2n0PMc.s:434    .text.init_servomotors:0000000000000000 $t
     /tmp/cc2n0PMc.s:441    .text.init_servomotors:0000000000000000 init_servomotors
     /tmp/cc2n0PMc.s:495    .text.init_servomotors:0000000000000040 $d
                            *COM*:0000000000000014 servo_roll
                            *COM*:0000000000000014 servo_pitch
     /tmp/cc2n0PMc.s:502    .text.servo_update:0000000000000000 $t
     /tmp/cc2n0PMc.s:509    .text.servo_update:0000000000000000 servo_update
     /tmp/cc2n0PMc.s:521    .text.uart_message_update:0000000000000000 $t
     /tmp/cc2n0PMc.s:528    .text.uart_message_update:0000000000000000 uart_message_update
     /tmp/cc2n0PMc.s:540    .text.init_uart_messaging:0000000000000000 $t
     /tmp/cc2n0PMc.s:547    .text.init_uart_messaging:0000000000000000 init_uart_messaging
     /tmp/cc2n0PMc.s:567    .text.init_uart_messaging:000000000000000c $d
     /tmp/cc2n0PMc.s:572    .text.send_angle_pack:0000000000000000 $t
     /tmp/cc2n0PMc.s:579    .text.send_angle_pack:0000000000000000 send_angle_pack
     /tmp/cc2n0PMc.s:621    .text.send_angle_pack:0000000000000028 $d
     /tmp/cc2n0PMc.s:627    .text.send_message_pack:0000000000000000 $t
     /tmp/cc2n0PMc.s:634    .text.send_message_pack:0000000000000000 send_message_pack
     /tmp/cc2n0PMc.s:674    .text.send_message_pack:0000000000000028 $d
     /tmp/cc2n0PMc.s:680    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc2n0PMc.s:687    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc2n0PMc.s:774    .text.main:0000000000000000 $t
     /tmp/cc2n0PMc.s:781    .text.main:0000000000000000 main
     /tmp/cc2n0PMc.s:864    .text.main:000000000000006c $d
     /tmp/cc2n0PMc.s:874    .text.Error_Handler:0000000000000000 $t
     /tmp/cc2n0PMc.s:881    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc2n0PMc.s:900    .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc2n0PMc.s:910    .rodata.send_angle_pack.str1.4:0000000000000000 $d
     /tmp/cc2n0PMc.s:915    .rodata.send_message_pack.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

ARM GAS  /tmp/cc2n0PMc.s 			page 29


UNDEFINED SYMBOLS
HAL_I2C_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_MultiProcessor_Init
HAL_RTC_Init
servo_init
servo_set_offset
servo_set_position
HAL_TIM_Base_Start_IT
sprintf
strlen
HAL_UART_Transmit
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_Delay

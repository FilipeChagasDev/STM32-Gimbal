ARM GAS  /tmp/ccbXzfDN.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB65:
  25              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32f1xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Src/stm32f1xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f1xx_it.c **** 
  28:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f1xx_it.c **** 
  31:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f1xx_it.c **** 
  33:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccbXzfDN.s 			page 2


  34:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f1xx_it.c ****  
  36:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim2;
  60:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  61:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  62:Src/stm32f1xx_it.c **** 
  63:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  64:Src/stm32f1xx_it.c **** 
  65:Src/stm32f1xx_it.c **** /******************************************************************************/
  66:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
  67:Src/stm32f1xx_it.c **** /******************************************************************************/
  68:Src/stm32f1xx_it.c **** /**
  69:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  70:Src/stm32f1xx_it.c ****   */
  71:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  72:Src/stm32f1xx_it.c **** {
  26              		.loc 1 72 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 7047     		bx	lr
  32              		.cfi_endproc
  33              	.LFE65:
  35              		.section	.text.HardFault_Handler,"ax",%progbits
  36              		.align	1
  37              		.global	HardFault_Handler
  38              		.syntax unified
  39              		.thumb
  40              		.thumb_func
  41              		.fpu softvfp
  43              	HardFault_Handler:
  44              	.LFB66:
  73:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
ARM GAS  /tmp/ccbXzfDN.s 			page 3


  74:Src/stm32f1xx_it.c **** 
  75:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  76:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  77:Src/stm32f1xx_it.c **** 
  78:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  79:Src/stm32f1xx_it.c **** }
  80:Src/stm32f1xx_it.c **** 
  81:Src/stm32f1xx_it.c **** /**
  82:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  83:Src/stm32f1xx_it.c ****   */
  84:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  85:Src/stm32f1xx_it.c **** {
  45              		.loc 1 85 0
  46              		.cfi_startproc
  47              		@ Volatile: function does not return.
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.L3:
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE66:
  56              		.section	.text.MemManage_Handler,"ax",%progbits
  57              		.align	1
  58              		.global	MemManage_Handler
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	MemManage_Handler:
  65              	.LFB67:
  86:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  87:Src/stm32f1xx_it.c **** 
  88:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  89:Src/stm32f1xx_it.c ****   while (1)
  90:Src/stm32f1xx_it.c ****   {
  91:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  92:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  93:Src/stm32f1xx_it.c ****   }
  94:Src/stm32f1xx_it.c **** }
  95:Src/stm32f1xx_it.c **** 
  96:Src/stm32f1xx_it.c **** /**
  97:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
  98:Src/stm32f1xx_it.c ****   */
  99:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 100:Src/stm32f1xx_it.c **** {
  66              		.loc 1 100 0
  67              		.cfi_startproc
  68              		@ Volatile: function does not return.
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72              	.L5:
  73 0000 FEE7     		b	.L5
  74              		.cfi_endproc
  75              	.LFE67:
  77              		.section	.text.BusFault_Handler,"ax",%progbits
ARM GAS  /tmp/ccbXzfDN.s 			page 4


  78              		.align	1
  79              		.global	BusFault_Handler
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu softvfp
  85              	BusFault_Handler:
  86              	.LFB68:
 101:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 102:Src/stm32f1xx_it.c **** 
 103:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 104:Src/stm32f1xx_it.c ****   while (1)
 105:Src/stm32f1xx_it.c ****   {
 106:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 107:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 108:Src/stm32f1xx_it.c ****   }
 109:Src/stm32f1xx_it.c **** }
 110:Src/stm32f1xx_it.c **** 
 111:Src/stm32f1xx_it.c **** /**
 112:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 113:Src/stm32f1xx_it.c ****   */
 114:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 115:Src/stm32f1xx_it.c **** {
  87              		.loc 1 115 0
  88              		.cfi_startproc
  89              		@ Volatile: function does not return.
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.L7:
  94 0000 FEE7     		b	.L7
  95              		.cfi_endproc
  96              	.LFE68:
  98              		.section	.text.UsageFault_Handler,"ax",%progbits
  99              		.align	1
 100              		.global	UsageFault_Handler
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu softvfp
 106              	UsageFault_Handler:
 107              	.LFB69:
 116:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 117:Src/stm32f1xx_it.c **** 
 118:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 119:Src/stm32f1xx_it.c ****   while (1)
 120:Src/stm32f1xx_it.c ****   {
 121:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 122:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 123:Src/stm32f1xx_it.c ****   }
 124:Src/stm32f1xx_it.c **** }
 125:Src/stm32f1xx_it.c **** 
 126:Src/stm32f1xx_it.c **** /**
 127:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 128:Src/stm32f1xx_it.c ****   */
 129:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 130:Src/stm32f1xx_it.c **** {
ARM GAS  /tmp/ccbXzfDN.s 			page 5


 108              		.loc 1 130 0
 109              		.cfi_startproc
 110              		@ Volatile: function does not return.
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 114              	.L9:
 115 0000 FEE7     		b	.L9
 116              		.cfi_endproc
 117              	.LFE69:
 119              		.section	.text.SVC_Handler,"ax",%progbits
 120              		.align	1
 121              		.global	SVC_Handler
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu softvfp
 127              	SVC_Handler:
 128              	.LFB70:
 131:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 132:Src/stm32f1xx_it.c **** 
 133:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 134:Src/stm32f1xx_it.c ****   while (1)
 135:Src/stm32f1xx_it.c ****   {
 136:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 137:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 138:Src/stm32f1xx_it.c ****   }
 139:Src/stm32f1xx_it.c **** }
 140:Src/stm32f1xx_it.c **** 
 141:Src/stm32f1xx_it.c **** /**
 142:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 143:Src/stm32f1xx_it.c ****   */
 144:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 145:Src/stm32f1xx_it.c **** {
 129              		.loc 1 145 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 0000 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE70:
 138              		.section	.text.DebugMon_Handler,"ax",%progbits
 139              		.align	1
 140              		.global	DebugMon_Handler
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu softvfp
 146              	DebugMon_Handler:
 147              	.LFB71:
 146:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 147:Src/stm32f1xx_it.c **** 
 148:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 149:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 150:Src/stm32f1xx_it.c **** 
 151:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
ARM GAS  /tmp/ccbXzfDN.s 			page 6


 152:Src/stm32f1xx_it.c **** }
 153:Src/stm32f1xx_it.c **** 
 154:Src/stm32f1xx_it.c **** /**
 155:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 156:Src/stm32f1xx_it.c ****   */
 157:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 158:Src/stm32f1xx_it.c **** {
 148              		.loc 1 158 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153 0000 7047     		bx	lr
 154              		.cfi_endproc
 155              	.LFE71:
 157              		.section	.text.PendSV_Handler,"ax",%progbits
 158              		.align	1
 159              		.global	PendSV_Handler
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu softvfp
 165              	PendSV_Handler:
 166              	.LFB72:
 159:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 160:Src/stm32f1xx_it.c **** 
 161:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 162:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 163:Src/stm32f1xx_it.c **** 
 164:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 165:Src/stm32f1xx_it.c **** }
 166:Src/stm32f1xx_it.c **** 
 167:Src/stm32f1xx_it.c **** /**
 168:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 169:Src/stm32f1xx_it.c ****   */
 170:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 171:Src/stm32f1xx_it.c **** {
 167              		.loc 1 171 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 0000 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE72:
 176              		.section	.text.SysTick_Handler,"ax",%progbits
 177              		.align	1
 178              		.global	SysTick_Handler
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu softvfp
 184              	SysTick_Handler:
 185              	.LFB73:
 172:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 173:Src/stm32f1xx_it.c **** 
 174:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
ARM GAS  /tmp/ccbXzfDN.s 			page 7


 175:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 176:Src/stm32f1xx_it.c **** 
 177:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 178:Src/stm32f1xx_it.c **** }
 179:Src/stm32f1xx_it.c **** 
 180:Src/stm32f1xx_it.c **** /**
 181:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 182:Src/stm32f1xx_it.c ****   */
 183:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 184:Src/stm32f1xx_it.c **** {
 186              		.loc 1 184 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		.loc 1 184 0
 191 0000 08B5     		push	{r3, lr}
 192              	.LCFI0:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 3, -8
 195              		.cfi_offset 14, -4
 185:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 186:Src/stm32f1xx_it.c **** 
 187:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 188:Src/stm32f1xx_it.c ****   HAL_IncTick();
 196              		.loc 1 188 0
 197 0002 FFF7FEFF 		bl	HAL_IncTick
 198              	.LVL0:
 199 0006 08BD     		pop	{r3, pc}
 200              		.cfi_endproc
 201              	.LFE73:
 203              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 204              		.align	1
 205              		.global	TIM2_IRQHandler
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu softvfp
 211              	TIM2_IRQHandler:
 212              	.LFB74:
 189:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 190:Src/stm32f1xx_it.c **** 
 191:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 192:Src/stm32f1xx_it.c **** }
 193:Src/stm32f1xx_it.c **** 
 194:Src/stm32f1xx_it.c **** /******************************************************************************/
 195:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 196:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 197:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 198:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 199:Src/stm32f1xx_it.c **** /******************************************************************************/
 200:Src/stm32f1xx_it.c **** 
 201:Src/stm32f1xx_it.c **** /**
 202:Src/stm32f1xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 203:Src/stm32f1xx_it.c ****   */
 204:Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
 205:Src/stm32f1xx_it.c **** {
 213              		.loc 1 205 0
ARM GAS  /tmp/ccbXzfDN.s 			page 8


 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217 0000 08B5     		push	{r3, lr}
 218              	.LCFI1:
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 3, -8
 221              		.cfi_offset 14, -4
 206:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 207:Src/stm32f1xx_it.c **** 
 208:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 209:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 222              		.loc 1 209 0
 223 0002 0248     		ldr	r0, .L17
 224 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 225              	.LVL1:
 226 0008 08BD     		pop	{r3, pc}
 227              	.L18:
 228 000a 00BF     		.align	2
 229              	.L17:
 230 000c 00000000 		.word	htim2
 231              		.cfi_endproc
 232              	.LFE74:
 234              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 235              		.align	1
 236              		.global	TIM3_IRQHandler
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu softvfp
 242              	TIM3_IRQHandler:
 243              	.LFB75:
 210:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 211:Src/stm32f1xx_it.c **** 
 212:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 213:Src/stm32f1xx_it.c **** }
 214:Src/stm32f1xx_it.c **** 
 215:Src/stm32f1xx_it.c **** /**
 216:Src/stm32f1xx_it.c ****   * @brief This function handles TIM3 global interrupt.
 217:Src/stm32f1xx_it.c ****   */
 218:Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 219:Src/stm32f1xx_it.c **** {
 244              		.loc 1 219 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248 0000 08B5     		push	{r3, lr}
 249              	.LCFI2:
 250              		.cfi_def_cfa_offset 8
 251              		.cfi_offset 3, -8
 252              		.cfi_offset 14, -4
 220:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 221:Src/stm32f1xx_it.c **** 
 222:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
 223:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
 253              		.loc 1 223 0
 254 0002 0248     		ldr	r0, .L21
ARM GAS  /tmp/ccbXzfDN.s 			page 9


 255 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 256              	.LVL2:
 257 0008 08BD     		pop	{r3, pc}
 258              	.L22:
 259 000a 00BF     		.align	2
 260              	.L21:
 261 000c 00000000 		.word	htim3
 262              		.cfi_endproc
 263              	.LFE75:
 265              		.text
 266              	.Letext0:
 267              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 268              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 269              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 270              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 271              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 272              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 273              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 274              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 275              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccbXzfDN.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccbXzfDN.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccbXzfDN.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccbXzfDN.s:36     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccbXzfDN.s:43     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccbXzfDN.s:57     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccbXzfDN.s:64     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccbXzfDN.s:78     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccbXzfDN.s:85     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccbXzfDN.s:99     .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccbXzfDN.s:106    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccbXzfDN.s:120    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccbXzfDN.s:127    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccbXzfDN.s:139    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccbXzfDN.s:146    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccbXzfDN.s:158    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccbXzfDN.s:165    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccbXzfDN.s:177    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccbXzfDN.s:184    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccbXzfDN.s:204    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccbXzfDN.s:211    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccbXzfDN.s:230    .text.TIM2_IRQHandler:000000000000000c $d
     /tmp/ccbXzfDN.s:235    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/ccbXzfDN.s:242    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/ccbXzfDN.s:261    .text.TIM3_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_TIM_IRQHandler
htim2
htim3
